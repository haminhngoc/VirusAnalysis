<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: x_asm</title>
<meta name="KEYWORDS" content="x.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for x.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="x_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_1_asm.php">x_1_asm</a><br>
<a href="x-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x-1_asm.php">x-1_asm</a><br>
<a href="x_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_2_asm.php">x_2_asm</a><br>
<a href="x-2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x-2_asm.php">x-2_asm</a><br>
<a href="xa1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xa1__asm.php">xa1__asm</a><br>
<a href="xa1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xa1_asm.php">xa1_asm</a><br>
<a href="x__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x__asm.php">x__asm</a><br>
<a href="x_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_asm.php">x_asm</a><br>
<a href="xboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xboot_asm.php">xboot_asm</a><br>
<a href="xdx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xdx_asm.php">xdx_asm</a><br>
<a href="xmas_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xmas_pas.php">xmas_pas</a><br>
<a href="xph-1029_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph-1029_asm.php">xph-1029_asm</a><br>
<a href="xph_1100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph_1100_asm.php">xph_1100_asm</a><br>
<a href="xph-1100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph-1100_asm.php">xph-1100_asm</a><br>
<a href="xxx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xxx_asm.php">xxx_asm</a><br>
<a href="xyz__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz__asm.php">xyz__asm</a><br>
<a href="xyz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz_asm.php">xyz_asm</a><br>
<a href="xyz-v2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz-v2_asm.php">xyz-v2_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/z/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/z/index.php'" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

         TITLE     'X - Keyboard Xtender'
         PAGE 60,132

;        X is a device driver that expands the keyboard buffer
;        to 256 keystrokes (512 bytes)

;        X is Snareware.  Once you try it you'll be hooked!

;        Written by Jeffrey Broome (CIS 76366,1211)
;        created: 1-17-93


X        SEGMENT   PARA

         ASSUME    CS:X, DS:NOTHING    ; assume nothing, know everything!

BUF_SIZE EQU  512                      ; size of buffer in bytes

         ORG  0000H

         DD   -1                       ; next device pointer
         DW   8000H                    ; device attributes
         DW   offset STRATEGY          ; address of strategy routine
         DW   offset INTERRUPT         ; address of interrupt routine
         DB   'KEYB-X  '               ; device name

REQ_PTR  DD   ?                        ; request buffer pointer
         
BUFFER   DB   BUF_SIZE dup (?)         ; new keyboard buffer

STRATEGY PROC FAR
         MOV  CS:WORD PTR [REQ_PTR],BX      ; save pointer to request buffer
         MOV  CS:WORD PTR [REQ_PTR+2],ES
         RET
STRATEGY ENDP

INTERRUPT PROC FAR
         PUSH DS
         PUSH BX
         PUSH AX
         LDS  BX,CS:[REQ_PTR]          ; get pointer to request buffer
         MOV  AH,[BX+2]                ; get command from buffer
         OR   AH,AH                    ; is command = 0?
         JNZ  EXIT

         CALL INIT                     ; call initialize routine

EXIT:    MOV  AX,100h                  ; set done bit in status
         MOV  [BX+3],AX                ; indicate status
         POP  AX                       ; restore stack and return
         POP  BX
         POP  DS
         RET
INTERRUPT ENDP

INIT     PROC NEAR
         PUSH CX                       ; save CX
         PUSH DX                       ; save DX

         MOV  AX,OFFSET BUFFER         ; get address of new keyboard buffer
         MOV  CX,CS                    ; get current code segment
         CMP  CX,1000h                 ; is segment too big?
         JNC  TOOBIG                   ; jump if code segment to high
         SHL  CX,1                     ; convert segment to real address
         SHL  CX,1
         SHL  CX,1
         SHL  CX,1
         ADD  CX,AX                    ; add in offset
         SUB  CX,400h                  ; subtract BIOS memory segment (40h)
         MOV  AX,40h
         MOV  DS,AX                    ; point to BIOS memory segment
         MOV  BX,1Ah
         MOV  [BX],CX                  ; store keyboard head pointer
         MOV  [BX+2],CX                ; store tail pointer
         MOV  BX,80h
         MOV  [BX],CX                  ; store keyboard buffer start
         ADD  CX,BUF_SIZE              ; add size of keyboard buffer
         MOV  [BX+2],CX                ; store keyboard buffer end

         MOV  AX,OFFSET INIT
         MOV  CX,CS                    ; get current code segment
         SHL  CX,1                     ; convert segment to real address
         SHL  CX,1
         SHL  CX,1
         SHL  CX,1
         ADD  CX,AX                    ; add in offset
         ADD  CX,0Fh                   ; round to next segment
         SHR  CX,1                     ; convert back to segment
         SHR  CX,1         
         SHR  CX,1         
         SHR  CX,1         

         MOV  AH,9                     ; print a message function of int 21h
         LEA  DX,X_MSG                 ; get address of message
         PUSH CS
         POP  DS                       ; DS = CS
         INT  21h                      ; call DOS

         LDS  BX,CS:[REQ_PTR]          ; get pointer to request buffer
         MOV  AL,1
         MOV  [BX+0Dh],AL              ; number of units (must be non-zero)

         XOR  AX,AX                    ; AX = 0
         MOV  [BX+0Eh],AX              ; offset of next free byte (0)
         MOV  [BX+10h],CX              ; segment of next free byte

         JMP  SHORT DONE               ; go return to caller


TOOBIG:  MOV  AH,9                     ; print a message function of int 21h
         MOV  DX,OFFSET X_ERR          ; get address of error message
         PUSH CS
         POP  DS                       ; DS = CS
         INT  21h                      ; call DOS

         LDS  BX,CS:[REQ_PTR]          ; get pointer to request buffer
         MOV  AL,0
         MOV  [BX+0Dh],AL              ; number of units=0 means do not load

         XOR  AX,AX                    ; AX = 0
         MOV  [BX+0Eh],AX              ; offset of next free byte (0)

         MOV  CX,CS                    ; segment of free byte = CS
                                       ; this will not load driver
         MOV  [BX+10h],CX              ; segment of next free byte

DONE:    POP  DX                       ; restore DX
         POP  CX                       ; restore CX
         RET
INIT     ENDP 

X_MSG    DB   'Keyboard Xtender Loaded',13,10,'$'
X_ERR    DB   'Keyboard Xtender cannot be loaded!',13,10,'$'


X        ENDS
         END


</textarea></td></tr></table></body></html>
